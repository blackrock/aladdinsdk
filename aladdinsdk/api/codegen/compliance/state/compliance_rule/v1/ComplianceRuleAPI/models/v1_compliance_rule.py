# coding: utf-8

"""
    Compliance Rule

    Compliance Rules are used to automatically monitor whether a fund adheres to a regulation, client mandate, or internal guideline.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.enums_compliance_deadline import EnumsComplianceDeadline
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.enums_compliance_rule_label import EnumsComplianceRuleLabel
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_concentration_rule import V1ConcentrationRule
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_counterparty_exposure_limit_rule import V1CounterpartyExposureLimitRule
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_counterparty_rule import V1CounterpartyRule
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_disclosure_rule import V1DisclosureRule
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_look_through_definition_rule import V1LookThroughDefinitionRule
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_prohibition_rule import V1ProhibitionRule
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_scripted_rule import V1ScriptedRule
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_state import V1State
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_trade_rule import V1TradeRule
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_value_at_risk_rule import V1ValueAtRiskRule

class V1ComplianceRule(BaseModel):
    """
    Represents set of rules or instructions applicable to portfolios.
    """
    id: StrictStr = Field(..., description="The unique name of the rule.  Max length of rule name is 20 characters.")
    description: StrictStr = Field(...)
    category: Optional[StrictStr] = Field(None, description="This is documentation field for rule. It represents compliance categories e.g Contingent Liability tags, Money Market: Rated Funds - S&P.")
    rule_usage: Optional[StrictStr] = Field(None, alias="ruleUsage", description="This is documentation field for rule. It represents usage of rule.")
    coding_note: Optional[StrictStr] = Field(None, alias="codingNote", description="It is the working of the specific rule.")
    jurisdiction_country_code: Optional[StrictStr] = Field(None, alias="jurisdictionCountryCode", description="Jurisdiction country code. It is a two digit code for a country e.g UK for United Kingdom.")
    regulation: Optional[StrictStr] = Field(None, description="The regulation of a rule.")
    compliance_deadline: Optional[EnumsComplianceDeadline] = Field(None, alias="complianceDeadline")
    labels: Optional[conlist(EnumsComplianceRuleLabel)] = Field(None, description="ComplianceRuleLabel for a rule e.g Prohibited Investments, Restricted Issuers etc.")
    documentation: Optional[StrictStr] = Field(None, description="A detailed documentation of the rule.")
    prohibition_rule: Optional[V1ProhibitionRule] = Field(None, alias="prohibitionRule")
    concentration_rule: Optional[V1ConcentrationRule] = Field(None, alias="concentrationRule")
    value_at_risk_rule: Optional[V1ValueAtRiskRule] = Field(None, alias="valueAtRiskRule")
    disclosure_rule: Optional[V1DisclosureRule] = Field(None, alias="disclosureRule")
    scripted_rule: Optional[V1ScriptedRule] = Field(None, alias="scriptedRule")
    look_through_definition_rule: Optional[V1LookThroughDefinitionRule] = Field(None, alias="lookThroughDefinitionRule")
    information_rule: Optional[Dict[str, Any]] = Field(None, alias="informationRule")
    trade_rule: Optional[V1TradeRule] = Field(None, alias="tradeRule")
    counterparty_rule: Optional[V1CounterpartyRule] = Field(None, alias="counterpartyRule")
    counterparty_exposure_limit_rule: Optional[V1CounterpartyExposureLimitRule] = Field(None, alias="counterpartyExposureLimitRule")
    state: Optional[V1State] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    modifier: Optional[StrictStr] = None
    __properties = ["id", "description", "category", "ruleUsage", "codingNote", "jurisdictionCountryCode", "regulation", "complianceDeadline", "labels", "documentation", "prohibitionRule", "concentrationRule", "valueAtRiskRule", "disclosureRule", "scriptedRule", "lookThroughDefinitionRule", "informationRule", "tradeRule", "counterpartyRule", "counterpartyExposureLimitRule", "state", "modifyTime", "modifier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ComplianceRule:
        """Create an instance of V1ComplianceRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of prohibition_rule
        if self.prohibition_rule:
            _dict['prohibitionRule'] = self.prohibition_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of concentration_rule
        if self.concentration_rule:
            _dict['concentrationRule'] = self.concentration_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_at_risk_rule
        if self.value_at_risk_rule:
            _dict['valueAtRiskRule'] = self.value_at_risk_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disclosure_rule
        if self.disclosure_rule:
            _dict['disclosureRule'] = self.disclosure_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scripted_rule
        if self.scripted_rule:
            _dict['scriptedRule'] = self.scripted_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of look_through_definition_rule
        if self.look_through_definition_rule:
            _dict['lookThroughDefinitionRule'] = self.look_through_definition_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade_rule
        if self.trade_rule:
            _dict['tradeRule'] = self.trade_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of counterparty_rule
        if self.counterparty_rule:
            _dict['counterpartyRule'] = self.counterparty_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of counterparty_exposure_limit_rule
        if self.counterparty_exposure_limit_rule:
            _dict['counterpartyExposureLimitRule'] = self.counterparty_exposure_limit_rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ComplianceRule:
        """Create an instance of V1ComplianceRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ComplianceRule.parse_obj(obj)

        _obj = V1ComplianceRule.parse_obj({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "category": obj.get("category"),
            "rule_usage": obj.get("ruleUsage"),
            "coding_note": obj.get("codingNote"),
            "jurisdiction_country_code": obj.get("jurisdictionCountryCode"),
            "regulation": obj.get("regulation"),
            "compliance_deadline": obj.get("complianceDeadline"),
            "labels": obj.get("labels"),
            "documentation": obj.get("documentation"),
            "prohibition_rule": V1ProhibitionRule.from_dict(obj.get("prohibitionRule")) if obj.get("prohibitionRule") is not None else None,
            "concentration_rule": V1ConcentrationRule.from_dict(obj.get("concentrationRule")) if obj.get("concentrationRule") is not None else None,
            "value_at_risk_rule": V1ValueAtRiskRule.from_dict(obj.get("valueAtRiskRule")) if obj.get("valueAtRiskRule") is not None else None,
            "disclosure_rule": V1DisclosureRule.from_dict(obj.get("disclosureRule")) if obj.get("disclosureRule") is not None else None,
            "scripted_rule": V1ScriptedRule.from_dict(obj.get("scriptedRule")) if obj.get("scriptedRule") is not None else None,
            "look_through_definition_rule": V1LookThroughDefinitionRule.from_dict(obj.get("lookThroughDefinitionRule")) if obj.get("lookThroughDefinitionRule") is not None else None,
            "information_rule": obj.get("informationRule"),
            "trade_rule": V1TradeRule.from_dict(obj.get("tradeRule")) if obj.get("tradeRule") is not None else None,
            "counterparty_rule": V1CounterpartyRule.from_dict(obj.get("counterpartyRule")) if obj.get("counterpartyRule") is not None else None,
            "counterparty_exposure_limit_rule": V1CounterpartyExposureLimitRule.from_dict(obj.get("counterpartyExposureLimitRule")) if obj.get("counterpartyExposureLimitRule") is not None else None,
            "state": obj.get("state"),
            "modify_time": obj.get("modifyTime"),
            "modifier": obj.get("modifier")
        })
        return _obj

