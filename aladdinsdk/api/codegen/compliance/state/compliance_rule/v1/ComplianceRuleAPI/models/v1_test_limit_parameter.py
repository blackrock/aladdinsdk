# coding: utf-8

"""
    Compliance Rule

    Compliance Rules are used to automatically monitor whether a fund adheres to a regulation, client mandate, or internal guideline.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_direction import V1Direction
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_next_threshold_type import V1NextThresholdType
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_token_severity import V1TokenSeverity

class V1TestLimitParameter(BaseModel):
    """
    TestLimitParameter of DisclosureRule Rule type.
    """
    token_severity: Optional[V1TokenSeverity] = Field(None, alias="tokenSeverity")
    direction: Optional[V1Direction] = None
    test_limit: Optional[StrictInt] = Field(None, alias="testLimit", description="Maximal (upper) value of the parameter.")
    next_threshold_type: Optional[V1NextThresholdType] = Field(None, alias="nextThresholdType")
    increment: Optional[StrictInt] = Field(None, description="Disclosable threshold increment value.")
    inclusive: Optional[StrictBool] = Field(None, description="Inclusive threshold Rule Flag is the field used for threshold rows means include-non-Investment positions rows. It can be populated on any limit row.The possible values could be true/false.")
    __properties = ["tokenSeverity", "direction", "testLimit", "nextThresholdType", "increment", "inclusive"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TestLimitParameter:
        """Create an instance of V1TestLimitParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TestLimitParameter:
        """Create an instance of V1TestLimitParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TestLimitParameter.parse_obj(obj)

        _obj = V1TestLimitParameter.parse_obj({
            "token_severity": obj.get("tokenSeverity"),
            "direction": obj.get("direction"),
            "test_limit": obj.get("testLimit"),
            "next_threshold_type": obj.get("nextThresholdType"),
            "increment": obj.get("increment"),
            "inclusive": obj.get("inclusive")
        })
        return _obj

