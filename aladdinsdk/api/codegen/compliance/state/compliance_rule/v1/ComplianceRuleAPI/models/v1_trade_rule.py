# coding: utf-8

"""
    Compliance Rule

    Compliance Rules are used to automatically monitor whether a fund adheres to a regulation, client mandate, or internal guideline.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.enums_compliance_severity import EnumsComplianceSeverity

class V1TradeRule(BaseModel):
    """
    TradeRule Rule type.
    """
    severity: Optional[EnumsComplianceSeverity] = None
    filter: StrictStr = Field(..., description="The rule's filter is the condition, which identifies the securities that are subject to the rule's test.")
    description_token: Optional[StrictStr] = Field(None, alias="descriptionToken", description="Description which is displayed to whomever is entering the offending trade.")
    list_token: Optional[StrictStr] = Field(None, alias="listToken", description="Condition Token to be used in conjuction with the port list.")
    list_name: Optional[StrictStr] = Field(None, alias="listName", description="The list name defines the actual broker/portfolio list that contains either a list of APPROVED or RESTRICTED brokers.")
    __properties = ["severity", "filter", "descriptionToken", "listToken", "listName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TradeRule:
        """Create an instance of V1TradeRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TradeRule:
        """Create an instance of V1TradeRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TradeRule.parse_obj(obj)

        _obj = V1TradeRule.parse_obj({
            "severity": obj.get("severity"),
            "filter": obj.get("filter"),
            "description_token": obj.get("descriptionToken"),
            "list_token": obj.get("listToken"),
            "list_name": obj.get("listName")
        })
        return _obj

