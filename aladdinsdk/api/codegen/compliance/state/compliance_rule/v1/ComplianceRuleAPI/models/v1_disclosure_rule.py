# coding: utf-8

"""
    Compliance Rule

    Compliance Rules are used to automatically monitor whether a fund adheres to a regulation, client mandate, or internal guideline.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_abacus_mode import V1AbacusMode
from aladdinsdk.api.codegen.compliance.state.compliance_rule.v1.ComplianceRuleAPI.models.v1_test_limit_parameter import V1TestLimitParameter

class V1DisclosureRule(BaseModel):
    """
    DisclosureRule Rule type.
    """
    filter: StrictStr = Field(..., description="The rule's filter is the condition, which identifies the securities that are subject to the rule's test.")
    group_by_values: conlist(StrictStr) = Field(..., alias="groupByValues")
    look_through_condition: Optional[StrictStr] = Field(None, alias="lookThroughCondition", description="The field indicating how look-through will be applied during the rule's evaluation.")
    frequency: Optional[StrictStr] = None
    additional_argument: Optional[StrictStr] = Field(None, alias="additionalArgument", description="This field is used in Disclosure rules to get the threshold results.")
    include_non_investment_position: Optional[StrictBool] = Field(None, alias="includeNonInvestmentPosition", description="A Boolean flag to include non-investment positions such as collateral and security lending positions.")
    abacus_mode: Optional[V1AbacusMode] = Field(None, alias="abacusMode")
    test_token: StrictStr = Field(..., alias="testToken", description="The rule's test token, which represents the rule's exposure calculation but not the limit, which will be dictated at the assignment level. e.g., in #pct_of_equity>10 the testToken is #pct_of_equity.")
    test_limit_parameters: Optional[conlist(V1TestLimitParameter)] = Field(None, alias="testLimitParameters", description="Test Limit Parameters for validating the threshold limits.The various attributes to describe test limits are severity,limit,direction,increment and test token.")
    disable_directionality: Optional[StrictBool] = Field(None, alias="disableDirectionality")
    __properties = ["filter", "groupByValues", "lookThroughCondition", "frequency", "additionalArgument", "includeNonInvestmentPosition", "abacusMode", "testToken", "testLimitParameters", "disableDirectionality"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1DisclosureRule:
        """Create an instance of V1DisclosureRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in test_limit_parameters (list)
        _items = []
        if self.test_limit_parameters:
            for _item in self.test_limit_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['testLimitParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1DisclosureRule:
        """Create an instance of V1DisclosureRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1DisclosureRule.parse_obj(obj)

        _obj = V1DisclosureRule.parse_obj({
            "filter": obj.get("filter"),
            "group_by_values": obj.get("groupByValues"),
            "look_through_condition": obj.get("lookThroughCondition"),
            "frequency": obj.get("frequency"),
            "additional_argument": obj.get("additionalArgument"),
            "include_non_investment_position": obj.get("includeNonInvestmentPosition"),
            "abacus_mode": obj.get("abacusMode"),
            "test_token": obj.get("testToken"),
            "test_limit_parameters": [V1TestLimitParameter.from_dict(_item) for _item in obj.get("testLimitParameters")] if obj.get("testLimitParameters") is not None else None,
            "disable_directionality": obj.get("disableDirectionality")
        })
        return _obj

