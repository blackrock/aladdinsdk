# coding: utf-8

"""
    Compliance Rule Assignment

    Rule assignment assigns compliance rules for portfolio.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.compliance.state.compliance_rule_assignment.v1.ComplianceRuleAssignmentAPI.models.enums_compliance_severity import EnumsComplianceSeverity
from aladdinsdk.api.codegen.compliance.state.compliance_rule_assignment.v1.ComplianceRuleAssignmentAPI.models.v1_test_detail import V1TestDetail

class V1CustomizableRuleConfig(BaseModel):
    """
    V1CustomizableRuleConfig
    """
    severity: Optional[EnumsComplianceSeverity] = None
    test_detail: Optional[V1TestDetail] = Field(None, alias="testDetail")
    __properties = ["severity", "testDetail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CustomizableRuleConfig:
        """Create an instance of V1CustomizableRuleConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of test_detail
        if self.test_detail:
            _dict['testDetail'] = self.test_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CustomizableRuleConfig:
        """Create an instance of V1CustomizableRuleConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CustomizableRuleConfig.parse_obj(obj)

        _obj = V1CustomizableRuleConfig.parse_obj({
            "severity": obj.get("severity"),
            "test_detail": V1TestDetail.from_dict(obj.get("testDetail")) if obj.get("testDetail") is not None else None
        })
        return _obj

