# coding: utf-8

"""
    Violation

    Retrieve and Create Compliance Violations  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.compliance.state.violation.v1.ViolationAPI.models.enums_compliance_resolutions_state import EnumsComplianceResolutionsState

class TheRequestMessageForViolationAPIAddResolution(BaseModel):
    """
    TheRequestMessageForViolationAPIAddResolution
    """
    modification_time: datetime = Field(..., alias="modificationTime", description="The last modified time of the violation you are intending to update. This field will be used to validate that the violation being updated has not already been altered by someone else.")
    resolution_comment: Optional[StrictStr] = Field(None, alias="resolutionComment", description="Resolution comments for the violation. Appended to existing comments.")
    resolution_status: Optional[EnumsComplianceResolutionsState] = Field(None, alias="resolutionStatus")
    violation_disposition: Optional[StrictStr] = Field(None, alias="violationDisposition", description="This value is populated when a violation is being closed.")
    __properties = ["modificationTime", "resolutionComment", "resolutionStatus", "violationDisposition"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TheRequestMessageForViolationAPIAddResolution:
        """Create an instance of TheRequestMessageForViolationAPIAddResolution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TheRequestMessageForViolationAPIAddResolution:
        """Create an instance of TheRequestMessageForViolationAPIAddResolution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TheRequestMessageForViolationAPIAddResolution.parse_obj(obj)

        _obj = TheRequestMessageForViolationAPIAddResolution.parse_obj({
            "modification_time": obj.get("modificationTime"),
            "resolution_comment": obj.get("resolutionComment"),
            "resolution_status": obj.get("resolutionStatus"),
            "violation_disposition": obj.get("violationDisposition")
        })
        return _obj

