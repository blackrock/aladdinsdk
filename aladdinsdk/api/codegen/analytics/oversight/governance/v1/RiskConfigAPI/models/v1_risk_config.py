# coding: utf-8

"""
    Risk Governance - Configuration

    Retrieve, update, and create configurations which drive Risk Governance behaviours and Risk Radar UI choices.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.risk_config_config_entity_type import RiskConfigConfigEntityType
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_config_record import V1ConfigRecord

class V1RiskConfig(BaseModel):
    """
    RiskConfig describes...
    """
    id: Optional[StrictStr] = None
    config_type: StrictStr = Field(..., alias="configType")
    revision_id: Optional[StrictStr] = Field(None, alias="revisionId")
    modification_author: Optional[StrictStr] = Field(None, alias="modificationAuthor")
    entry_time: Optional[datetime] = Field(None, alias="entryTime")
    expiry_time: Optional[datetime] = Field(None, alias="expiryTime")
    config_entity_type: Optional[RiskConfigConfigEntityType] = Field(None, alias="configEntityType")
    config_entity_id: StrictStr = Field(..., alias="configEntityId")
    summary: Optional[StrictStr] = None
    config_record: Optional[V1ConfigRecord] = Field(None, alias="configRecord")
    __properties = ["id", "configType", "revisionId", "modificationAuthor", "entryTime", "expiryTime", "configEntityType", "configEntityId", "summary", "configRecord"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RiskConfig:
        """Create an instance of V1RiskConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "revision_id",
                            "modification_author",
                            "expiry_time",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of config_record
        if self.config_record:
            _dict['configRecord'] = self.config_record.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RiskConfig:
        """Create an instance of V1RiskConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RiskConfig.parse_obj(obj)

        _obj = V1RiskConfig.parse_obj({
            "id": obj.get("id"),
            "config_type": obj.get("configType"),
            "revision_id": obj.get("revisionId"),
            "modification_author": obj.get("modificationAuthor"),
            "entry_time": obj.get("entryTime"),
            "expiry_time": obj.get("expiryTime"),
            "config_entity_type": obj.get("configEntityType"),
            "config_entity_id": obj.get("configEntityId"),
            "summary": obj.get("summary"),
            "config_record": V1ConfigRecord.from_dict(obj.get("configRecord")) if obj.get("configRecord") is not None else None
        })
        return _obj

