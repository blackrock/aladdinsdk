# coding: utf-8

"""
    Risk Governance - Configuration

    Retrieve, update, and create configurations which drive Risk Governance behaviours and Risk Radar UI choices.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_list_risk_config_response import V1ListRiskConfigResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_list_risk_config_revisions_response import V1ListRiskConfigRevisionsResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_resolve_risk_config_response import V1ResolveRiskConfigResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_retrieve_risk_config_by_id_request import V1RetrieveRiskConfigByIdRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_retrieve_risk_config_by_id_response import V1RetrieveRiskConfigByIdResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_risk_config import V1RiskConfig

from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.api_client import ApiClient
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultRiskConfigAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def risk_config_api_create_risk_config(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1RiskConfig, Field(..., description="configuration object to be created")], **kwargs) -> V1RiskConfig:  # noqa: E501
        """Create new configuration record  # noqa: E501

        Create new configuration record or add a new revision to an existing record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_create_risk_config(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: configuration object to be created (required)
        :type body: V1RiskConfig
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1RiskConfig
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_config_api_create_risk_config_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_config_api_create_risk_config_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_config_api_create_risk_config_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1RiskConfig, Field(..., description="configuration object to be created")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create new configuration record  # noqa: E501

        Create new configuration record or add a new revision to an existing record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_create_risk_config_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: configuration object to be created (required)
        :type body: V1RiskConfig
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1RiskConfig, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_config_api_create_risk_config" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1RiskConfig",
            '400': "RiskConfigAPIListRiskConfig400Response",
            '401': "RiskConfigAPIListRiskConfig400Response",
            '403': "RiskConfigAPIListRiskConfig400Response",
            '404': "RiskConfigAPIListRiskConfig400Response",
        }

        return self.api_client.call_api(
            '/config', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_config_api_list_risk_config(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], filter : Annotated[Optional[StrictStr], Field(description="Used to provide with https://google.aip.dev/160 filtering capabilities.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListRiskConfig` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `ListRiskConfig` must match the call that provided the page token.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response. The service may return fewer than this value. The maximum value is 1000. If unspecified, at most 1000 entries will be returned.")] = None, **kwargs) -> V1ListRiskConfigResponse:  # noqa: E501
        """List configurations  # noqa: E501

        Retrieve a list of configurations matching the specified filter criteria.  Based on https://google.aip.dev/160 , this operation provides a flexible way to filter records. This complements the bulk retrieval operation which filters specifically using the configuration records natural unique identifiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_list_risk_config(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param filter: Used to provide with https://google.aip.dev/160 filtering capabilities.
        :type filter: str
        :param page_token: A page token, received from a previous `ListRiskConfig` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `ListRiskConfig` must match the call that provided the page token.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response. The service may return fewer than this value. The maximum value is 1000. If unspecified, at most 1000 entries will be returned.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListRiskConfigResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_config_api_list_risk_config_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_config_api_list_risk_config_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_config_api_list_risk_config_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], filter : Annotated[Optional[StrictStr], Field(description="Used to provide with https://google.aip.dev/160 filtering capabilities.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListRiskConfig` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `ListRiskConfig` must match the call that provided the page token.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response. The service may return fewer than this value. The maximum value is 1000. If unspecified, at most 1000 entries will be returned.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List configurations  # noqa: E501

        Retrieve a list of configurations matching the specified filter criteria.  Based on https://google.aip.dev/160 , this operation provides a flexible way to filter records. This complements the bulk retrieval operation which filters specifically using the configuration records natural unique identifiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_list_risk_config_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param filter: Used to provide with https://google.aip.dev/160 filtering capabilities.
        :type filter: str
        :param page_token: A page token, received from a previous `ListRiskConfig` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `ListRiskConfig` must match the call that provided the page token.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response. The service may return fewer than this value. The maximum value is 1000. If unspecified, at most 1000 entries will be returned.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListRiskConfigResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'filter',
            'page_token',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_config_api_list_risk_config" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListRiskConfigResponse",
            '400': "RiskConfigAPIListRiskConfig400Response",
            '401': "RiskConfigAPIListRiskConfig400Response",
            '403': "RiskConfigAPIListRiskConfig400Response",
            '404': "RiskConfigAPIListRiskConfig400Response",
        }

        return self.api_client.call_api(
            '/config', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_config_api_list_risk_config_revisions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], risk_config_id : Annotated[StrictStr, Field(..., description="id for which revision to be pulled (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is https://google.aip.dev/162#listing-revisions for listing revisions --).")], page_token : Annotated[Optional[StrictStr], Field(description="The offset value used to set the starting point into the result set found at the repository.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response.")] = None, **kwargs) -> V1ListRiskConfigRevisionsResponse:  # noqa: E501
        """Retrieve revision history  # noqa: E501

        Retrieve revision history for a given configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_list_risk_config_revisions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, risk_config_id, page_token, page_size, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param risk_config_id: id for which revision to be pulled (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is https://google.aip.dev/162#listing-revisions for listing revisions --). (required)
        :type risk_config_id: str
        :param page_token: The offset value used to set the starting point into the result set found at the repository.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListRiskConfigRevisionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_config_api_list_risk_config_revisions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_config_api_list_risk_config_revisions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, risk_config_id, page_token, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_config_api_list_risk_config_revisions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], risk_config_id : Annotated[StrictStr, Field(..., description="id for which revision to be pulled (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is https://google.aip.dev/162#listing-revisions for listing revisions --).")], page_token : Annotated[Optional[StrictStr], Field(description="The offset value used to set the starting point into the result set found at the repository.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve revision history  # noqa: E501

        Retrieve revision history for a given configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_list_risk_config_revisions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, risk_config_id, page_token, page_size, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param risk_config_id: id for which revision to be pulled (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is https://google.aip.dev/162#listing-revisions for listing revisions --). (required)
        :type risk_config_id: str
        :param page_token: The offset value used to set the starting point into the result set found at the repository.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListRiskConfigRevisionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'risk_config_id',
            'page_token',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_config_api_list_risk_config_revisions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('risk_config_id') is not None:  # noqa: E501
            _query_params.append(('riskConfigId', _params['risk_config_id']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListRiskConfigRevisionsResponse",
            '400': "RiskConfigAPIListRiskConfig400Response",
            '401': "RiskConfigAPIListRiskConfig400Response",
            '403': "RiskConfigAPIListRiskConfig400Response",
            '404': "RiskConfigAPIListRiskConfig400Response",
        }

        return self.api_client.call_api(
            '/config:listRevisions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_config_api_resolve_risk_config(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], filter : Annotated[Optional[StrictStr], Field(description="Used to provide with https://google.aip.dev/160 filtering capabilities.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ResolveRiskConfig` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `ResolveRiskConfig` must match the call that provided the page token.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response. The service may return fewer than this value. The maximum value is 1000. If unspecified, at most 1000 entries will be returned.")] = None, **kwargs) -> V1ResolveRiskConfigResponse:  # noqa: E501
        """List resolved configurations  # noqa: E501

        Retrieve a resolved list of configurations matching the specified filter criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_resolve_risk_config(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param filter: Used to provide with https://google.aip.dev/160 filtering capabilities.
        :type filter: str
        :param page_token: A page token, received from a previous `ResolveRiskConfig` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `ResolveRiskConfig` must match the call that provided the page token.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response. The service may return fewer than this value. The maximum value is 1000. If unspecified, at most 1000 entries will be returned.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ResolveRiskConfigResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_config_api_resolve_risk_config_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_config_api_resolve_risk_config_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_config_api_resolve_risk_config_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], filter : Annotated[Optional[StrictStr], Field(description="Used to provide with https://google.aip.dev/160 filtering capabilities.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ResolveRiskConfig` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `ResolveRiskConfig` must match the call that provided the page token.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response. The service may return fewer than this value. The maximum value is 1000. If unspecified, at most 1000 entries will be returned.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List resolved configurations  # noqa: E501

        Retrieve a resolved list of configurations matching the specified filter criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_resolve_risk_config_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param filter: Used to provide with https://google.aip.dev/160 filtering capabilities.
        :type filter: str
        :param page_token: A page token, received from a previous `ResolveRiskConfig` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `ResolveRiskConfig` must match the call that provided the page token.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response. The service may return fewer than this value. The maximum value is 1000. If unspecified, at most 1000 entries will be returned.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ResolveRiskConfigResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'filter',
            'page_token',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_config_api_resolve_risk_config" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ResolveRiskConfigResponse",
            '400': "RiskConfigAPIListRiskConfig400Response",
            '401': "RiskConfigAPIListRiskConfig400Response",
            '403': "RiskConfigAPIListRiskConfig400Response",
            '404': "RiskConfigAPIListRiskConfig400Response",
        }

        return self.api_client.call_api(
            '/config:resolve', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_config_api_retrieve_risk_config_by_id(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveRiskConfigByIdRequest, **kwargs) -> V1RetrieveRiskConfigByIdResponse:  # noqa: E501
        """Bulk retrieve configuration records  # noqa: E501

        Retrieve a large number of configuration records in bulk by specifically filtering on the configuration's natural unique identifiers. This operation is designed to complement the more flexible filtering capabilities supported by the List operation  (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: We need to do this because it is an existing api changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_retrieve_risk_config_by_id(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveRiskConfigByIdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1RetrieveRiskConfigByIdResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_config_api_retrieve_risk_config_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_config_api_retrieve_risk_config_by_id_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_config_api_retrieve_risk_config_by_id_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveRiskConfigByIdRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk retrieve configuration records  # noqa: E501

        Retrieve a large number of configuration records in bulk by specifically filtering on the configuration's natural unique identifiers. This operation is designed to complement the more flexible filtering capabilities supported by the List operation  (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: We need to do this because it is an existing api changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_config_api_retrieve_risk_config_by_id_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveRiskConfigByIdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1RetrieveRiskConfigByIdResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_config_api_retrieve_risk_config_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1RetrieveRiskConfigByIdResponse",
            '400': "RiskConfigAPIListRiskConfig400Response",
            '401': "RiskConfigAPIListRiskConfig400Response",
            '403': "RiskConfigAPIListRiskConfig400Response",
            '404': "RiskConfigAPIListRiskConfig400Response",
        }

        return self.api_client.call_api(
            '/config:retrieveRiskConfigById', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
