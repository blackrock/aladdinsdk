# coding: utf-8

"""
    Risk Governance - Configuration

    Retrieve, update, and create configurations which drive Risk Governance behaviours and Risk Radar UI choices.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictInt
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_display_value_record import V1DisplayValueRecord

class V1ResolvedReferenceConfigRecord(BaseModel):
    """
    V1ResolvedReferenceConfigRecord
    """
    display_value_record: Optional[V1DisplayValueRecord] = Field(None, alias="displayValueRecord")
    display_order: Optional[StrictInt] = Field(None, alias="displayOrder")
    resolved_config_nodes: Optional[Dict[str, V1ResolvedReferenceConfigRecord]] = Field(None, alias="resolvedConfigNodes")
    __properties = ["displayValueRecord", "displayOrder", "resolvedConfigNodes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ResolvedReferenceConfigRecord:
        """Create an instance of V1ResolvedReferenceConfigRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of display_value_record
        if self.display_value_record:
            _dict['displayValueRecord'] = self.display_value_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in resolved_config_nodes (dict)
        _field_dict = {}
        if self.resolved_config_nodes:
            for _key in self.resolved_config_nodes:
                if self.resolved_config_nodes[_key]:
                    _field_dict[_key] = self.resolved_config_nodes[_key].to_dict()
            _dict['resolvedConfigNodes'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ResolvedReferenceConfigRecord:
        """Create an instance of V1ResolvedReferenceConfigRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ResolvedReferenceConfigRecord.parse_obj(obj)

        _obj = V1ResolvedReferenceConfigRecord.parse_obj({
            "display_value_record": V1DisplayValueRecord.from_dict(obj.get("displayValueRecord")) if obj.get("displayValueRecord") is not None else None,
            "display_order": obj.get("displayOrder"),
            "resolved_config_nodes": dict(
                (_k, V1ResolvedReferenceConfigRecord.from_dict(_v))
                for _k, _v in obj.get("resolvedConfigNodes").items()
            )
            if obj.get("resolvedConfigNodes") is not None
            else None
        })
        return _obj

