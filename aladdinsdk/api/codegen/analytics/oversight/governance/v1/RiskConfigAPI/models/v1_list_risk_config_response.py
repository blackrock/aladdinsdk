# coding: utf-8

"""
    Risk Governance - Configuration

    Retrieve, update, and create configurations which drive Risk Governance behaviours and Risk Radar UI choices.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_risk_config import V1RiskConfig
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_risk_navigation_links import V1RiskNavigationLinks

class V1ListRiskConfigResponse(BaseModel):
    """
    V1ListRiskConfigResponse
    """
    navigation: Optional[V1RiskNavigationLinks] = None
    risk_configs: Optional[conlist(V1RiskConfig)] = Field(None, alias="riskConfigs")
    count: Optional[StrictInt] = None
    total: Optional[StrictInt] = None
    next_page_token: Optional[StrictStr] = Field(None, alias="nextPageToken", description="A token that can be sent as `pageToken` to retrieve the next page. If this field is omitted, there are no subsequent pages.")
    total_size: Optional[StrictInt] = Field(None, alias="totalSize")
    __properties = ["navigation", "riskConfigs", "count", "total", "nextPageToken", "totalSize"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ListRiskConfigResponse:
        """Create an instance of V1ListRiskConfigResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of navigation
        if self.navigation:
            _dict['navigation'] = self.navigation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in risk_configs (list)
        _items = []
        if self.risk_configs:
            for _item in self.risk_configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['riskConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ListRiskConfigResponse:
        """Create an instance of V1ListRiskConfigResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ListRiskConfigResponse.parse_obj(obj)

        _obj = V1ListRiskConfigResponse.parse_obj({
            "navigation": V1RiskNavigationLinks.from_dict(obj.get("navigation")) if obj.get("navigation") is not None else None,
            "risk_configs": [V1RiskConfig.from_dict(_item) for _item in obj.get("riskConfigs")] if obj.get("riskConfigs") is not None else None,
            "count": obj.get("count"),
            "total": obj.get("total"),
            "next_page_token": obj.get("nextPageToken"),
            "total_size": obj.get("totalSize")
        })
        return _obj

