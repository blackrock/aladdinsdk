# coding: utf-8

"""
    Risk Governance - Configuration

    Retrieve, update, and create configurations which drive Risk Governance behaviours and Risk Radar UI choices.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskConfigAPI.models.v1_metric_value_type import V1MetricValueType

class V1CustomEvaluationMetricConfig(BaseModel):
    """
    V1CustomEvaluationMetricConfig
    """
    metric: StrictStr = Field(...)
    display_name: StrictStr = Field(..., alias="displayName")
    summary: StrictStr = Field(...)
    active: StrictBool = Field(...)
    display_format: Optional[StrictStr] = Field(None, alias="displayFormat")
    metric_category: StrictStr = Field(..., alias="metricCategory")
    metric_hierarchy_levels: Optional[conlist(StrictStr)] = Field(None, alias="metricHierarchyLevels")
    metric_value_type: Optional[V1MetricValueType] = Field(None, alias="metricValueType")
    __properties = ["metric", "displayName", "summary", "active", "displayFormat", "metricCategory", "metricHierarchyLevels", "metricValueType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CustomEvaluationMetricConfig:
        """Create an instance of V1CustomEvaluationMetricConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CustomEvaluationMetricConfig:
        """Create an instance of V1CustomEvaluationMetricConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CustomEvaluationMetricConfig.parse_obj(obj)

        _obj = V1CustomEvaluationMetricConfig.parse_obj({
            "metric": obj.get("metric"),
            "display_name": obj.get("displayName"),
            "summary": obj.get("summary"),
            "active": obj.get("active"),
            "display_format": obj.get("displayFormat"),
            "metric_category": obj.get("metricCategory"),
            "metric_hierarchy_levels": obj.get("metricHierarchyLevels"),
            "metric_value_type": obj.get("metricValueType")
        })
        return _obj

