# coding: utf-8

"""
    Risk Governance - Workflows

    Retrieve, update, and transition Workflow items as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_by_exception_request import V1ByExceptionRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_by_workflow_request import V1ByWorkflowRequest

class V1BatchListRiskWorkflowsRevisionsRequest(BaseModel):
    """
    V1BatchListRiskWorkflowsRevisionsRequest
    """
    exception_request: Optional[V1ByExceptionRequest] = Field(None, alias="exceptionRequest")
    workflow_request: Optional[V1ByWorkflowRequest] = Field(None, alias="workflowRequest")
    __properties = ["exceptionRequest", "workflowRequest"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BatchListRiskWorkflowsRevisionsRequest:
        """Create an instance of V1BatchListRiskWorkflowsRevisionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of exception_request
        if self.exception_request:
            _dict['exceptionRequest'] = self.exception_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow_request
        if self.workflow_request:
            _dict['workflowRequest'] = self.workflow_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BatchListRiskWorkflowsRevisionsRequest:
        """Create an instance of V1BatchListRiskWorkflowsRevisionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BatchListRiskWorkflowsRevisionsRequest.parse_obj(obj)

        _obj = V1BatchListRiskWorkflowsRevisionsRequest.parse_obj({
            "exception_request": V1ByExceptionRequest.from_dict(obj.get("exceptionRequest")) if obj.get("exceptionRequest") is not None else None,
            "workflow_request": V1ByWorkflowRequest.from_dict(obj.get("workflowRequest")) if obj.get("workflowRequest") is not None else None
        })
        return _obj

