# coding: utf-8

"""
    Risk Governance - Workflows

    Retrieve, update, and transition Workflow items as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Optional

from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_batch_create_risk_workflows_request import V1BatchCreateRiskWorkflowsRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_batch_list_risk_workflows_revisions_request import V1BatchListRiskWorkflowsRevisionsRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_batch_update_risk_workflows_request import V1BatchUpdateRiskWorkflowsRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_batch_update_risk_workflows_response import V1BatchUpdateRiskWorkflowsResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_execute_risk_workflow_request import V1ExecuteRiskWorkflowRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_execute_risk_workflow_response import V1ExecuteRiskWorkflowResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_list_risk_workflow_revisions_response import V1ListRiskWorkflowRevisionsResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_list_risk_workflows_response import V1ListRiskWorkflowsResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_longrunning_operation import V1LongrunningOperation
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_retrieve_risk_workflows_by_id_request import V1RetrieveRiskWorkflowsByIdRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.models.v1_retrieve_risk_workflows_by_id_response import V1RetrieveRiskWorkflowsByIdResponse

from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.api_client import ApiClient
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskWorkflowAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultRiskWorkflowAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def risk_workflow_api_batch_create_risk_workflows(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateRiskWorkflowsRequest, **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Bulk create workflows  # noqa: E501

        Create workflows in bulk. For internal use only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_batch_create_risk_workflows(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateRiskWorkflowsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_workflow_api_batch_create_risk_workflows_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_workflow_api_batch_create_risk_workflows_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_workflow_api_batch_create_risk_workflows_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateRiskWorkflowsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk create workflows  # noqa: E501

        Create workflows in bulk. For internal use only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_batch_create_risk_workflows_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateRiskWorkflowsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_workflow_api_batch_create_risk_workflows" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "RiskWorkflowAPIListRiskWorkflows400Response",
            '401': "RiskWorkflowAPIListRiskWorkflows400Response",
            '403': "RiskWorkflowAPIListRiskWorkflows400Response",
            '404': "RiskWorkflowAPIListRiskWorkflows400Response",
        }

        return self.api_client.call_api(
            '/workflows:batchCreate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_workflow_api_batch_list_risk_workflows_revisions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchListRiskWorkflowsRevisionsRequest, **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Bulk Retrieve Workflow activity history  # noqa: E501

        Retrieve the history of all activities performed against workflow items or all workflows associated with a given set of exceptions over the last 12 months (--api-linter: aladdin::9050::rpc-name=disabled aip.dev/not-precedent: We need to do this because we need a batch end point to pull history/revisions for multiple workflows in one go. This helps citizen developers to pull history in one request instead of looping through end point for the single workflow id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_batch_list_risk_workflows_revisions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchListRiskWorkflowsRevisionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_workflow_api_batch_list_risk_workflows_revisions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_workflow_api_batch_list_risk_workflows_revisions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_workflow_api_batch_list_risk_workflows_revisions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchListRiskWorkflowsRevisionsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk Retrieve Workflow activity history  # noqa: E501

        Retrieve the history of all activities performed against workflow items or all workflows associated with a given set of exceptions over the last 12 months (--api-linter: aladdin::9050::rpc-name=disabled aip.dev/not-precedent: We need to do this because we need a batch end point to pull history/revisions for multiple workflows in one go. This helps citizen developers to pull history in one request instead of looping through end point for the single workflow id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_batch_list_risk_workflows_revisions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchListRiskWorkflowsRevisionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_workflow_api_batch_list_risk_workflows_revisions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "RiskWorkflowAPIListRiskWorkflows400Response",
            '401': "RiskWorkflowAPIListRiskWorkflows400Response",
            '403': "RiskWorkflowAPIListRiskWorkflows400Response",
            '404': "RiskWorkflowAPIListRiskWorkflows400Response",
        }

        return self.api_client.call_api(
            '/workflows/revisions:batchList', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_workflow_api_batch_update_risk_workflows(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateRiskWorkflowsRequest, **kwargs) -> V1BatchUpdateRiskWorkflowsResponse:  # noqa: E501
        """Update workflow attributes  # noqa: E501

        Update selected workflow attributes for a list of workflow items excluding state transitions. Example use cases include updating the assignee or adding a comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_batch_update_risk_workflows(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateRiskWorkflowsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchUpdateRiskWorkflowsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_workflow_api_batch_update_risk_workflows_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_workflow_api_batch_update_risk_workflows_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_workflow_api_batch_update_risk_workflows_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateRiskWorkflowsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Update workflow attributes  # noqa: E501

        Update selected workflow attributes for a list of workflow items excluding state transitions. Example use cases include updating the assignee or adding a comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_batch_update_risk_workflows_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateRiskWorkflowsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchUpdateRiskWorkflowsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_workflow_api_batch_update_risk_workflows" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchUpdateRiskWorkflowsResponse",
            '400': "RiskWorkflowAPIListRiskWorkflows400Response",
            '401': "RiskWorkflowAPIListRiskWorkflows400Response",
            '403': "RiskWorkflowAPIListRiskWorkflows400Response",
            '404': "RiskWorkflowAPIListRiskWorkflows400Response",
        }

        return self.api_client.call_api(
            '/workflows:batchUpdate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_workflow_api_execute_risk_workflow(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ExecuteRiskWorkflowRequest, **kwargs) -> V1ExecuteRiskWorkflowResponse:  # noqa: E501
        """Transition Workflow items  # noqa: E501

        Transition a list of Workflow items from their respective state to a subsequent valid state (-- api-linter: aladdin::9002::wordslist-custom-method-rpc=disabled aip.dev/not-precedent: We need to do this because execute is aligned to the operation taking place. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled aip.dev/not-precedent: We need to do this because it is an existing api changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_execute_risk_workflow(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ExecuteRiskWorkflowRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ExecuteRiskWorkflowResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_workflow_api_execute_risk_workflow_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_workflow_api_execute_risk_workflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_workflow_api_execute_risk_workflow_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ExecuteRiskWorkflowRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Transition Workflow items  # noqa: E501

        Transition a list of Workflow items from their respective state to a subsequent valid state (-- api-linter: aladdin::9002::wordslist-custom-method-rpc=disabled aip.dev/not-precedent: We need to do this because execute is aligned to the operation taking place. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled aip.dev/not-precedent: We need to do this because it is an existing api changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_execute_risk_workflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ExecuteRiskWorkflowRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ExecuteRiskWorkflowResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_workflow_api_execute_risk_workflow" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ExecuteRiskWorkflowResponse",
            '400': "RiskWorkflowAPIListRiskWorkflows400Response",
            '401': "RiskWorkflowAPIListRiskWorkflows400Response",
            '403': "RiskWorkflowAPIListRiskWorkflows400Response",
            '404': "RiskWorkflowAPIListRiskWorkflows400Response",
        }

        return self.api_client.call_api(
            '/workflows:executeRiskWorkflow', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_workflow_api_get_longrunning_operation(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the LongrunningOperation")], **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Get latest state of a long-running operation  # noqa: E501

        Get the latest state of a long-running operation for workflow bulk request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_get_longrunning_operation(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the LongrunningOperation (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_workflow_api_get_longrunning_operation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_workflow_api_get_longrunning_operation_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_workflow_api_get_longrunning_operation_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the LongrunningOperation")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get latest state of a long-running operation  # noqa: E501

        Get the latest state of a long-running operation for workflow bulk request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_get_longrunning_operation_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the LongrunningOperation (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_workflow_api_get_longrunning_operation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "RiskWorkflowAPIListRiskWorkflows400Response",
            '401': "RiskWorkflowAPIListRiskWorkflows400Response",
            '403': "RiskWorkflowAPIListRiskWorkflows400Response",
            '404': "RiskWorkflowAPIListRiskWorkflows400Response",
        }

        return self.api_client.call_api(
            '/workflows/longrunningoperations/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_workflow_api_list_risk_workflow_revisions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[Optional[StrictStr], Field(description="id of a workflow item (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because for audit history we will need workflow id --).")] = None, page_size : Annotated[Optional[StrictInt], Field(description="page size for the response.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="In the paginated response it refers to start of response.")] = None, **kwargs) -> V1ListRiskWorkflowRevisionsResponse:  # noqa: E501
        """Retrieve Workflow activity history  # noqa: E501

        Retrieve the history of all activities performed against a single workflow item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_list_risk_workflow_revisions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: id of a workflow item (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because for audit history we will need workflow id --).
        :type id: str
        :param page_size: page size for the response.
        :type page_size: int
        :param page_token: In the paginated response it refers to start of response.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListRiskWorkflowRevisionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_workflow_api_list_risk_workflow_revisions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_workflow_api_list_risk_workflow_revisions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_workflow_api_list_risk_workflow_revisions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[Optional[StrictStr], Field(description="id of a workflow item (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because for audit history we will need workflow id --).")] = None, page_size : Annotated[Optional[StrictInt], Field(description="page size for the response.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="In the paginated response it refers to start of response.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Workflow activity history  # noqa: E501

        Retrieve the history of all activities performed against a single workflow item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_list_risk_workflow_revisions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: id of a workflow item (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because for audit history we will need workflow id --).
        :type id: str
        :param page_size: page size for the response.
        :type page_size: int
        :param page_token: In the paginated response it refers to start of response.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListRiskWorkflowRevisionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_workflow_api_list_risk_workflow_revisions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListRiskWorkflowRevisionsResponse",
            '400': "RiskWorkflowAPIListRiskWorkflows400Response",
            '401': "RiskWorkflowAPIListRiskWorkflows400Response",
            '403': "RiskWorkflowAPIListRiskWorkflows400Response",
            '404': "RiskWorkflowAPIListRiskWorkflows400Response",
        }

        return self.api_client.call_api(
            '/workflows:listRevisions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_workflow_api_list_risk_workflows(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], workflow_states : Annotated[Optional[conlist(StrictStr)], Field(description="A list of workflow states used to filter returned workflow items. If parameter value is not provided, only workflow items with non-terminal states will be returned. If terminal states are provided and the begin range time is not provided, the workflow  items returned for these states will be restricted to a lookback period of 45 days. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).")] = None, workflow_ids : Annotated[Optional[conlist(StrictStr)], Field(description="A list of workflow ids to be searched for (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).")] = None, assignee : Annotated[Optional[StrictStr], Field(description="The users whom a workflow item (task) is assigned to (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).")] = None, begin_range_time : Annotated[Optional[datetime], Field(description="The start date and time from which to apply the provided search parameters (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because we have time series and this will provide a way to filter out based on time --).")] = None, end_range_time : Annotated[Optional[datetime], Field(description="The end date and time to which to apply the provided search parameters (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because we have time series and this will provide a way to filter out based on time --).")] = None, filter : Annotated[Optional[StrictStr], Field(description="Used to provide filtering capabilities on workflow results (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: We need to do this because it is generic field to support filtering capabilities under aip https://google.aip.dev/160 --).")] = None, **kwargs) -> V1ListRiskWorkflowsResponse:  # noqa: E501
        """Retrieve workflow items  # noqa: E501

        Retrieve a list of Workflow items matching the search parameters provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_list_risk_workflows(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, workflow_states, workflow_ids, assignee, begin_range_time, end_range_time, filter, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param workflow_states: A list of workflow states used to filter returned workflow items. If parameter value is not provided, only workflow items with non-terminal states will be returned. If terminal states are provided and the begin range time is not provided, the workflow  items returned for these states will be restricted to a lookback period of 45 days. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).
        :type workflow_states: List[str]
        :param workflow_ids: A list of workflow ids to be searched for (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).
        :type workflow_ids: List[str]
        :param assignee: The users whom a workflow item (task) is assigned to (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).
        :type assignee: str
        :param begin_range_time: The start date and time from which to apply the provided search parameters (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because we have time series and this will provide a way to filter out based on time --).
        :type begin_range_time: datetime
        :param end_range_time: The end date and time to which to apply the provided search parameters (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because we have time series and this will provide a way to filter out based on time --).
        :type end_range_time: datetime
        :param filter: Used to provide filtering capabilities on workflow results (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: We need to do this because it is generic field to support filtering capabilities under aip https://google.aip.dev/160 --).
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListRiskWorkflowsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_workflow_api_list_risk_workflows_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_workflow_api_list_risk_workflows_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, workflow_states, workflow_ids, assignee, begin_range_time, end_range_time, filter, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_workflow_api_list_risk_workflows_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], workflow_states : Annotated[Optional[conlist(StrictStr)], Field(description="A list of workflow states used to filter returned workflow items. If parameter value is not provided, only workflow items with non-terminal states will be returned. If terminal states are provided and the begin range time is not provided, the workflow  items returned for these states will be restricted to a lookback period of 45 days. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).")] = None, workflow_ids : Annotated[Optional[conlist(StrictStr)], Field(description="A list of workflow ids to be searched for (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).")] = None, assignee : Annotated[Optional[StrictStr], Field(description="The users whom a workflow item (task) is assigned to (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).")] = None, begin_range_time : Annotated[Optional[datetime], Field(description="The start date and time from which to apply the provided search parameters (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because we have time series and this will provide a way to filter out based on time --).")] = None, end_range_time : Annotated[Optional[datetime], Field(description="The end date and time to which to apply the provided search parameters (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because we have time series and this will provide a way to filter out based on time --).")] = None, filter : Annotated[Optional[StrictStr], Field(description="Used to provide filtering capabilities on workflow results (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: We need to do this because it is generic field to support filtering capabilities under aip https://google.aip.dev/160 --).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve workflow items  # noqa: E501

        Retrieve a list of Workflow items matching the search parameters provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_list_risk_workflows_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, workflow_states, workflow_ids, assignee, begin_range_time, end_range_time, filter, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param workflow_states: A list of workflow states used to filter returned workflow items. If parameter value is not provided, only workflow items with non-terminal states will be returned. If terminal states are provided and the begin range time is not provided, the workflow  items returned for these states will be restricted to a lookback period of 45 days. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).
        :type workflow_states: List[str]
        :param workflow_ids: A list of workflow ids to be searched for (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).
        :type workflow_ids: List[str]
        :param assignee: The users whom a workflow item (task) is assigned to (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this is existing field and we are deprecating these to remove in future --).
        :type assignee: str
        :param begin_range_time: The start date and time from which to apply the provided search parameters (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because we have time series and this will provide a way to filter out based on time --).
        :type begin_range_time: datetime
        :param end_range_time: The end date and time to which to apply the provided search parameters (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because we have time series and this will provide a way to filter out based on time --).
        :type end_range_time: datetime
        :param filter: Used to provide filtering capabilities on workflow results (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: We need to do this because it is generic field to support filtering capabilities under aip https://google.aip.dev/160 --).
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListRiskWorkflowsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'workflow_states',
            'workflow_ids',
            'assignee',
            'begin_range_time',
            'end_range_time',
            'filter'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_workflow_api_list_risk_workflows" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('workflow_states') is not None:  # noqa: E501
            _query_params.append(('workflowStates', _params['workflow_states']))
            _collection_formats['workflowStates'] = 'multi'

        if _params.get('workflow_ids') is not None:  # noqa: E501
            _query_params.append(('workflowIds', _params['workflow_ids']))
            _collection_formats['workflowIds'] = 'multi'

        if _params.get('assignee') is not None:  # noqa: E501
            _query_params.append(('assignee', _params['assignee']))

        if _params.get('begin_range_time') is not None:  # noqa: E501
            if isinstance(_params['begin_range_time'], datetime):
                _query_params.append(('beginRangeTime', _params['begin_range_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('beginRangeTime', _params['begin_range_time']))

        if _params.get('end_range_time') is not None:  # noqa: E501
            if isinstance(_params['end_range_time'], datetime):
                _query_params.append(('endRangeTime', _params['end_range_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('endRangeTime', _params['end_range_time']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListRiskWorkflowsResponse",
            '400': "RiskWorkflowAPIListRiskWorkflows400Response",
            '401': "RiskWorkflowAPIListRiskWorkflows400Response",
            '403': "RiskWorkflowAPIListRiskWorkflows400Response",
            '404': "RiskWorkflowAPIListRiskWorkflows400Response",
        }

        return self.api_client.call_api(
            '/workflows', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_workflow_api_retrieve_risk_workflows_by_id(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveRiskWorkflowsByIdRequest, **kwargs) -> V1RetrieveRiskWorkflowsByIdResponse:  # noqa: E501
        """Bulk retrieve Workflow items by Id  # noqa: E501

        Retrieve a large number of Workflow items. This operation is optimised to retrieve Workflow items in bulk using the natural unique identifier. (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: We need to do this because it is an existing api changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_retrieve_risk_workflows_by_id(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveRiskWorkflowsByIdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1RetrieveRiskWorkflowsByIdResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_workflow_api_retrieve_risk_workflows_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_workflow_api_retrieve_risk_workflows_by_id_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_workflow_api_retrieve_risk_workflows_by_id_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveRiskWorkflowsByIdRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk retrieve Workflow items by Id  # noqa: E501

        Retrieve a large number of Workflow items. This operation is optimised to retrieve Workflow items in bulk using the natural unique identifier. (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: We need to do this because it is an existing api changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_workflow_api_retrieve_risk_workflows_by_id_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveRiskWorkflowsByIdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1RetrieveRiskWorkflowsByIdResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_workflow_api_retrieve_risk_workflows_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1RetrieveRiskWorkflowsByIdResponse",
            '400': "RiskWorkflowAPIListRiskWorkflows400Response",
            '401': "RiskWorkflowAPIListRiskWorkflows400Response",
            '403': "RiskWorkflowAPIListRiskWorkflows400Response",
            '404': "RiskWorkflowAPIListRiskWorkflows400Response",
        }

        return self.api_client.call_api(
            '/workflows:retrieveRiskWorkflowsById', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
