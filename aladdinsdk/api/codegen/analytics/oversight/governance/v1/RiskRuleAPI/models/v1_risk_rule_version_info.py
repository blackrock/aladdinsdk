# coding: utf-8

"""
    Risk Governance - Rules

    Retrieve, update, and create Rules and Rule Subscriptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskRuleAPI.models.v1_risk_rule_state import V1RiskRuleState

class V1RiskRuleVersionInfo(BaseModel):
    """
    V1RiskRuleVersionInfo
    """
    rule_id: StrictStr = Field(..., alias="ruleId")
    name: Optional[StrictStr] = None
    risk_rule_state: Optional[V1RiskRuleState] = Field(None, alias="riskRuleState")
    version: Optional[StrictStr] = None
    effective_date: Optional[date] = Field(None, alias="effectiveDate")
    final_sign_off_author: Optional[StrictStr] = Field(None, alias="finalSignOffAuthor")
    final_sign_off_time: Optional[datetime] = Field(None, alias="finalSignOffTime")
    modifier: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    version_time: Optional[datetime] = Field(None, alias="versionTime")
    __properties = ["ruleId", "name", "riskRuleState", "version", "effectiveDate", "finalSignOffAuthor", "finalSignOffTime", "modifier", "modifyTime", "versionTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RiskRuleVersionInfo:
        """Create an instance of V1RiskRuleVersionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "version_time",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RiskRuleVersionInfo:
        """Create an instance of V1RiskRuleVersionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RiskRuleVersionInfo.parse_obj(obj)

        _obj = V1RiskRuleVersionInfo.parse_obj({
            "rule_id": obj.get("ruleId"),
            "name": obj.get("name"),
            "risk_rule_state": obj.get("riskRuleState"),
            "version": obj.get("version"),
            "effective_date": obj.get("effectiveDate"),
            "final_sign_off_author": obj.get("finalSignOffAuthor"),
            "final_sign_off_time": obj.get("finalSignOffTime"),
            "modifier": obj.get("modifier"),
            "modify_time": obj.get("modifyTime"),
            "version_time": obj.get("versionTime")
        })
        return _obj

