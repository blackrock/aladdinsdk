# coding: utf-8

"""
    Risk Governance - Rules

    Retrieve, update, and create Rules and Rule Subscriptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskRuleAPI.models.v1_risk_rule_subscription_state import V1RiskRuleSubscriptionState

class V1RiskRuleSubscription(BaseModel):
    """
    V1RiskRuleSubscription
    """
    id: Optional[StrictStr] = None
    portfolio_id: StrictStr = Field(..., alias="portfolioId")
    rule_id: StrictStr = Field(..., alias="ruleId")
    start_date: Optional[date] = Field(None, alias="startDate")
    end_date: Optional[date] = Field(None, alias="endDate")
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    modifier: Optional[StrictStr] = None
    rule_override_id: Optional[StrictStr] = Field(None, alias="ruleOverrideId")
    rule_subscription_state: Optional[V1RiskRuleSubscriptionState] = Field(None, alias="ruleSubscriptionState")
    __properties = ["id", "portfolioId", "ruleId", "startDate", "endDate", "modifyTime", "modifier", "ruleOverrideId", "ruleSubscriptionState"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RiskRuleSubscription:
        """Create an instance of V1RiskRuleSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RiskRuleSubscription:
        """Create an instance of V1RiskRuleSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RiskRuleSubscription.parse_obj(obj)

        _obj = V1RiskRuleSubscription.parse_obj({
            "id": obj.get("id"),
            "portfolio_id": obj.get("portfolioId"),
            "rule_id": obj.get("ruleId"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "modify_time": obj.get("modifyTime"),
            "modifier": obj.get("modifier"),
            "rule_override_id": obj.get("ruleOverrideId"),
            "rule_subscription_state": obj.get("ruleSubscriptionState")
        })
        return _obj

