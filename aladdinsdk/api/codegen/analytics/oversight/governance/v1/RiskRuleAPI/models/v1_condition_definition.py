# coding: utf-8

"""
    Risk Governance - Rules

    Retrieve, update, and create Rules and Rule Subscriptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskRuleAPI.models.v1_condition_detail import V1ConditionDetail
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskRuleAPI.models.v1_limit_definition import V1LimitDefinition

class V1ConditionDefinition(BaseModel):
    """
    V1ConditionDefinition
    """
    id: Optional[StrictStr] = None
    condition_detail: Optional[V1ConditionDetail] = Field(None, alias="conditionDetail")
    limit_definition: Optional[V1LimitDefinition] = Field(None, alias="limitDefinition")
    metric_definition: Optional[StrictStr] = Field(None, alias="metricDefinition")
    __properties = ["id", "conditionDetail", "limitDefinition", "metricDefinition"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ConditionDefinition:
        """Create an instance of V1ConditionDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of condition_detail
        if self.condition_detail:
            _dict['conditionDetail'] = self.condition_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limit_definition
        if self.limit_definition:
            _dict['limitDefinition'] = self.limit_definition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ConditionDefinition:
        """Create an instance of V1ConditionDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ConditionDefinition.parse_obj(obj)

        _obj = V1ConditionDefinition.parse_obj({
            "id": obj.get("id"),
            "condition_detail": V1ConditionDetail.from_dict(obj.get("conditionDetail")) if obj.get("conditionDetail") is not None else None,
            "limit_definition": V1LimitDefinition.from_dict(obj.get("limitDefinition")) if obj.get("limitDefinition") is not None else None,
            "metric_definition": obj.get("metricDefinition")
        })
        return _obj

