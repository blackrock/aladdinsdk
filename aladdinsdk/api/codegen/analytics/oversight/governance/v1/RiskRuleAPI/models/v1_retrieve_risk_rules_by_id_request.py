# coding: utf-8

"""
    Risk Governance - Rules

    Retrieve, update, and create Rules and Rule Subscriptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskRuleAPI.models.v1_risk_rule_state import V1RiskRuleState

class V1RetrieveRiskRulesByIdRequest(BaseModel):
    """
    The request message for RiskRuleAPI.RetrieveRiskRules.
    """
    rule_ids: conlist(StrictStr) = Field(..., alias="ruleIds")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="Retrieve the version of the Rule effective on the given date. Defaults to current date if unspecified.")
    rule_states: Optional[conlist(V1RiskRuleState)] = Field(None, alias="ruleStates")
    __properties = ["ruleIds", "effectiveDate", "ruleStates"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RetrieveRiskRulesByIdRequest:
        """Create an instance of V1RetrieveRiskRulesByIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RetrieveRiskRulesByIdRequest:
        """Create an instance of V1RetrieveRiskRulesByIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RetrieveRiskRulesByIdRequest.parse_obj(obj)

        _obj = V1RetrieveRiskRulesByIdRequest.parse_obj({
            "rule_ids": obj.get("ruleIds"),
            "effective_date": obj.get("effectiveDate"),
            "rule_states": obj.get("ruleStates")
        })
        return _obj

