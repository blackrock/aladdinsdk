# coding: utf-8

"""
    Risk Governance - Custom Evaluation Metric

    Upload or Retreive Custom Evaluation Metric to be used for Rule evaluation in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskCustomEvaluationMetricAPI.models.v1_metric_value import V1MetricValue

class V1RiskCustomEvaluationMetric(BaseModel):
    """
    (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because all analytics oversight gevernance apis are following this standard only --) (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this is inline with risk exception api --) Representation of Risk custom evaluation metric, its available fields  to store more specific details.
    """
    id: Optional[StrictStr] = None
    valid_begin_date: Optional[date] = Field(None, alias="validBeginDate", description="The date on which the custom evaluation metric record is valid.")
    valid_end_date: Optional[date] = Field(None, alias="validEndDate")
    entry_time: Optional[datetime] = Field(None, alias="entryTime")
    expiry_time: Optional[datetime] = Field(None, alias="expiryTime")
    modifier: Optional[StrictStr] = None
    scope_id: StrictStr = Field(..., alias="scopeId")
    scope_type: StrictStr = Field(..., alias="scopeType")
    scope: Optional[StrictStr] = None
    entity_id: StrictStr = Field(..., alias="entityId")
    entity_type: StrictStr = Field(..., alias="entityType")
    entity: Optional[StrictStr] = None
    metric_category: Optional[StrictStr] = Field(None, alias="metricCategory")
    metric: StrictStr = Field(...)
    risk_metric_value: Optional[V1MetricValue] = Field(None, alias="riskMetricValue")
    __properties = ["id", "validBeginDate", "validEndDate", "entryTime", "expiryTime", "modifier", "scopeId", "scopeType", "scope", "entityId", "entityType", "entity", "metricCategory", "metric", "riskMetricValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RiskCustomEvaluationMetric:
        """Create an instance of V1RiskCustomEvaluationMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "valid_begin_date",
                            "valid_end_date",
                            "entry_time",
                            "expiry_time",
                            "metric_category",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of risk_metric_value
        if self.risk_metric_value:
            _dict['riskMetricValue'] = self.risk_metric_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RiskCustomEvaluationMetric:
        """Create an instance of V1RiskCustomEvaluationMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RiskCustomEvaluationMetric.parse_obj(obj)

        _obj = V1RiskCustomEvaluationMetric.parse_obj({
            "id": obj.get("id"),
            "valid_begin_date": obj.get("validBeginDate"),
            "valid_end_date": obj.get("validEndDate"),
            "entry_time": obj.get("entryTime"),
            "expiry_time": obj.get("expiryTime"),
            "modifier": obj.get("modifier"),
            "scope_id": obj.get("scopeId"),
            "scope_type": obj.get("scopeType"),
            "scope": obj.get("scope"),
            "entity_id": obj.get("entityId"),
            "entity_type": obj.get("entityType"),
            "entity": obj.get("entity"),
            "metric_category": obj.get("metricCategory"),
            "metric": obj.get("metric"),
            "risk_metric_value": V1MetricValue.from_dict(obj.get("riskMetricValue")) if obj.get("riskMetricValue") is not None else None
        })
        return _obj

