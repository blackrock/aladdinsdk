# coding: utf-8

"""
    Risk Governance - Rule Evaluation

    Trigger Rule evaluations for Rules created and subscribed to within Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import date, datetime

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Optional

from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.models.v1_evaluate_portfolio_request import V1EvaluatePortfolioRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.models.v1_evaluate_portfolio_rule_request import V1EvaluatePortfolioRuleRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.models.v1_list_rule_evaluations_response import V1ListRuleEvaluationsResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.models.v1_longrunning_operation import V1LongrunningOperation

from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.api_client import ApiClient
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultEvaluatorAnalyticsAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def evaluator_analytics_api_evaluate_portfolio(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1EvaluatePortfolioRequest, **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Trigger all rules  # noqa: E501

        Trigger to run evaluation for specified portfolio and date against all rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluator_analytics_api_evaluate_portfolio(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1EvaluatePortfolioRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the evaluator_analytics_api_evaluate_portfolio_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.evaluator_analytics_api_evaluate_portfolio_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def evaluator_analytics_api_evaluate_portfolio_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1EvaluatePortfolioRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Trigger all rules  # noqa: E501

        Trigger to run evaluation for specified portfolio and date against all rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluator_analytics_api_evaluate_portfolio_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1EvaluatePortfolioRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluator_analytics_api_evaluate_portfolio" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '401': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '403': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '404': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
        }

        return self.api_client.call_api(
            '/portfolio:evaluate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def evaluator_analytics_api_evaluate_portfolio_rule(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1EvaluatePortfolioRuleRequest, **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Trigger specific rule  # noqa: E501

        Trigger to run evaluation for specified portfolio and date against a specific rule (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: We need to do this because it is an existing api changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluator_analytics_api_evaluate_portfolio_rule(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1EvaluatePortfolioRuleRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the evaluator_analytics_api_evaluate_portfolio_rule_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.evaluator_analytics_api_evaluate_portfolio_rule_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def evaluator_analytics_api_evaluate_portfolio_rule_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1EvaluatePortfolioRuleRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Trigger specific rule  # noqa: E501

        Trigger to run evaluation for specified portfolio and date against a specific rule (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: We need to do this because it is an existing api changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluator_analytics_api_evaluate_portfolio_rule_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1EvaluatePortfolioRuleRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluator_analytics_api_evaluate_portfolio_rule" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '401': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '403': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '404': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
        }

        return self.api_client.call_api(
            '/portfolio:evaluateRule', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def evaluator_analytics_api_get_longrunning_operation(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the LongrunningOperation")], **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Get latest state of a long-running operation  # noqa: E501

        Get the latest state of a long-running operation from triggering the evaluator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluator_analytics_api_get_longrunning_operation(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the LongrunningOperation (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the evaluator_analytics_api_get_longrunning_operation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.evaluator_analytics_api_get_longrunning_operation_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def evaluator_analytics_api_get_longrunning_operation_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the LongrunningOperation")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get latest state of a long-running operation  # noqa: E501

        Get the latest state of a long-running operation from triggering the evaluator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluator_analytics_api_get_longrunning_operation_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the LongrunningOperation (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluator_analytics_api_get_longrunning_operation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '401': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '403': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '404': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
        }

        return self.api_client.call_api(
            '/evaluator/longrunningoperations/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def evaluator_analytics_api_list_rule_evaluations(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], filter : Annotated[Optional[StrictStr], Field(description="Used to provide with https://google.aip.dev/160 filtering capabilities  (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: this is in compliance with https://google.aip.dev/160 filtering capabilities --).")] = None, page_token : Annotated[Optional[StrictStr], Field(description="The offset value used to set the starting point into the result set found at the repository.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response The maximum value is 100. If unspecified, the default value is 5.")] = None, order_by : Annotated[Optional[StrictStr], Field(description="Used to specify the ordering of the returned entries by evaluationTime.  The supported syntax: [target field]:asc or [target field]:desc.")] = None, facet_fields : Annotated[Optional[conlist(StrictStr)], Field(description="Used for facet search capabilities by simply specifying the fields to be used as a base. Response will contain an array for each of the specified fields and it's terms and matches for each of the entries (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:   We need to do this because we need this field for facet search capabilities --).")] = None, as_of_date : Annotated[Optional[date], Field(description="When provided, retrieves rule evaluations that have an as of date matching the specified date If provided, startEvalTime will default to that date. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the as of date of evaluations --).")] = None, start_eval_time : Annotated[Optional[datetime], Field(description="When provided, retrieves rule evaluations that have an evaluationTime greater than or equal to the time specified. If absent, the last 24 hours will be shown prior to the endEvalTime(if provided) or the time of the request. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the time range for a search --).")] = None, end_eval_time : Annotated[Optional[datetime], Field(description="When provided, retrieves rule evaluations that have an evaluationTime less than or equal to the time specified. If absent, the endEvalTime defaults to the time of the request. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the time range for a search --).")] = None, **kwargs) -> V1ListRuleEvaluationsResponse:  # noqa: E501
        """List rule evaluations  # noqa: E501

        Retrieve rule evaluations matching the parameters provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluator_analytics_api_list_rule_evaluations(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, order_by, facet_fields, as_of_date, start_eval_time, end_eval_time, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param filter: Used to provide with https://google.aip.dev/160 filtering capabilities  (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: this is in compliance with https://google.aip.dev/160 filtering capabilities --).
        :type filter: str
        :param page_token: The offset value used to set the starting point into the result set found at the repository.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response The maximum value is 100. If unspecified, the default value is 5.
        :type page_size: int
        :param order_by: Used to specify the ordering of the returned entries by evaluationTime.  The supported syntax: [target field]:asc or [target field]:desc.
        :type order_by: str
        :param facet_fields: Used for facet search capabilities by simply specifying the fields to be used as a base. Response will contain an array for each of the specified fields and it's terms and matches for each of the entries (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:   We need to do this because we need this field for facet search capabilities --).
        :type facet_fields: List[str]
        :param as_of_date: When provided, retrieves rule evaluations that have an as of date matching the specified date If provided, startEvalTime will default to that date. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the as of date of evaluations --).
        :type as_of_date: date
        :param start_eval_time: When provided, retrieves rule evaluations that have an evaluationTime greater than or equal to the time specified. If absent, the last 24 hours will be shown prior to the endEvalTime(if provided) or the time of the request. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the time range for a search --).
        :type start_eval_time: datetime
        :param end_eval_time: When provided, retrieves rule evaluations that have an evaluationTime less than or equal to the time specified. If absent, the endEvalTime defaults to the time of the request. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the time range for a search --).
        :type end_eval_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListRuleEvaluationsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the evaluator_analytics_api_list_rule_evaluations_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.evaluator_analytics_api_list_rule_evaluations_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, order_by, facet_fields, as_of_date, start_eval_time, end_eval_time, **kwargs)  # noqa: E501

    @validate_arguments
    def evaluator_analytics_api_list_rule_evaluations_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], filter : Annotated[Optional[StrictStr], Field(description="Used to provide with https://google.aip.dev/160 filtering capabilities  (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: this is in compliance with https://google.aip.dev/160 filtering capabilities --).")] = None, page_token : Annotated[Optional[StrictStr], Field(description="The offset value used to set the starting point into the result set found at the repository.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response The maximum value is 100. If unspecified, the default value is 5.")] = None, order_by : Annotated[Optional[StrictStr], Field(description="Used to specify the ordering of the returned entries by evaluationTime.  The supported syntax: [target field]:asc or [target field]:desc.")] = None, facet_fields : Annotated[Optional[conlist(StrictStr)], Field(description="Used for facet search capabilities by simply specifying the fields to be used as a base. Response will contain an array for each of the specified fields and it's terms and matches for each of the entries (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:   We need to do this because we need this field for facet search capabilities --).")] = None, as_of_date : Annotated[Optional[date], Field(description="When provided, retrieves rule evaluations that have an as of date matching the specified date If provided, startEvalTime will default to that date. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the as of date of evaluations --).")] = None, start_eval_time : Annotated[Optional[datetime], Field(description="When provided, retrieves rule evaluations that have an evaluationTime greater than or equal to the time specified. If absent, the last 24 hours will be shown prior to the endEvalTime(if provided) or the time of the request. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the time range for a search --).")] = None, end_eval_time : Annotated[Optional[datetime], Field(description="When provided, retrieves rule evaluations that have an evaluationTime less than or equal to the time specified. If absent, the endEvalTime defaults to the time of the request. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the time range for a search --).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List rule evaluations  # noqa: E501

        Retrieve rule evaluations matching the parameters provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.evaluator_analytics_api_list_rule_evaluations_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter, page_token, page_size, order_by, facet_fields, as_of_date, start_eval_time, end_eval_time, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param filter: Used to provide with https://google.aip.dev/160 filtering capabilities  (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: this is in compliance with https://google.aip.dev/160 filtering capabilities --).
        :type filter: str
        :param page_token: The offset value used to set the starting point into the result set found at the repository.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response The maximum value is 100. If unspecified, the default value is 5.
        :type page_size: int
        :param order_by: Used to specify the ordering of the returned entries by evaluationTime.  The supported syntax: [target field]:asc or [target field]:desc.
        :type order_by: str
        :param facet_fields: Used for facet search capabilities by simply specifying the fields to be used as a base. Response will contain an array for each of the specified fields and it's terms and matches for each of the entries (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:   We need to do this because we need this field for facet search capabilities --).
        :type facet_fields: List[str]
        :param as_of_date: When provided, retrieves rule evaluations that have an as of date matching the specified date If provided, startEvalTime will default to that date. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the as of date of evaluations --).
        :type as_of_date: date
        :param start_eval_time: When provided, retrieves rule evaluations that have an evaluationTime greater than or equal to the time specified. If absent, the last 24 hours will be shown prior to the endEvalTime(if provided) or the time of the request. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the time range for a search --).
        :type start_eval_time: datetime
        :param end_eval_time: When provided, retrieves rule evaluations that have an evaluationTime less than or equal to the time specified. If absent, the endEvalTime defaults to the time of the request. (-- api-linter: core::0132::request-unknown-fields=disabled aip.dev/not-precedent:  We need to do this because we need this field to specify the time range for a search --).
        :type end_eval_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListRuleEvaluationsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'filter',
            'page_token',
            'page_size',
            'order_by',
            'facet_fields',
            'as_of_date',
            'start_eval_time',
            'end_eval_time'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluator_analytics_api_list_rule_evaluations" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by']))

        if _params.get('facet_fields') is not None:  # noqa: E501
            _query_params.append(('facetFields', _params['facet_fields']))
            _collection_formats['facetFields'] = 'multi'

        if _params.get('as_of_date') is not None:  # noqa: E501
            if isinstance(_params['as_of_date'], datetime):
                _query_params.append(('asOfDate', _params['as_of_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('asOfDate', _params['as_of_date']))

        if _params.get('start_eval_time') is not None:  # noqa: E501
            if isinstance(_params['start_eval_time'], datetime):
                _query_params.append(('startEvalTime', _params['start_eval_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('startEvalTime', _params['start_eval_time']))

        if _params.get('end_eval_time') is not None:  # noqa: E501
            if isinstance(_params['end_eval_time'], datetime):
                _query_params.append(('endEvalTime', _params['end_eval_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('endEvalTime', _params['end_eval_time']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListRuleEvaluationsResponse",
            '400': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '401': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '403': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
            '404': "EvaluatorAnalyticsAPIGetLongrunningOperation400Response",
        }

        return self.api_client.call_api(
            '/ruleEvaluations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
