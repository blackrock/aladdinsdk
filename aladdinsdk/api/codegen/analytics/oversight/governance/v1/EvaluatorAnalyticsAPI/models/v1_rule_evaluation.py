# coding: utf-8

"""
    Risk Governance - Rule Evaluation

    Trigger Rule evaluations for Rules created and subscribed to within Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.models.v1_evaluation_state import V1EvaluationState
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.models.v1_risk_exception import V1RiskException
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.EvaluatorAnalyticsAPI.models.v1_rule_execution_state import V1RuleExecutionState

class V1RuleEvaluation(BaseModel):
    """
    V1RuleEvaluation
    """
    rule_execution_state: Optional[V1RuleExecutionState] = Field(None, alias="ruleExecutionState")
    scope_id: StrictStr = Field(..., alias="scopeId")
    scope_type: StrictStr = Field(..., alias="scopeType")
    as_of_date: date = Field(..., alias="asOfDate")
    rule_id: StrictStr = Field(..., alias="ruleId")
    evaluation_state: Optional[V1EvaluationState] = Field(None, alias="evaluationState")
    condition_count: Optional[StrictInt] = Field(None, alias="conditionCount")
    failed_condition_ids: Optional[conlist(StrictStr)] = Field(None, alias="failedConditionIds")
    exceptions: Optional[conlist(V1RiskException)] = None
    scope: Optional[StrictStr] = None
    rule_version: Optional[StrictStr] = Field(None, alias="ruleVersion")
    evaluation_time: Optional[datetime] = Field(None, alias="evaluationTime")
    evaluation_start_time: Optional[datetime] = Field(None, alias="evaluationStartTime")
    evaluation_finish_time: Optional[datetime] = Field(None, alias="evaluationFinishTime")
    trigger: Optional[StrictStr] = None
    triggering_user: Optional[StrictStr] = Field(None, alias="triggeringUser")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage")
    __properties = ["ruleExecutionState", "scopeId", "scopeType", "asOfDate", "ruleId", "evaluationState", "conditionCount", "failedConditionIds", "exceptions", "scope", "ruleVersion", "evaluationTime", "evaluationStartTime", "evaluationFinishTime", "trigger", "triggeringUser", "errorMessage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RuleEvaluation:
        """Create an instance of V1RuleEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in exceptions (list)
        _items = []
        if self.exceptions:
            for _item in self.exceptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exceptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RuleEvaluation:
        """Create an instance of V1RuleEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RuleEvaluation.parse_obj(obj)

        _obj = V1RuleEvaluation.parse_obj({
            "rule_execution_state": obj.get("ruleExecutionState"),
            "scope_id": obj.get("scopeId"),
            "scope_type": obj.get("scopeType"),
            "as_of_date": obj.get("asOfDate"),
            "rule_id": obj.get("ruleId"),
            "evaluation_state": obj.get("evaluationState"),
            "condition_count": obj.get("conditionCount"),
            "failed_condition_ids": obj.get("failedConditionIds"),
            "exceptions": [V1RiskException.from_dict(_item) for _item in obj.get("exceptions")] if obj.get("exceptions") is not None else None,
            "scope": obj.get("scope"),
            "rule_version": obj.get("ruleVersion"),
            "evaluation_time": obj.get("evaluationTime"),
            "evaluation_start_time": obj.get("evaluationStartTime"),
            "evaluation_finish_time": obj.get("evaluationFinishTime"),
            "trigger": obj.get("trigger"),
            "triggering_user": obj.get("triggeringUser"),
            "error_message": obj.get("errorMessage")
        })
        return _obj

