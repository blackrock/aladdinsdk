# coding: utf-8

"""
    Risk Governance - Tasks

    Retrieve Tasks, as surfaced in Risk Radar, which are aggregates that comprise of related Exceptions, Rules, and Workflow items.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1RiskWorkflowActivity(BaseModel):
    """
    Representation of Risk Workflow Activity.
    """
    id: StrictStr = Field(...)
    workflow_id: StrictStr = Field(..., alias="workflowId")
    workflow_assignee: Optional[StrictStr] = Field(None, alias="workflowAssignee")
    workflow_comment: Optional[StrictStr] = Field(None, alias="workflowComment")
    workflow_action: Optional[StrictStr] = Field(None, alias="workflowAction")
    workflow_state: Optional[StrictStr] = Field(None, alias="workflowState")
    workflow_resolution_category_key: Optional[StrictStr] = Field(None, alias="workflowResolutionCategoryKey")
    workflow_resolution_key: Optional[StrictStr] = Field(None, alias="workflowResolutionKey")
    modifier: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    create_time: Optional[datetime] = Field(None, alias="createTime")
    due_date: Optional[datetime] = Field(None, alias="dueDate")
    __properties = ["id", "workflowId", "workflowAssignee", "workflowComment", "workflowAction", "workflowState", "workflowResolutionCategoryKey", "workflowResolutionKey", "modifier", "modifyTime", "createTime", "dueDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RiskWorkflowActivity:
        """Create an instance of V1RiskWorkflowActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "workflow_state",
                            "modifier",
                            "modify_time",
                            "create_time",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RiskWorkflowActivity:
        """Create an instance of V1RiskWorkflowActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RiskWorkflowActivity.parse_obj(obj)

        _obj = V1RiskWorkflowActivity.parse_obj({
            "id": obj.get("id"),
            "workflow_id": obj.get("workflowId"),
            "workflow_assignee": obj.get("workflowAssignee"),
            "workflow_comment": obj.get("workflowComment"),
            "workflow_action": obj.get("workflowAction"),
            "workflow_state": obj.get("workflowState"),
            "workflow_resolution_category_key": obj.get("workflowResolutionCategoryKey"),
            "workflow_resolution_key": obj.get("workflowResolutionKey"),
            "modifier": obj.get("modifier"),
            "modify_time": obj.get("modifyTime"),
            "create_time": obj.get("createTime"),
            "due_date": obj.get("dueDate")
        })
        return _obj

