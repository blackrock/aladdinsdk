# coding: utf-8

"""
    Risk Governance - Exceptions

    Retrieve, update, or create Exceptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_metric_source import V1MetricSource
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_metric_unit import V1MetricUnit

class V1ConditionDetail(BaseModel):
    """
    V1ConditionDetail
    """
    name: StrictStr = Field(...)
    metric: StrictStr = Field(...)
    metric_unit: Optional[V1MetricUnit] = Field(None, alias="metricUnit")
    breakdown_name: Optional[StrictStr] = Field(None, alias="breakdownName")
    breakdown_type: Optional[StrictStr] = Field(None, alias="breakdownType")
    contains_breakdown: StrictBool = Field(..., alias="containsBreakdown")
    rule_override_id: Optional[StrictStr] = Field(None, alias="ruleOverrideId", description="Unique identifier of the RiskRuleOverride applied to this condition. If present, it indicates some properties of the condition have been set from a RiskRuleOverride that is in effect.")
    rule_override_version: Optional[StrictStr] = Field(None, alias="ruleOverrideVersion")
    metric_source: Optional[V1MetricSource] = Field(None, alias="metricSource")
    __properties = ["name", "metric", "metricUnit", "breakdownName", "breakdownType", "containsBreakdown", "ruleOverrideId", "ruleOverrideVersion", "metricSource"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ConditionDetail:
        """Create an instance of V1ConditionDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ConditionDetail:
        """Create an instance of V1ConditionDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ConditionDetail.parse_obj(obj)

        _obj = V1ConditionDetail.parse_obj({
            "name": obj.get("name"),
            "metric": obj.get("metric"),
            "metric_unit": obj.get("metricUnit"),
            "breakdown_name": obj.get("breakdownName"),
            "breakdown_type": obj.get("breakdownType"),
            "contains_breakdown": obj.get("containsBreakdown"),
            "rule_override_id": obj.get("ruleOverrideId"),
            "rule_override_version": obj.get("ruleOverrideVersion"),
            "metric_source": obj.get("metricSource")
        })
        return _obj

