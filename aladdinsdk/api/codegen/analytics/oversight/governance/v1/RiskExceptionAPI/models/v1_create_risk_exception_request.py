# coding: utf-8

"""
    Risk Governance - Exceptions

    Retrieve, update, or create Exceptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_risk_exception import V1RiskException

class V1CreateRiskExceptionRequest(BaseModel):
    """
    V1CreateRiskExceptionRequest
    """
    as_of_date: StrictStr = Field(..., alias="asOfDate")
    risk_exception: Optional[V1RiskException] = Field(None, alias="riskException")
    __properties = ["asOfDate", "riskException"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateRiskExceptionRequest:
        """Create an instance of V1CreateRiskExceptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of risk_exception
        if self.risk_exception:
            _dict['riskException'] = self.risk_exception.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateRiskExceptionRequest:
        """Create an instance of V1CreateRiskExceptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateRiskExceptionRequest.parse_obj(obj)

        _obj = V1CreateRiskExceptionRequest.parse_obj({
            "as_of_date": obj.get("asOfDate"),
            "risk_exception": V1RiskException.from_dict(obj.get("riskException")) if obj.get("riskException") is not None else None
        })
        return _obj

