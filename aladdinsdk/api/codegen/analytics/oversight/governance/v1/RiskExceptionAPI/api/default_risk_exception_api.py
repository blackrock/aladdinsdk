# coding: utf-8

"""
    Risk Governance - Exceptions

    Retrieve, update, or create Exceptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import date, datetime

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Optional

from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_batch_create_risk_exceptions_request import V1BatchCreateRiskExceptionsRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_list_risk_exceptions_response import V1ListRiskExceptionsResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_longrunning_operation import V1LongrunningOperation
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_retrieve_risk_exceptions_by_id_request import V1RetrieveRiskExceptionsByIdRequest
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_retrieve_risk_exceptions_by_id_response import V1RetrieveRiskExceptionsByIdResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_risk_exception import V1RiskException

from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.api_client import ApiClient
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultRiskExceptionAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def risk_exception_api_batch_create_risk_exceptions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateRiskExceptionsRequest, **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Bulk create, update or close Exceptions  # noqa: E501

        Create, update, or close exceptions in bulk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_batch_create_risk_exceptions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateRiskExceptionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_exception_api_batch_create_risk_exceptions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_exception_api_batch_create_risk_exceptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_exception_api_batch_create_risk_exceptions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateRiskExceptionsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk create, update or close Exceptions  # noqa: E501

        Create, update, or close exceptions in bulk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_batch_create_risk_exceptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateRiskExceptionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_exception_api_batch_create_risk_exceptions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "RiskExceptionAPIListRiskExceptions400Response",
            '401': "RiskExceptionAPIListRiskExceptions400Response",
            '403': "RiskExceptionAPIListRiskExceptions400Response",
            '404': "RiskExceptionAPIListRiskExceptions400Response",
        }

        return self.api_client.call_api(
            '/exceptions:batchCreate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_exception_api_create_risk_exception(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], as_of_date : Annotated[StrictStr, Field(..., description="The effective date for the exception record being submitted. The expected format is yyyy-MM-dd (-- api-linter: core::0133::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this information defines the point in time where the risk was identified --) (-- api-linter: core::0142::time-field-type=disabled aip.dev/not-precedent: We need to do this because making it a google.type.Date build breaks the build  --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because using google.type.Date as a path parameter breaks the build  --)")], body : Annotated[V1RiskException, Field(..., description="The risk exception record being submitted to create or update an existing exception.")], **kwargs) -> V1RiskException:  # noqa: E501
        """Create, update or close an Exception  # noqa: E501

        Create, update, or close an exception based on the aggregate Evaluation State of the Exception provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_create_risk_exception(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, as_of_date, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param as_of_date: The effective date for the exception record being submitted. The expected format is yyyy-MM-dd (-- api-linter: core::0133::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this information defines the point in time where the risk was identified --) (-- api-linter: core::0142::time-field-type=disabled aip.dev/not-precedent: We need to do this because making it a google.type.Date build breaks the build  --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because using google.type.Date as a path parameter breaks the build  --) (required)
        :type as_of_date: str
        :param body: The risk exception record being submitted to create or update an existing exception. (required)
        :type body: V1RiskException
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1RiskException
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_exception_api_create_risk_exception_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_exception_api_create_risk_exception_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, as_of_date, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_exception_api_create_risk_exception_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], as_of_date : Annotated[StrictStr, Field(..., description="The effective date for the exception record being submitted. The expected format is yyyy-MM-dd (-- api-linter: core::0133::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this information defines the point in time where the risk was identified --) (-- api-linter: core::0142::time-field-type=disabled aip.dev/not-precedent: We need to do this because making it a google.type.Date build breaks the build  --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because using google.type.Date as a path parameter breaks the build  --)")], body : Annotated[V1RiskException, Field(..., description="The risk exception record being submitted to create or update an existing exception.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create, update or close an Exception  # noqa: E501

        Create, update, or close an exception based on the aggregate Evaluation State of the Exception provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_create_risk_exception_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, as_of_date, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param as_of_date: The effective date for the exception record being submitted. The expected format is yyyy-MM-dd (-- api-linter: core::0133::request-unknown-fields=disabled aip.dev/not-precedent: We need to do this because this information defines the point in time where the risk was identified --) (-- api-linter: core::0142::time-field-type=disabled aip.dev/not-precedent: We need to do this because making it a google.type.Date build breaks the build  --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because using google.type.Date as a path parameter breaks the build  --) (required)
        :type as_of_date: str
        :param body: The risk exception record being submitted to create or update an existing exception. (required)
        :type body: V1RiskException
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1RiskException, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'as_of_date',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_exception_api_create_risk_exception" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['as_of_date']:
            _path_params['asOfDate'] = _params['as_of_date']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1RiskException",
            '400': "RiskExceptionAPIListRiskExceptions400Response",
            '401': "RiskExceptionAPIListRiskExceptions400Response",
            '403': "RiskExceptionAPIListRiskExceptions400Response",
            '404': "RiskExceptionAPIListRiskExceptions400Response",
        }

        return self.api_client.call_api(
            '/exceptions/{asOfDate}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_exception_api_get_longrunning_operation(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the LongrunningOperation")], **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Get latest state of a long-running operation  # noqa: E501

        Get the latest state of a long-running operation for exception bulk request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_get_longrunning_operation(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the LongrunningOperation (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_exception_api_get_longrunning_operation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_exception_api_get_longrunning_operation_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_exception_api_get_longrunning_operation_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the LongrunningOperation")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get latest state of a long-running operation  # noqa: E501

        Get the latest state of a long-running operation for exception bulk request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_get_longrunning_operation_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the LongrunningOperation (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_exception_api_get_longrunning_operation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "RiskExceptionAPIListRiskExceptions400Response",
            '401': "RiskExceptionAPIListRiskExceptions400Response",
            '403': "RiskExceptionAPIListRiskExceptions400Response",
            '404': "RiskExceptionAPIListRiskExceptions400Response",
        }

        return self.api_client.call_api(
            '/exceptions/longrunningoperations/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_exception_api_list_risk_exceptions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], report_time : Annotated[Optional[datetime], Field(description="When provided, retrieves exceptions as they appeared at the specified point in time, expressed in UTC.   If absent, the current UTC server time will be used instead and exceptions will be returned on an as-is rather than as-was basis.")] = None, begin_range_date : Annotated[Optional[date], Field(description="When provided, retrieves historical exception records with business validity after the specified date (exclusive).  This parameter is used in conjunction with the endRangeDate parameter, typically to retrieve a time series of exception records.   This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.")] = None, end_range_date : Annotated[Optional[date], Field(description="When provided, retrieves historical exception records with business validity up to and including the specified date (inclusive). This parameter is used in conjunction with the beginRangeDate parameter, typically to retrieve a time series of exception records. This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.")] = None, read_mask : Annotated[Optional[StrictStr], Field(description="A field mask to restrict which fields on the exception are returned.  By default, all fields of the exception are returned.  Field names should be specified in camelCase.  In addition to the fields specified, the response will contain scopeId, scopeType, entityId, entityType and ruleId.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="The offset value used to set the starting point into the result set found at the repository.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response.")] = None, filter : Annotated[Optional[StrictStr], Field(description="Used to provide with https://google.aip.dev/160 filtering capabilities.")] = None, order_by : Annotated[Optional[StrictStr], Field(description="Used to provide with ordering to the returned entries. The supported syntax (for now): [target field]:asc or [target field]:desc.")] = None, facet_fields : Annotated[Optional[conlist(StrictStr)], Field(description="Used to provide with facet search capabilities by simply specifiying the fields to be used as base and by consequence, returned with an array for each of the specified fields and it's terms and matches for each of the entries.")] = None, **kwargs) -> V1ListRiskExceptionsResponse:  # noqa: E501
        """Lists the latest state of ongoing exceptions  # noqa: E501

        Retrieve exceptions matching the parameters provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_list_risk_exceptions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, report_time, begin_range_date, end_range_date, read_mask, page_token, page_size, filter, order_by, facet_fields, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param report_time: When provided, retrieves exceptions as they appeared at the specified point in time, expressed in UTC.   If absent, the current UTC server time will be used instead and exceptions will be returned on an as-is rather than as-was basis.
        :type report_time: datetime
        :param begin_range_date: When provided, retrieves historical exception records with business validity after the specified date (exclusive).  This parameter is used in conjunction with the endRangeDate parameter, typically to retrieve a time series of exception records.   This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.
        :type begin_range_date: date
        :param end_range_date: When provided, retrieves historical exception records with business validity up to and including the specified date (inclusive). This parameter is used in conjunction with the beginRangeDate parameter, typically to retrieve a time series of exception records. This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.
        :type end_range_date: date
        :param read_mask: A field mask to restrict which fields on the exception are returned.  By default, all fields of the exception are returned.  Field names should be specified in camelCase.  In addition to the fields specified, the response will contain scopeId, scopeType, entityId, entityType and ruleId.
        :type read_mask: str
        :param page_token: The offset value used to set the starting point into the result set found at the repository.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response.
        :type page_size: int
        :param filter: Used to provide with https://google.aip.dev/160 filtering capabilities.
        :type filter: str
        :param order_by: Used to provide with ordering to the returned entries. The supported syntax (for now): [target field]:asc or [target field]:desc.
        :type order_by: str
        :param facet_fields: Used to provide with facet search capabilities by simply specifiying the fields to be used as base and by consequence, returned with an array for each of the specified fields and it's terms and matches for each of the entries.
        :type facet_fields: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListRiskExceptionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_exception_api_list_risk_exceptions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_exception_api_list_risk_exceptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, report_time, begin_range_date, end_range_date, read_mask, page_token, page_size, filter, order_by, facet_fields, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_exception_api_list_risk_exceptions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], report_time : Annotated[Optional[datetime], Field(description="When provided, retrieves exceptions as they appeared at the specified point in time, expressed in UTC.   If absent, the current UTC server time will be used instead and exceptions will be returned on an as-is rather than as-was basis.")] = None, begin_range_date : Annotated[Optional[date], Field(description="When provided, retrieves historical exception records with business validity after the specified date (exclusive).  This parameter is used in conjunction with the endRangeDate parameter, typically to retrieve a time series of exception records.   This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.")] = None, end_range_date : Annotated[Optional[date], Field(description="When provided, retrieves historical exception records with business validity up to and including the specified date (inclusive). This parameter is used in conjunction with the beginRangeDate parameter, typically to retrieve a time series of exception records. This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.")] = None, read_mask : Annotated[Optional[StrictStr], Field(description="A field mask to restrict which fields on the exception are returned.  By default, all fields of the exception are returned.  Field names should be specified in camelCase.  In addition to the fields specified, the response will contain scopeId, scopeType, entityId, entityType and ruleId.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="The offset value used to set the starting point into the result set found at the repository.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The number of entries to be returned as a response.")] = None, filter : Annotated[Optional[StrictStr], Field(description="Used to provide with https://google.aip.dev/160 filtering capabilities.")] = None, order_by : Annotated[Optional[StrictStr], Field(description="Used to provide with ordering to the returned entries. The supported syntax (for now): [target field]:asc or [target field]:desc.")] = None, facet_fields : Annotated[Optional[conlist(StrictStr)], Field(description="Used to provide with facet search capabilities by simply specifiying the fields to be used as base and by consequence, returned with an array for each of the specified fields and it's terms and matches for each of the entries.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Lists the latest state of ongoing exceptions  # noqa: E501

        Retrieve exceptions matching the parameters provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_list_risk_exceptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, report_time, begin_range_date, end_range_date, read_mask, page_token, page_size, filter, order_by, facet_fields, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param report_time: When provided, retrieves exceptions as they appeared at the specified point in time, expressed in UTC.   If absent, the current UTC server time will be used instead and exceptions will be returned on an as-is rather than as-was basis.
        :type report_time: datetime
        :param begin_range_date: When provided, retrieves historical exception records with business validity after the specified date (exclusive).  This parameter is used in conjunction with the endRangeDate parameter, typically to retrieve a time series of exception records.   This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.
        :type begin_range_date: date
        :param end_range_date: When provided, retrieves historical exception records with business validity up to and including the specified date (inclusive). This parameter is used in conjunction with the beginRangeDate parameter, typically to retrieve a time series of exception records. This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.
        :type end_range_date: date
        :param read_mask: A field mask to restrict which fields on the exception are returned.  By default, all fields of the exception are returned.  Field names should be specified in camelCase.  In addition to the fields specified, the response will contain scopeId, scopeType, entityId, entityType and ruleId.
        :type read_mask: str
        :param page_token: The offset value used to set the starting point into the result set found at the repository.
        :type page_token: str
        :param page_size: The number of entries to be returned as a response.
        :type page_size: int
        :param filter: Used to provide with https://google.aip.dev/160 filtering capabilities.
        :type filter: str
        :param order_by: Used to provide with ordering to the returned entries. The supported syntax (for now): [target field]:asc or [target field]:desc.
        :type order_by: str
        :param facet_fields: Used to provide with facet search capabilities by simply specifiying the fields to be used as base and by consequence, returned with an array for each of the specified fields and it's terms and matches for each of the entries.
        :type facet_fields: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListRiskExceptionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'report_time',
            'begin_range_date',
            'end_range_date',
            'read_mask',
            'page_token',
            'page_size',
            'filter',
            'order_by',
            'facet_fields'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_exception_api_list_risk_exceptions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('report_time') is not None:  # noqa: E501
            if isinstance(_params['report_time'], datetime):
                _query_params.append(('reportTime', _params['report_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('reportTime', _params['report_time']))

        if _params.get('begin_range_date') is not None:  # noqa: E501
            if isinstance(_params['begin_range_date'], datetime):
                _query_params.append(('beginRangeDate', _params['begin_range_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('beginRangeDate', _params['begin_range_date']))

        if _params.get('end_range_date') is not None:  # noqa: E501
            if isinstance(_params['end_range_date'], datetime):
                _query_params.append(('endRangeDate', _params['end_range_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('endRangeDate', _params['end_range_date']))

        if _params.get('read_mask') is not None:  # noqa: E501
            _query_params.append(('readMask', _params['read_mask']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by']))

        if _params.get('facet_fields') is not None:  # noqa: E501
            _query_params.append(('facetFields', _params['facet_fields']))
            _collection_formats['facetFields'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListRiskExceptionsResponse",
            '400': "RiskExceptionAPIListRiskExceptions400Response",
            '401': "RiskExceptionAPIListRiskExceptions400Response",
            '403': "RiskExceptionAPIListRiskExceptions400Response",
            '404': "RiskExceptionAPIListRiskExceptions400Response",
        }

        return self.api_client.call_api(
            '/exceptions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def risk_exception_api_retrieve_risk_exceptions_by_id(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveRiskExceptionsByIdRequest, **kwargs) -> V1RetrieveRiskExceptionsByIdResponse:  # noqa: E501
        """Bulk retrieve Exceptions by Id  # noqa: E501

        Retrieve a large number of Exceptions in bulk by specifically filtering on the Exception's natural unique identifier. This operation is designed to complement the more flexible filtering capabilities supported by the list operation. (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: We need to do this because it is an existing api, changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_retrieve_risk_exceptions_by_id(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveRiskExceptionsByIdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1RetrieveRiskExceptionsByIdResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the risk_exception_api_retrieve_risk_exceptions_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.risk_exception_api_retrieve_risk_exceptions_by_id_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def risk_exception_api_retrieve_risk_exceptions_by_id_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveRiskExceptionsByIdRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk retrieve Exceptions by Id  # noqa: E501

        Retrieve a large number of Exceptions in bulk by specifically filtering on the Exception's natural unique identifier. This operation is designed to complement the more flexible filtering capabilities supported by the list operation. (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: We need to do this because it is an existing api, changing existing URI to suggested URI will break all citizen developers code. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.risk_exception_api_retrieve_risk_exceptions_by_id_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveRiskExceptionsByIdRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1RetrieveRiskExceptionsByIdResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk_exception_api_retrieve_risk_exceptions_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1RetrieveRiskExceptionsByIdResponse",
            '400': "RiskExceptionAPIListRiskExceptions400Response",
            '401': "RiskExceptionAPIListRiskExceptions400Response",
            '403': "RiskExceptionAPIListRiskExceptions400Response",
            '404': "RiskExceptionAPIListRiskExceptions400Response",
        }

        return self.api_client.call_api(
            '/exceptions:retrieveRiskExceptionsById', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
