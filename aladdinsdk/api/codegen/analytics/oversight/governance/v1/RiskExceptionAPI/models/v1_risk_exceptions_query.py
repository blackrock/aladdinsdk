# coding: utf-8

"""
    Risk Governance - Exceptions

    Retrieve, update, or create Exceptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1RiskExceptionsQuery(BaseModel):
    """
    The query required to perform a FilterRiskExceptions call.
    """
    report_time: Optional[datetime] = Field(None, alias="reportTime", description="When provided, retrieves exceptions as they appeared at the specified point in time, expressed in UTC. If absent, the current UTC server time will be used instead and exceptions will be returned on an as-is rather than as-was basis.")
    begin_range_date: Optional[date] = Field(None, alias="beginRangeDate", description="When provided, retrieves historical exception records with business validity after the specified date (exclusive).  This parameter is used in conjunction with the endRangeDate parameter, typically to retrieve a time series of exception records.   This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.")
    end_range_date: Optional[date] = Field(None, alias="endRangeDate", description="When provided, retrieves historical exception records with business validity up to and including the specified date (inclusive). This parameter is used in conjunction with the beginRangeDate parameter, typically to retrieve a time series of exception records. This time series is uses as-is data - combining date range parameters with the reportTime parameter is not supported.")
    read_mask: Optional[StrictStr] = Field(None, alias="readMask", description="A field mask to restrict which fields on the exception are returned.  By default, all fields of the exception are returned.  Field names should be specified in camelCase.  In addition to the fields specified, the response will contain scopeId, scopeType, entityId, entityType and ruleId.")
    filter: Optional[StrictStr] = None
    order_by: Optional[StrictStr] = Field(None, alias="orderBy")
    __properties = ["reportTime", "beginRangeDate", "endRangeDate", "readMask", "filter", "orderBy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RiskExceptionsQuery:
        """Create an instance of V1RiskExceptionsQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RiskExceptionsQuery:
        """Create an instance of V1RiskExceptionsQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RiskExceptionsQuery.parse_obj(obj)

        _obj = V1RiskExceptionsQuery.parse_obj({
            "report_time": obj.get("reportTime"),
            "begin_range_date": obj.get("beginRangeDate"),
            "end_range_date": obj.get("endRangeDate"),
            "read_mask": obj.get("readMask"),
            "filter": obj.get("filter"),
            "order_by": obj.get("orderBy")
        })
        return _obj

