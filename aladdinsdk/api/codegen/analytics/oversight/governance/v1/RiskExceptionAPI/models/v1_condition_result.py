# coding: utf-8

"""
    Risk Governance - Exceptions

    Retrieve, update, or create Exceptions as surfaced in Risk Radar.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_condition_detail import V1ConditionDetail
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_evaluation_state import V1EvaluationState
from aladdinsdk.api.codegen.analytics.oversight.governance.v1.RiskExceptionAPI.models.v1_sector_result import V1SectorResult

class V1ConditionResult(BaseModel):
    """
    V1ConditionResult
    """
    id: Optional[StrictStr] = None
    condition_detail: Optional[V1ConditionDetail] = Field(None, alias="conditionDetail")
    sector_results: Optional[conlist(V1SectorResult)] = Field(None, alias="sectorResults")
    evaluation_state: Optional[V1EvaluationState] = Field(None, alias="evaluationState")
    __properties = ["id", "conditionDetail", "sectorResults", "evaluationState"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ConditionResult:
        """Create an instance of V1ConditionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of condition_detail
        if self.condition_detail:
            _dict['conditionDetail'] = self.condition_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sector_results (list)
        _items = []
        if self.sector_results:
            for _item in self.sector_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sectorResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ConditionResult:
        """Create an instance of V1ConditionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ConditionResult.parse_obj(obj)

        _obj = V1ConditionResult.parse_obj({
            "id": obj.get("id"),
            "condition_detail": V1ConditionDetail.from_dict(obj.get("conditionDetail")) if obj.get("conditionDetail") is not None else None,
            "sector_results": [V1SectorResult.from_dict(_item) for _item in obj.get("sectorResults")] if obj.get("sectorResults") is not None else None,
            "evaluation_state": obj.get("evaluationState")
        })
        return _obj

