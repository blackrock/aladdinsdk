# coding: utf-8

"""
    ESG Data

    The ESG Data API offers a centralized source of ESG data and meta data across multiple vendors. The API retrieves ESG data by asset and issuer from multiple vendors, providing the data in one digestible schema. Retrieve ESG data for selected assets and issuers by providing entity id, provider id, date(s) and measure name. Meta data on ESG data measures can be retrieved by selecting a provider, provider category and unique measure names. Time Series API in alpha version, changes may be made at any time.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.rpc_status import RpcStatus
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_id_type import V1IdType
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_provider_measure import V1ProviderMeasure

class V1ESGException(BaseModel):
    """
    (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We can't change IdType name as this will break existing API --) Exception response to request client.
    """
    ids: Optional[conlist(StrictStr)] = None
    id_type: Optional[V1IdType] = Field(None, alias="idType")
    esg_exception_status: Optional[RpcStatus] = Field(None, alias="esgExceptionStatus")
    provider_measure: Optional[V1ProviderMeasure] = Field(None, alias="providerMeasure")
    __properties = ["ids", "idType", "esgExceptionStatus", "providerMeasure"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ESGException:
        """Create an instance of V1ESGException from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of esg_exception_status
        if self.esg_exception_status:
            _dict['esgExceptionStatus'] = self.esg_exception_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider_measure
        if self.provider_measure:
            _dict['providerMeasure'] = self.provider_measure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ESGException:
        """Create an instance of V1ESGException from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ESGException.parse_obj(obj)

        _obj = V1ESGException.parse_obj({
            "ids": obj.get("ids"),
            "id_type": obj.get("idType"),
            "esg_exception_status": RpcStatus.from_dict(obj.get("esgExceptionStatus")) if obj.get("esgExceptionStatus") is not None else None,
            "provider_measure": V1ProviderMeasure.from_dict(obj.get("providerMeasure")) if obj.get("providerMeasure") is not None else None
        })
        return _obj

