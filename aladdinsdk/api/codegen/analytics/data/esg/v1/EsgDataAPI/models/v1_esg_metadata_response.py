# coding: utf-8

"""
    ESG Data

    The ESG Data API offers a centralized source of ESG data and meta data across multiple vendors. The API retrieves ESG data by asset and issuer from multiple vendors, providing the data in one digestible schema. Retrieve ESG data for selected assets and issuers by providing entity id, provider id, date(s) and measure name. Meta data on ESG data measures can be retrieved by selecting a provider, provider category and unique measure names. Time Series API in alpha version, changes may be made at any time.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_provider_measure_metadata import V1ProviderMeasureMetadata

class V1ESGMetadataResponse(BaseModel):
    """
    Response message for ESG Entitlements/Metadata API.
    """
    provider_id: StrictStr = Field(..., alias="providerId", description="Source setting for the list of measures.")
    provider_category: StrictStr = Field(..., alias="providerCategory", description="Category setting for the list of measures.")
    esg_metadata: conlist(V1ProviderMeasureMetadata) = Field(..., alias="esgMetadata", description="Return list of entitled measures.")
    __properties = ["providerId", "providerCategory", "esgMetadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ESGMetadataResponse:
        """Create an instance of V1ESGMetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in esg_metadata (list)
        _items = []
        if self.esg_metadata:
            for _item in self.esg_metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['esgMetadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ESGMetadataResponse:
        """Create an instance of V1ESGMetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ESGMetadataResponse.parse_obj(obj)

        _obj = V1ESGMetadataResponse.parse_obj({
            "provider_id": obj.get("providerId"),
            "provider_category": obj.get("providerCategory"),
            "esg_metadata": [V1ProviderMeasureMetadata.from_dict(_item) for _item in obj.get("esgMetadata")] if obj.get("esgMetadata") is not None else None
        })
        return _obj

