# coding: utf-8

"""
    ESG Data

    The ESG Data API offers a centralized source of ESG data and meta data across multiple vendors. The API retrieves ESG data by asset and issuer from multiple vendors, providing the data in one digestible schema. Retrieve ESG data for selected assets and issuers by providing entity id, provider id, date(s) and measure name. Meta data on ESG data measures can be retrieved by selecting a provider, provider category and unique measure names. Time Series API in alpha version, changes may be made at any time.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictStr, conlist

from typing import Optional

from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_esg_data_set_response import V1ESGDataSetResponse
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_esg_metadata_response import V1ESGMetadataResponse
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_retrieve_esg_data_as_of_date_request import V1RetrieveEsgDataAsOfDateRequest
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_retrieve_esg_data_time_series_request import V1RetrieveEsgDataTimeSeriesRequest

from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.api_client import ApiClient
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultEsgDataAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def esg_data_api_retrieve_esg_data_as_of_date(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveEsgDataAsOfDateRequest, **kwargs) -> V1ESGDataSetResponse:  # noqa: E501
        """Retrieve ESG data as of date  # noqa: E501

        Retrieve ESG data as of date (-- api-linter: core::0136::prepositions=disabled  aip.dev/not-precedent: We need to do this because gives more idea about the API and differentiates from the other API --) (-- api-linter: aladdin::9016::rpc-name=disabled aip.dev/not-precedent: We can't change this as this will break existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We can't change this as this will break existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.esg_data_api_retrieve_esg_data_as_of_date(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveEsgDataAsOfDateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ESGDataSetResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the esg_data_api_retrieve_esg_data_as_of_date_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.esg_data_api_retrieve_esg_data_as_of_date_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def esg_data_api_retrieve_esg_data_as_of_date_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveEsgDataAsOfDateRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve ESG data as of date  # noqa: E501

        Retrieve ESG data as of date (-- api-linter: core::0136::prepositions=disabled  aip.dev/not-precedent: We need to do this because gives more idea about the API and differentiates from the other API --) (-- api-linter: aladdin::9016::rpc-name=disabled aip.dev/not-precedent: We can't change this as this will break existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We can't change this as this will break existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.esg_data_api_retrieve_esg_data_as_of_date_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveEsgDataAsOfDateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ESGDataSetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esg_data_api_retrieve_esg_data_as_of_date" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ESGDataSetResponse",
            '400': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '401': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '403': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '404': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
        }

        return self.api_client.call_api(
            '/data:retrieve', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def esg_data_api_retrieve_esg_data_time_series(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveEsgDataTimeSeriesRequest, **kwargs) -> V1ESGDataSetResponse:  # noqa: E501
        """Retrieve time series ESG Data  # noqa: E501

        Retrieve ESG Data as per time range in request (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is common across AsOfDate & TimeSeries endpoints --) (-- api-linter: aladdin::9016::rpc-name=disabled aip.dev/not-precedent: We can't change this as this will break existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We can't change this as this will break existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.esg_data_api_retrieve_esg_data_time_series(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveEsgDataTimeSeriesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ESGDataSetResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the esg_data_api_retrieve_esg_data_time_series_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.esg_data_api_retrieve_esg_data_time_series_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def esg_data_api_retrieve_esg_data_time_series_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveEsgDataTimeSeriesRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve time series ESG Data  # noqa: E501

        Retrieve ESG Data as per time range in request (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is common across AsOfDate & TimeSeries endpoints --) (-- api-linter: aladdin::9016::rpc-name=disabled aip.dev/not-precedent: We can't change this as this will break existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We can't change this as this will break existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.esg_data_api_retrieve_esg_data_time_series_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveEsgDataTimeSeriesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ESGDataSetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esg_data_api_retrieve_esg_data_time_series" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ESGDataSetResponse",
            '400': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '401': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '403': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '404': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
        }

        return self.api_client.call_api(
            '/timeseriesdata:retrieve', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def esg_data_api_retrieve_esg_metadata(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], provider_id : Annotated[StrictStr, Field(..., description="Provider setting for the list of measures.  Examples = MSCI, SUST, ISS, REFINITIV, CLARITY_AI.")], provider_category : Annotated[Optional[StrictStr], Field(description="Category setting for the list of measures. Example : `ESG`.")] = None, measures : Annotated[Optional[conlist(StrictStr)], Field(description="Optional list of measures.  If empty, will return all available measures for the source/category. Example : `ESG_IA_SCORE,ESG_FINAL_RATING`.")] = None, **kwargs) -> V1ESGMetadataResponse:  # noqa: E501
        """Retrieve ESG Measures  # noqa: E501

        Retrieve ESG Measures for different providers (-- api-linter: aladdin::9016::rpc-name=disabled aip.dev/not-precedent: We can't change this as this will break existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We can't change this as this will break existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.esg_data_api_retrieve_esg_metadata(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, provider_id, provider_category, measures, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param provider_id: Provider setting for the list of measures.  Examples = MSCI, SUST, ISS, REFINITIV, CLARITY_AI. (required)
        :type provider_id: str
        :param provider_category: Category setting for the list of measures. Example : `ESG`.
        :type provider_category: str
        :param measures: Optional list of measures.  If empty, will return all available measures for the source/category. Example : `ESG_IA_SCORE,ESG_FINAL_RATING`.
        :type measures: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ESGMetadataResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the esg_data_api_retrieve_esg_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.esg_data_api_retrieve_esg_metadata_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, provider_id, provider_category, measures, **kwargs)  # noqa: E501

    @validate_arguments
    def esg_data_api_retrieve_esg_metadata_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], provider_id : Annotated[StrictStr, Field(..., description="Provider setting for the list of measures.  Examples = MSCI, SUST, ISS, REFINITIV, CLARITY_AI.")], provider_category : Annotated[Optional[StrictStr], Field(description="Category setting for the list of measures. Example : `ESG`.")] = None, measures : Annotated[Optional[conlist(StrictStr)], Field(description="Optional list of measures.  If empty, will return all available measures for the source/category. Example : `ESG_IA_SCORE,ESG_FINAL_RATING`.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve ESG Measures  # noqa: E501

        Retrieve ESG Measures for different providers (-- api-linter: aladdin::9016::rpc-name=disabled aip.dev/not-precedent: We can't change this as this will break existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We can't change this as this will break existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.esg_data_api_retrieve_esg_metadata_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, provider_id, provider_category, measures, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param provider_id: Provider setting for the list of measures.  Examples = MSCI, SUST, ISS, REFINITIV, CLARITY_AI. (required)
        :type provider_id: str
        :param provider_category: Category setting for the list of measures. Example : `ESG`.
        :type provider_category: str
        :param measures: Optional list of measures.  If empty, will return all available measures for the source/category. Example : `ESG_IA_SCORE,ESG_FINAL_RATING`.
        :type measures: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ESGMetadataResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'provider_id',
            'provider_category',
            'measures'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esg_data_api_retrieve_esg_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('provider_id') is not None:  # noqa: E501
            _query_params.append(('providerId', _params['provider_id']))

        if _params.get('provider_category') is not None:  # noqa: E501
            _query_params.append(('providerCategory', _params['provider_category']))

        if _params.get('measures') is not None:  # noqa: E501
            _query_params.append(('measures', _params['measures']))
            _collection_formats['measures'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ESGMetadataResponse",
            '400': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '401': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '403': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
            '404': "EsgDataAPIRetrieveEsgDataAsOfDate400Response",
        }

        return self.api_client.call_api(
            '/metadata:retrieve', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
