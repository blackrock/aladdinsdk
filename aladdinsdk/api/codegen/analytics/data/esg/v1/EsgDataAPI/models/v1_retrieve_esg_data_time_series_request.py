# coding: utf-8

"""
    ESG Data

    The ESG Data API offers a centralized source of ESG data and meta data across multiple vendors. The API retrieves ESG data by asset and issuer from multiple vendors, providing the data in one digestible schema. Retrieve ESG data for selected assets and issuers by providing entity id, provider id, date(s) and measure name. Meta data on ESG data measures can be retrieved by selecting a provider, provider category and unique measure names. Time Series API in alpha version, changes may be made at any time.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_id_type import V1IdType
from aladdinsdk.api.codegen.analytics.data.esg.v1.EsgDataAPI.models.v1_report_frequency import V1ReportFrequency

class V1RetrieveEsgDataTimeSeriesRequest(BaseModel):
    """
    The request message for EsgDataAPI.RetrieveEsgDataTimeSeries.
    """
    ids: conlist(StrictStr) = Field(...)
    id_type: Optional[V1IdType] = Field(None, alias="idType")
    from_date: date = Field(..., alias="fromDate")
    to_date: date = Field(..., alias="toDate")
    provider_id: StrictStr = Field(..., alias="providerId")
    measures: conlist(StrictStr) = Field(...)
    rollup_flag: Optional[StrictBool] = Field(None, alias="rollupFlag")
    period: Optional[V1ReportFrequency] = None
    page_size: Optional[StrictInt] = Field(None, alias="pageSize")
    page_token: Optional[StrictStr] = Field(None, alias="pageToken", description="A page token, received from a previous `RetrieveEsgDataTimeSeriesRequest` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `RetrieveEsgDataTimeSeriesRequest` must match the call that provided the page token.")
    __properties = ["ids", "idType", "fromDate", "toDate", "providerId", "measures", "rollupFlag", "period", "pageSize", "pageToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RetrieveEsgDataTimeSeriesRequest:
        """Create an instance of V1RetrieveEsgDataTimeSeriesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RetrieveEsgDataTimeSeriesRequest:
        """Create an instance of V1RetrieveEsgDataTimeSeriesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RetrieveEsgDataTimeSeriesRequest.parse_obj(obj)

        _obj = V1RetrieveEsgDataTimeSeriesRequest.parse_obj({
            "ids": obj.get("ids"),
            "id_type": obj.get("idType"),
            "from_date": obj.get("fromDate"),
            "to_date": obj.get("toDate"),
            "provider_id": obj.get("providerId"),
            "measures": obj.get("measures"),
            "rollup_flag": obj.get("rollupFlag"),
            "period": obj.get("period"),
            "page_size": obj.get("pageSize"),
            "page_token": obj.get("pageToken")
        })
        return _obj

