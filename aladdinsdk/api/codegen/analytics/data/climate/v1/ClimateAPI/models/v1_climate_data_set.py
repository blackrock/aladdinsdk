# coding: utf-8

"""
    Climate

    The Aladdin Climate Data API exposes physical, transition, and temperature alignment analytics as of a given date. Users can retrieve data for selected entity types by specifying the desired datapoints for each climate risk type and scenario. The Aladdin Climate Meta Data API outlines the datapoints available across physical, transition, and temperature alignment analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.v1_climate_common_data_set import V1ClimateCommonDataSet
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.v1_climate_scenario_data_set import V1ClimateScenarioDataSet
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.v1_id_attributes import V1IdAttributes

class V1ClimateDataSet(BaseModel):
    """
    V1ClimateDataSet
    """
    id: Optional[StrictStr] = None
    climate_scenario_data_sets: Optional[conlist(V1ClimateScenarioDataSet)] = Field(None, alias="climateScenarioDataSets")
    asset_class: Optional[StrictStr] = Field(None, alias="assetClass")
    id_attributes: Optional[conlist(V1IdAttributes)] = Field(None, alias="idAttributes")
    climate_common_data_sets: Optional[conlist(V1ClimateCommonDataSet)] = Field(None, alias="climateCommonDataSets")
    __properties = ["id", "climateScenarioDataSets", "assetClass", "idAttributes", "climateCommonDataSets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ClimateDataSet:
        """Create an instance of V1ClimateDataSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in climate_scenario_data_sets (list)
        _items = []
        if self.climate_scenario_data_sets:
            for _item in self.climate_scenario_data_sets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['climateScenarioDataSets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in id_attributes (list)
        _items = []
        if self.id_attributes:
            for _item in self.id_attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['idAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in climate_common_data_sets (list)
        _items = []
        if self.climate_common_data_sets:
            for _item in self.climate_common_data_sets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['climateCommonDataSets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ClimateDataSet:
        """Create an instance of V1ClimateDataSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ClimateDataSet.parse_obj(obj)

        _obj = V1ClimateDataSet.parse_obj({
            "id": obj.get("id"),
            "climate_scenario_data_sets": [V1ClimateScenarioDataSet.from_dict(_item) for _item in obj.get("climateScenarioDataSets")] if obj.get("climateScenarioDataSets") is not None else None,
            "asset_class": obj.get("assetClass"),
            "id_attributes": [V1IdAttributes.from_dict(_item) for _item in obj.get("idAttributes")] if obj.get("idAttributes") is not None else None,
            "climate_common_data_sets": [V1ClimateCommonDataSet.from_dict(_item) for _item in obj.get("climateCommonDataSets")] if obj.get("climateCommonDataSets") is not None else None
        })
        return _obj

