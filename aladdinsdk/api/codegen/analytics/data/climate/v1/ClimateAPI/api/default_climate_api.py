# coding: utf-8

"""
    Climate

    The Aladdin Climate Data API exposes physical, transition, and temperature alignment analytics as of a given date. Users can retrieve data for selected entity types by specifying the desired datapoints for each climate risk type and scenario. The Aladdin Climate Meta Data API outlines the datapoints available across physical, transition, and temperature alignment analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictStr, conlist

from typing import Optional

from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.v1_climate_data_set_response import V1ClimateDataSetResponse
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.v1_retrieve_climate_data_as_of_date_request import V1RetrieveClimateDataAsOfDateRequest
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.v1_retrieve_climate_metadata_response import V1RetrieveClimateMetadataResponse

from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.api_client import ApiClient
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultClimateAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def climate_api_retrieve_climate_data_as_of_date(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveClimateDataAsOfDateRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1ClimateDataSetResponse:  # noqa: E501
        """Retrieve climate data for a given date  # noqa: E501

        The Aladdin Climate Data API exposes physical, transition, and temperature alignment analytics as of a given date. Users can retrieve data for selected entity types by specifying the desired datapoints for each climate risk type and scenario. (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is common across AsOfDate & TimeSeries endpoints --) (-- api-linter: core::0136::prepositions=disabled  aip.dev/not-precedent: We need to do this because gives more idea about the API and differentiates from the other API --) (-- api-linter: aladdin::9016::rpc-name=disabled aip.dev/not-precedent: We need to do this because there are multiple criteria by which the data is pulled --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because there are multiple criteria by which the data is pulled --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.climate_api_retrieve_climate_data_as_of_date(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveClimateDataAsOfDateRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ClimateDataSetResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the climate_api_retrieve_climate_data_as_of_date_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.climate_api_retrieve_climate_data_as_of_date_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def climate_api_retrieve_climate_data_as_of_date_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RetrieveClimateDataAsOfDateRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve climate data for a given date  # noqa: E501

        The Aladdin Climate Data API exposes physical, transition, and temperature alignment analytics as of a given date. Users can retrieve data for selected entity types by specifying the desired datapoints for each climate risk type and scenario. (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is common across AsOfDate & TimeSeries endpoints --) (-- api-linter: core::0136::prepositions=disabled  aip.dev/not-precedent: We need to do this because gives more idea about the API and differentiates from the other API --) (-- api-linter: aladdin::9016::rpc-name=disabled aip.dev/not-precedent: We need to do this because there are multiple criteria by which the data is pulled --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because there are multiple criteria by which the data is pulled --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.climate_api_retrieve_climate_data_as_of_date_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RetrieveClimateDataAsOfDateRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ClimateDataSetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method climate_api_retrieve_climate_data_as_of_date" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ClimateDataSetResponse",
            '400': "ClimateAPIRetrieveClimateDataAsOfDate400Response",
            '401': "ClimateAPIRetrieveClimateDataAsOfDate400Response",
            '403': "ClimateAPIRetrieveClimateDataAsOfDate400Response",
            '404': "ClimateAPIRetrieveClimateDataAsOfDate400Response",
        }

        return self.api_client.call_api(
            '/data:retrieve', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def climate_api_retrieve_climate_metadata(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], metric_type : Annotated[StrictStr, Field(..., description="Climate risk type for which a user wants the associated meta data. Example : 'METRIC_TYPE_PHYSICAL', 'METRIC_TYPE_TEMP_ALIGNMENT'.   - METRIC_TYPE_UNSPECIFIED: Default Value - Error is thrown in this case  - METRIC_TYPE_PHYSICAL: Related to physical risk  - METRIC_TYPE_TRANSITION: Related to transition risk  - METRIC_TYPE_TEMP_ALIGNMENT: Related to temperature alignment  - METRIC_TYPE_COMBINED_CLIMATE: Related to combined tr and pr climate")], vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, metric_codes : Annotated[Optional[conlist(StrictStr)], Field(description="Specific metric codes for which more information is needed. Example : 'TR_CAPACITY_PROJ_WIND_REG_MWH', 'TR_GLOBAL_SALES_PROJ_EV'.")] = None, **kwargs) -> V1RetrieveClimateMetadataResponse:  # noqa: E501
        """Retrieve climate meta data  # noqa: E501

        The Aladdin Climate Meta Data API outlines the datapoints available across physical, transition, and temperature alignment analytics. Users can query for data using a specific metricType (PHYSICAL, TRANSITION, and TEMP_ALIGNMENT) and can optionally specify for which metricCodes. (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because climate is there is the url already and want to keep the structure similar to other APIs --) (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because this is the climate metadata request and hence follows the naming accodingly --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.climate_api_retrieve_climate_metadata(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, metric_type, vnd_com_blackrock_channel, metric_codes, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param metric_type: Climate risk type for which a user wants the associated meta data. Example : 'METRIC_TYPE_PHYSICAL', 'METRIC_TYPE_TEMP_ALIGNMENT'.   - METRIC_TYPE_UNSPECIFIED: Default Value - Error is thrown in this case  - METRIC_TYPE_PHYSICAL: Related to physical risk  - METRIC_TYPE_TRANSITION: Related to transition risk  - METRIC_TYPE_TEMP_ALIGNMENT: Related to temperature alignment  - METRIC_TYPE_COMBINED_CLIMATE: Related to combined tr and pr climate (required)
        :type metric_type: str
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param metric_codes: Specific metric codes for which more information is needed. Example : 'TR_CAPACITY_PROJ_WIND_REG_MWH', 'TR_GLOBAL_SALES_PROJ_EV'.
        :type metric_codes: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1RetrieveClimateMetadataResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the climate_api_retrieve_climate_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.climate_api_retrieve_climate_metadata_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, metric_type, vnd_com_blackrock_channel, metric_codes, **kwargs)  # noqa: E501

    @validate_arguments
    def climate_api_retrieve_climate_metadata_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], metric_type : Annotated[StrictStr, Field(..., description="Climate risk type for which a user wants the associated meta data. Example : 'METRIC_TYPE_PHYSICAL', 'METRIC_TYPE_TEMP_ALIGNMENT'.   - METRIC_TYPE_UNSPECIFIED: Default Value - Error is thrown in this case  - METRIC_TYPE_PHYSICAL: Related to physical risk  - METRIC_TYPE_TRANSITION: Related to transition risk  - METRIC_TYPE_TEMP_ALIGNMENT: Related to temperature alignment  - METRIC_TYPE_COMBINED_CLIMATE: Related to combined tr and pr climate")], vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, metric_codes : Annotated[Optional[conlist(StrictStr)], Field(description="Specific metric codes for which more information is needed. Example : 'TR_CAPACITY_PROJ_WIND_REG_MWH', 'TR_GLOBAL_SALES_PROJ_EV'.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve climate meta data  # noqa: E501

        The Aladdin Climate Meta Data API outlines the datapoints available across physical, transition, and temperature alignment analytics. Users can query for data using a specific metricType (PHYSICAL, TRANSITION, and TEMP_ALIGNMENT) and can optionally specify for which metricCodes. (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because climate is there is the url already and want to keep the structure similar to other APIs --) (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because this is the climate metadata request and hence follows the naming accodingly --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.climate_api_retrieve_climate_metadata_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, metric_type, vnd_com_blackrock_channel, metric_codes, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param metric_type: Climate risk type for which a user wants the associated meta data. Example : 'METRIC_TYPE_PHYSICAL', 'METRIC_TYPE_TEMP_ALIGNMENT'.   - METRIC_TYPE_UNSPECIFIED: Default Value - Error is thrown in this case  - METRIC_TYPE_PHYSICAL: Related to physical risk  - METRIC_TYPE_TRANSITION: Related to transition risk  - METRIC_TYPE_TEMP_ALIGNMENT: Related to temperature alignment  - METRIC_TYPE_COMBINED_CLIMATE: Related to combined tr and pr climate (required)
        :type metric_type: str
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param metric_codes: Specific metric codes for which more information is needed. Example : 'TR_CAPACITY_PROJ_WIND_REG_MWH', 'TR_GLOBAL_SALES_PROJ_EV'.
        :type metric_codes: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1RetrieveClimateMetadataResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'metric_type',
            'vnd_com_blackrock_channel',
            'metric_codes'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method climate_api_retrieve_climate_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('metric_type') is not None:  # noqa: E501
            _query_params.append(('metricType', _params['metric_type'].value))

        if _params.get('metric_codes') is not None:  # noqa: E501
            _query_params.append(('metricCodes', _params['metric_codes']))
            _collection_formats['metricCodes'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1RetrieveClimateMetadataResponse",
            '400': "ClimateAPIRetrieveClimateDataAsOfDate400Response",
            '401': "ClimateAPIRetrieveClimateDataAsOfDate400Response",
            '403': "ClimateAPIRetrieveClimateDataAsOfDate400Response",
            '404': "ClimateAPIRetrieveClimateDataAsOfDate400Response",
        }

        return self.api_client.call_api(
            '/metadata:retrieve', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
