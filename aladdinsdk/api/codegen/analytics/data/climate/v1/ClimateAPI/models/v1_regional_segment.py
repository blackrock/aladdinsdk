# coding: utf-8

"""
    Climate

    The Aladdin Climate Data API exposes physical, transition, and temperature alignment analytics as of a given date. Users can retrieve data for selected entity types by specifying the desired datapoints for each climate risk type and scenario. The Aladdin Climate Meta Data API outlines the datapoints available across physical, transition, and temperature alignment analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.climatev1_segment import Climatev1Segment
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.types_analytic_data_value import TypesAnalyticDataValue

class V1RegionalSegment(BaseModel):
    """
    V1RegionalSegment
    """
    segment: Optional[Climatev1Segment] = None
    region: Optional[StrictStr] = None
    value: Optional[TypesAnalyticDataValue] = None
    __properties = ["segment", "region", "value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RegionalSegment:
        """Create an instance of V1RegionalSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RegionalSegment:
        """Create an instance of V1RegionalSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RegionalSegment.parse_obj(obj)

        _obj = V1RegionalSegment.parse_obj({
            "segment": Climatev1Segment.from_dict(obj.get("segment")) if obj.get("segment") is not None else None,
            "region": obj.get("region"),
            "value": TypesAnalyticDataValue.from_dict(obj.get("value")) if obj.get("value") is not None else None
        })
        return _obj

