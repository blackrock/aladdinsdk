# coding: utf-8

"""
    Climate

    The Aladdin Climate Data API exposes physical, transition, and temperature alignment analytics as of a given date. Users can retrieve data for selected entity types by specifying the desired datapoints for each climate risk type and scenario. The Aladdin Climate Meta Data API outlines the datapoints available across physical, transition, and temperature alignment analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.analytics.data.climate.v1.ClimateAPI.models.v1_climate_common_metrics import V1ClimateCommonMetrics

class V1ClimateCommonDataSet(BaseModel):
    """
    V1ClimateCommonDataSet
    """
    as_of_date: Optional[date] = Field(None, alias="asOfDate")
    metrics: Optional[conlist(V1ClimateCommonMetrics)] = None
    __properties = ["asOfDate", "metrics"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ClimateCommonDataSet:
        """Create an instance of V1ClimateCommonDataSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item in self.metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ClimateCommonDataSet:
        """Create an instance of V1ClimateCommonDataSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ClimateCommonDataSet.parse_obj(obj)

        _obj = V1ClimateCommonDataSet.parse_obj({
            "as_of_date": obj.get("asOfDate"),
            "metrics": [V1ClimateCommonMetrics.from_dict(_item) for _item in obj.get("metrics")] if obj.get("metrics") is not None else None
        })
        return _obj

