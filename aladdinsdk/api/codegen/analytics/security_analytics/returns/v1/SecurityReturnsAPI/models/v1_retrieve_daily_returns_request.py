# coding: utf-8

"""
    Security Returns

    Retrieve daily time-series of security level returns  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class V1RetrieveDailyReturnsRequest(BaseModel):
    """
    V1RetrieveDailyReturnsRequest
    """
    asset_ids: conlist(StrictStr) = Field(..., alias="assetIds", description="The name/ids of the asset to Retrieve the DailySecurityReturnsSeries.")
    price_hierarchy: StrictStr = Field(..., alias="priceHierarchy")
    start_date: date = Field(..., alias="startDate")
    end_date: date = Field(..., alias="endDate")
    page_size: Optional[StrictInt] = Field(None, alias="pageSize", description="Maximum number of securities for which data will be returned in each response. If unspecified, data for at most 1,000 securities will be returned  in a single response. The maximum value is 1,000; values above 1,000 will be coerced to 1,000.")
    page_token: Optional[StrictStr] = Field(None, alias="pageToken", description="A page token, received from a previous `RetrieveDailyReturnsRequest` call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to `RetrieveDailyReturnsRequest` must match the call that provided the page token.")
    __properties = ["assetIds", "priceHierarchy", "startDate", "endDate", "pageSize", "pageToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RetrieveDailyReturnsRequest:
        """Create an instance of V1RetrieveDailyReturnsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RetrieveDailyReturnsRequest:
        """Create an instance of V1RetrieveDailyReturnsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RetrieveDailyReturnsRequest.parse_obj(obj)

        _obj = V1RetrieveDailyReturnsRequest.parse_obj({
            "asset_ids": obj.get("assetIds"),
            "price_hierarchy": obj.get("priceHierarchy"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "page_size": obj.get("pageSize"),
            "page_token": obj.get("pageToken")
        })
        return _obj

