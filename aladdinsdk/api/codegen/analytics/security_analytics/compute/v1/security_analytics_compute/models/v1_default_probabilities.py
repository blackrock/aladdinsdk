# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt

class V1DefaultProbabilities(BaseModel):
    """
    V1DefaultProbabilities
    """
    value1y: Optional[Union[StrictFloat, StrictInt]] = None
    value2y: Optional[Union[StrictFloat, StrictInt]] = None
    value3y: Optional[Union[StrictFloat, StrictInt]] = None
    value4y: Optional[Union[StrictFloat, StrictInt]] = None
    value5y: Optional[Union[StrictFloat, StrictInt]] = None
    value7y: Optional[Union[StrictFloat, StrictInt]] = None
    value10y: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["value1y", "value2y", "value3y", "value4y", "value5y", "value7y", "value10y"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1DefaultProbabilities:
        """Create an instance of V1DefaultProbabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1DefaultProbabilities:
        """Create an instance of V1DefaultProbabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1DefaultProbabilities.parse_obj(obj)

        _obj = V1DefaultProbabilities.parse_obj({
            "value1y": obj.get("value1y"),
            "value2y": obj.get("value2y"),
            "value3y": obj.get("value3y"),
            "value4y": obj.get("value4y"),
            "value5y": obj.get("value5y"),
            "value7y": obj.get("value7y"),
            "value10y": obj.get("value10y")
        })
        return _obj

