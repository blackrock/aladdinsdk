# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1SecurityIndicativeInfo(BaseModel):
    """
    V1SecurityIndicativeInfo
    """
    asset_id: StrictStr = Field(..., alias="assetId")
    security_description: Optional[StrictStr] = Field(None, alias="securityDescription")
    security_type: Optional[StrictStr] = Field(None, alias="securityType")
    maturity_date: Optional[date] = Field(None, alias="maturityDate")
    issue_country_code: Optional[StrictStr] = Field(None, alias="issueCountryCode")
    market_country_code: Optional[StrictStr] = Field(None, alias="marketCountryCode")
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    ticker: Optional[StrictStr] = None
    risk_country_code: Optional[StrictStr] = Field(None, alias="riskCountryCode")
    security_group: Optional[StrictStr] = Field(None, alias="securityGroup")
    __properties = ["assetId", "securityDescription", "securityType", "maturityDate", "issueCountryCode", "marketCountryCode", "currencyCode", "ticker", "riskCountryCode", "securityGroup"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SecurityIndicativeInfo:
        """Create an instance of V1SecurityIndicativeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SecurityIndicativeInfo:
        """Create an instance of V1SecurityIndicativeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SecurityIndicativeInfo.parse_obj(obj)

        _obj = V1SecurityIndicativeInfo.parse_obj({
            "asset_id": obj.get("assetId"),
            "security_description": obj.get("securityDescription"),
            "security_type": obj.get("securityType"),
            "maturity_date": obj.get("maturityDate"),
            "issue_country_code": obj.get("issueCountryCode"),
            "market_country_code": obj.get("marketCountryCode"),
            "currency_code": obj.get("currencyCode"),
            "ticker": obj.get("ticker"),
            "risk_country_code": obj.get("riskCountryCode"),
            "security_group": obj.get("securityGroup")
        })
        return _obj

