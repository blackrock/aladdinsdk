# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class V1SwapLegAnalyticSet(BaseModel):
    """
    V1SwapLegAnalyticSet
    """
    market_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="marketPrice")
    market_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="marketValue")
    accrued_interest: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="accruedInterest")
    accrued_interest_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="accruedInterestDollarValue")
    yield_to_maturity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="yieldToMaturity")
    oad: Optional[Union[StrictFloat, StrictInt]] = None
    oad_dv01: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="oadDv01")
    oac: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["marketPrice", "marketValue", "accruedInterest", "accruedInterestDollarValue", "yieldToMaturity", "oad", "oadDv01", "oac"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SwapLegAnalyticSet:
        """Create an instance of V1SwapLegAnalyticSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SwapLegAnalyticSet:
        """Create an instance of V1SwapLegAnalyticSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SwapLegAnalyticSet.parse_obj(obj)

        _obj = V1SwapLegAnalyticSet.parse_obj({
            "market_price": obj.get("marketPrice"),
            "market_value": obj.get("marketValue"),
            "accrued_interest": obj.get("accruedInterest"),
            "accrued_interest_dollar_value": obj.get("accruedInterestDollarValue"),
            "yield_to_maturity": obj.get("yieldToMaturity"),
            "oad": obj.get("oad"),
            "oad_dv01": obj.get("oadDv01"),
            "oac": obj.get("oac")
        })
        return _obj

