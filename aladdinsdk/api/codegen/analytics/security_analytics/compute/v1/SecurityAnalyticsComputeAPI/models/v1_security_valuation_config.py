# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_collateral_dials_config import V1CollateralDialsConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_collateral_overrides_config import V1CollateralOverridesConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_default_model_config import V1DefaultModelConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_delinquency_model_config import V1DelinquencyModelConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_discount_curve_config import V1DiscountCurveConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_economy_config import V1EconomyConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_face_amount_config import V1FaceAmountConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_hpa_model_config import V1HPAModelConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_inflation_config import V1InflationConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_interest_rate_model_config import V1InterestRateModelConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_interest_rate_scenario import V1InterestRateScenario
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_interest_rate_shock import V1InterestRateShock
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_loss_severity_model_config import V1LossSeverityModelConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_model_suite_config import V1ModelSuiteConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_mortgage_rate_model_config import V1MortgageRateModelConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_prepayment_model_config import V1PrepaymentModelConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_pricing_config import V1PricingConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_settlement_config import V1SettlementConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_shock_type import V1ShockType
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_simulation_config import V1SimulationConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_unemployment_model_config import V1UnemploymentModelConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_valuation_mode_config import V1ValuationModeConfig

class V1SecurityValuationConfig(BaseModel):
    """
    V1SecurityValuationConfig
    """
    valuation_mode_config: Optional[V1ValuationModeConfig] = Field(None, alias="valuationModeConfig")
    analysis_date: date = Field(..., alias="analysisDate")
    face_config: Optional[V1FaceAmountConfig] = Field(None, alias="faceConfig")
    economy_config: Optional[V1EconomyConfig] = Field(None, alias="economyConfig")
    settlement_config: Optional[V1SettlementConfig] = Field(None, alias="settlementConfig")
    interest_rate_scenario: Optional[V1InterestRateScenario] = Field(None, alias="interestRateScenario")
    interest_rate_model_config: Optional[V1InterestRateModelConfig] = Field(None, alias="interestRateModelConfig")
    valuation_method: Optional[StrictStr] = Field(None, alias="valuationMethod")
    discount_curve_config: Optional[V1DiscountCurveConfig] = Field(None, alias="discountCurveConfig")
    interest_rate_shock: Optional[V1InterestRateShock] = Field(None, alias="interestRateShock")
    model_suite_config: Optional[V1ModelSuiteConfig] = Field(None, alias="modelSuiteConfig")
    prepayment_model_config: Optional[V1PrepaymentModelConfig] = Field(None, alias="prepaymentModelConfig")
    default_model_config: Optional[V1DefaultModelConfig] = Field(None, alias="defaultModelConfig")
    delinquency_model_config: Optional[V1DelinquencyModelConfig] = Field(None, alias="delinquencyModelConfig")
    loss_severity_model_config: Optional[V1LossSeverityModelConfig] = Field(None, alias="lossSeverityModelConfig")
    collateral_overrides_config: Optional[V1CollateralOverridesConfig] = Field(None, alias="collateralOverridesConfig")
    pricing_config: Optional[V1PricingConfig] = Field(None, alias="pricingConfig")
    underlying_level: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="underlyingLevel")
    hpa_model_config: Optional[V1HPAModelConfig] = Field(None, alias="hpaModelConfig")
    unemployment_model_config: Optional[V1UnemploymentModelConfig] = Field(None, alias="unemploymentModelConfig")
    mortgage_rate_model_config: Optional[V1MortgageRateModelConfig] = Field(None, alias="mortgageRateModelConfig")
    inflation_config: Optional[V1InflationConfig] = Field(None, alias="inflationConfig")
    dollar_value_currency_code: Optional[StrictStr] = Field(None, alias="dollarValueCurrencyCode")
    simulation_config: Optional[V1SimulationConfig] = Field(None, alias="simulationConfig")
    collateral_dials_config: Optional[V1CollateralDialsConfig] = Field(None, alias="collateralDialsConfig")
    shock_type: Optional[V1ShockType] = Field(None, alias="shockType")
    __properties = ["valuationModeConfig", "analysisDate", "faceConfig", "economyConfig", "settlementConfig", "interestRateScenario", "interestRateModelConfig", "valuationMethod", "discountCurveConfig", "interestRateShock", "modelSuiteConfig", "prepaymentModelConfig", "defaultModelConfig", "delinquencyModelConfig", "lossSeverityModelConfig", "collateralOverridesConfig", "pricingConfig", "underlyingLevel", "hpaModelConfig", "unemploymentModelConfig", "mortgageRateModelConfig", "inflationConfig", "dollarValueCurrencyCode", "simulationConfig", "collateralDialsConfig", "shockType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SecurityValuationConfig:
        """Create an instance of V1SecurityValuationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of valuation_mode_config
        if self.valuation_mode_config:
            _dict['valuationModeConfig'] = self.valuation_mode_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_config
        if self.face_config:
            _dict['faceConfig'] = self.face_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of economy_config
        if self.economy_config:
            _dict['economyConfig'] = self.economy_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settlement_config
        if self.settlement_config:
            _dict['settlementConfig'] = self.settlement_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_rate_model_config
        if self.interest_rate_model_config:
            _dict['interestRateModelConfig'] = self.interest_rate_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount_curve_config
        if self.discount_curve_config:
            _dict['discountCurveConfig'] = self.discount_curve_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_rate_shock
        if self.interest_rate_shock:
            _dict['interestRateShock'] = self.interest_rate_shock.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_suite_config
        if self.model_suite_config:
            _dict['modelSuiteConfig'] = self.model_suite_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prepayment_model_config
        if self.prepayment_model_config:
            _dict['prepaymentModelConfig'] = self.prepayment_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_model_config
        if self.default_model_config:
            _dict['defaultModelConfig'] = self.default_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delinquency_model_config
        if self.delinquency_model_config:
            _dict['delinquencyModelConfig'] = self.delinquency_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loss_severity_model_config
        if self.loss_severity_model_config:
            _dict['lossSeverityModelConfig'] = self.loss_severity_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collateral_overrides_config
        if self.collateral_overrides_config:
            _dict['collateralOverridesConfig'] = self.collateral_overrides_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing_config
        if self.pricing_config:
            _dict['pricingConfig'] = self.pricing_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hpa_model_config
        if self.hpa_model_config:
            _dict['hpaModelConfig'] = self.hpa_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unemployment_model_config
        if self.unemployment_model_config:
            _dict['unemploymentModelConfig'] = self.unemployment_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mortgage_rate_model_config
        if self.mortgage_rate_model_config:
            _dict['mortgageRateModelConfig'] = self.mortgage_rate_model_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inflation_config
        if self.inflation_config:
            _dict['inflationConfig'] = self.inflation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simulation_config
        if self.simulation_config:
            _dict['simulationConfig'] = self.simulation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collateral_dials_config
        if self.collateral_dials_config:
            _dict['collateralDialsConfig'] = self.collateral_dials_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SecurityValuationConfig:
        """Create an instance of V1SecurityValuationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SecurityValuationConfig.parse_obj(obj)

        _obj = V1SecurityValuationConfig.parse_obj({
            "valuation_mode_config": V1ValuationModeConfig.from_dict(obj.get("valuationModeConfig")) if obj.get("valuationModeConfig") is not None else None,
            "analysis_date": obj.get("analysisDate"),
            "face_config": V1FaceAmountConfig.from_dict(obj.get("faceConfig")) if obj.get("faceConfig") is not None else None,
            "economy_config": V1EconomyConfig.from_dict(obj.get("economyConfig")) if obj.get("economyConfig") is not None else None,
            "settlement_config": V1SettlementConfig.from_dict(obj.get("settlementConfig")) if obj.get("settlementConfig") is not None else None,
            "interest_rate_scenario": obj.get("interestRateScenario"),
            "interest_rate_model_config": V1InterestRateModelConfig.from_dict(obj.get("interestRateModelConfig")) if obj.get("interestRateModelConfig") is not None else None,
            "valuation_method": obj.get("valuationMethod"),
            "discount_curve_config": V1DiscountCurveConfig.from_dict(obj.get("discountCurveConfig")) if obj.get("discountCurveConfig") is not None else None,
            "interest_rate_shock": V1InterestRateShock.from_dict(obj.get("interestRateShock")) if obj.get("interestRateShock") is not None else None,
            "model_suite_config": V1ModelSuiteConfig.from_dict(obj.get("modelSuiteConfig")) if obj.get("modelSuiteConfig") is not None else None,
            "prepayment_model_config": V1PrepaymentModelConfig.from_dict(obj.get("prepaymentModelConfig")) if obj.get("prepaymentModelConfig") is not None else None,
            "default_model_config": V1DefaultModelConfig.from_dict(obj.get("defaultModelConfig")) if obj.get("defaultModelConfig") is not None else None,
            "delinquency_model_config": V1DelinquencyModelConfig.from_dict(obj.get("delinquencyModelConfig")) if obj.get("delinquencyModelConfig") is not None else None,
            "loss_severity_model_config": V1LossSeverityModelConfig.from_dict(obj.get("lossSeverityModelConfig")) if obj.get("lossSeverityModelConfig") is not None else None,
            "collateral_overrides_config": V1CollateralOverridesConfig.from_dict(obj.get("collateralOverridesConfig")) if obj.get("collateralOverridesConfig") is not None else None,
            "pricing_config": V1PricingConfig.from_dict(obj.get("pricingConfig")) if obj.get("pricingConfig") is not None else None,
            "underlying_level": obj.get("underlyingLevel"),
            "hpa_model_config": V1HPAModelConfig.from_dict(obj.get("hpaModelConfig")) if obj.get("hpaModelConfig") is not None else None,
            "unemployment_model_config": V1UnemploymentModelConfig.from_dict(obj.get("unemploymentModelConfig")) if obj.get("unemploymentModelConfig") is not None else None,
            "mortgage_rate_model_config": V1MortgageRateModelConfig.from_dict(obj.get("mortgageRateModelConfig")) if obj.get("mortgageRateModelConfig") is not None else None,
            "inflation_config": V1InflationConfig.from_dict(obj.get("inflationConfig")) if obj.get("inflationConfig") is not None else None,
            "dollar_value_currency_code": obj.get("dollarValueCurrencyCode"),
            "simulation_config": V1SimulationConfig.from_dict(obj.get("simulationConfig")) if obj.get("simulationConfig") is not None else None,
            "collateral_dials_config": V1CollateralDialsConfig.from_dict(obj.get("collateralDialsConfig")) if obj.get("collateralDialsConfig") is not None else None,
            "shock_type": obj.get("shockType")
        })
        return _obj

