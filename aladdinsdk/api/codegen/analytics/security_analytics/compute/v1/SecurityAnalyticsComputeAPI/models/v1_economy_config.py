# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.economy_config_economy_type import EconomyConfigEconomyType

class V1EconomyConfig(BaseModel):
    """
    V1EconomyConfig
    """
    economy_type: Optional[EconomyConfigEconomyType] = Field(None, alias="economyType")
    economy_date: Optional[date] = Field(None, alias="economyDate")
    utc_intra_day_time: Optional[datetime] = Field(None, alias="utcIntraDayTime")
    use4pm_economy: Optional[StrictBool] = Field(None, alias="use4pmEconomy")
    __properties = ["economyType", "economyDate", "utcIntraDayTime", "use4pmEconomy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1EconomyConfig:
        """Create an instance of V1EconomyConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1EconomyConfig:
        """Create an instance of V1EconomyConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1EconomyConfig.parse_obj(obj)

        _obj = V1EconomyConfig.parse_obj({
            "economy_type": obj.get("economyType"),
            "economy_date": obj.get("economyDate"),
            "utc_intra_day_time": obj.get("utcIntraDayTime"),
            "use4pm_economy": obj.get("use4pmEconomy")
        })
        return _obj

