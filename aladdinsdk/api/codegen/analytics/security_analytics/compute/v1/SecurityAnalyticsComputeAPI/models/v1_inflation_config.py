# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.inflation_config_inflation_projection_type import InflationConfigInflationProjectionType
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_shock_input import V1ShockInput

class V1InflationConfig(BaseModel):
    """
    V1InflationConfig
    """
    inflation_shock: Optional[V1ShockInput] = Field(None, alias="inflationShock")
    projection_type: Optional[InflationConfigInflationProjectionType] = Field(None, alias="projectionType")
    constant_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="constantRate")
    __properties = ["inflationShock", "projectionType", "constantRate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1InflationConfig:
        """Create an instance of V1InflationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of inflation_shock
        if self.inflation_shock:
            _dict['inflationShock'] = self.inflation_shock.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1InflationConfig:
        """Create an instance of V1InflationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1InflationConfig.parse_obj(obj)

        _obj = V1InflationConfig.parse_obj({
            "inflation_shock": V1ShockInput.from_dict(obj.get("inflationShock")) if obj.get("inflationShock") is not None else None,
            "projection_type": obj.get("projectionType"),
            "constant_rate": obj.get("constantRate")
        })
        return _obj

