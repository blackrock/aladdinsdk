# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_scenario_analytics_request_config import V1ScenarioAnalyticsRequestConfig
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_scenario_analytics_result_set import V1ScenarioAnalyticsResultSet
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_security_indicative_info import V1SecurityIndicativeInfo
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_security_valuation_config import V1SecurityValuationConfig

class V1ComputeScenarioAnalyticsResponse(BaseModel):
    """
    V1ComputeScenarioAnalyticsResponse
    """
    asset_info: Optional[V1SecurityIndicativeInfo] = Field(None, alias="assetInfo")
    valuation_config: Optional[V1SecurityValuationConfig] = Field(None, alias="valuationConfig")
    scenario_analytics_request_config: Optional[V1ScenarioAnalyticsRequestConfig] = Field(None, alias="scenarioAnalyticsRequestConfig")
    scenario_analytics_result_sets: conlist(V1ScenarioAnalyticsResultSet) = Field(..., alias="scenarioAnalyticsResultSets")
    __properties = ["assetInfo", "valuationConfig", "scenarioAnalyticsRequestConfig", "scenarioAnalyticsResultSets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ComputeScenarioAnalyticsResponse:
        """Create an instance of V1ComputeScenarioAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of asset_info
        if self.asset_info:
            _dict['assetInfo'] = self.asset_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valuation_config
        if self.valuation_config:
            _dict['valuationConfig'] = self.valuation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scenario_analytics_request_config
        if self.scenario_analytics_request_config:
            _dict['scenarioAnalyticsRequestConfig'] = self.scenario_analytics_request_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in scenario_analytics_result_sets (list)
        _items = []
        if self.scenario_analytics_result_sets:
            for _item in self.scenario_analytics_result_sets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scenarioAnalyticsResultSets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ComputeScenarioAnalyticsResponse:
        """Create an instance of V1ComputeScenarioAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ComputeScenarioAnalyticsResponse.parse_obj(obj)

        _obj = V1ComputeScenarioAnalyticsResponse.parse_obj({
            "asset_info": V1SecurityIndicativeInfo.from_dict(obj.get("assetInfo")) if obj.get("assetInfo") is not None else None,
            "valuation_config": V1SecurityValuationConfig.from_dict(obj.get("valuationConfig")) if obj.get("valuationConfig") is not None else None,
            "scenario_analytics_request_config": V1ScenarioAnalyticsRequestConfig.from_dict(obj.get("scenarioAnalyticsRequestConfig")) if obj.get("scenarioAnalyticsRequestConfig") is not None else None,
            "scenario_analytics_result_sets": [V1ScenarioAnalyticsResultSet.from_dict(_item) for _item in obj.get("scenarioAnalyticsResultSets")] if obj.get("scenarioAnalyticsResultSets") is not None else None
        })
        return _obj

