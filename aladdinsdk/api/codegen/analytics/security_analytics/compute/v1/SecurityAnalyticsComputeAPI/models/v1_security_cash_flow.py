# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_collateral_level_projection import V1CollateralLevelProjection
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_swap_leg_cash_flow import V1SwapLegCashFlow

class V1SecurityCashFlow(BaseModel):
    """
    V1SecurityCashFlow
    """
    cashflow_date: Optional[date] = Field(None, alias="cashflowDate")
    cashflow: Optional[Union[StrictFloat, StrictInt]] = None
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    interest: Optional[Union[StrictFloat, StrictInt]] = None
    cpr: Optional[Union[StrictFloat, StrictInt]] = None
    smm: Optional[Union[StrictFloat, StrictInt]] = None
    scheduled_principal: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="scheduledPrincipal")
    unscheduled_principal: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="unscheduledPrincipal")
    loss: Optional[Union[StrictFloat, StrictInt]] = None
    pay_leg_value_set: Optional[V1SwapLegCashFlow] = Field(None, alias="payLegValueSet")
    receive_leg_value_set: Optional[V1SwapLegCashFlow] = Field(None, alias="receiveLegValueSet")
    collateral_level_projection_set: Optional[V1CollateralLevelProjection] = Field(None, alias="collateralLevelProjectionSet")
    __properties = ["cashflowDate", "cashflow", "balance", "principal", "interest", "cpr", "smm", "scheduledPrincipal", "unscheduledPrincipal", "loss", "payLegValueSet", "receiveLegValueSet", "collateralLevelProjectionSet"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SecurityCashFlow:
        """Create an instance of V1SecurityCashFlow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pay_leg_value_set
        if self.pay_leg_value_set:
            _dict['payLegValueSet'] = self.pay_leg_value_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receive_leg_value_set
        if self.receive_leg_value_set:
            _dict['receiveLegValueSet'] = self.receive_leg_value_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collateral_level_projection_set
        if self.collateral_level_projection_set:
            _dict['collateralLevelProjectionSet'] = self.collateral_level_projection_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SecurityCashFlow:
        """Create an instance of V1SecurityCashFlow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SecurityCashFlow.parse_obj(obj)

        _obj = V1SecurityCashFlow.parse_obj({
            "cashflow_date": obj.get("cashflowDate"),
            "cashflow": obj.get("cashflow"),
            "balance": obj.get("balance"),
            "principal": obj.get("principal"),
            "interest": obj.get("interest"),
            "cpr": obj.get("cpr"),
            "smm": obj.get("smm"),
            "scheduled_principal": obj.get("scheduledPrincipal"),
            "unscheduled_principal": obj.get("unscheduledPrincipal"),
            "loss": obj.get("loss"),
            "pay_leg_value_set": V1SwapLegCashFlow.from_dict(obj.get("payLegValueSet")) if obj.get("payLegValueSet") is not None else None,
            "receive_leg_value_set": V1SwapLegCashFlow.from_dict(obj.get("receiveLegValueSet")) if obj.get("receiveLegValueSet") is not None else None,
            "collateral_level_projection_set": V1CollateralLevelProjection.from_dict(obj.get("collateralLevelProjectionSet")) if obj.get("collateralLevelProjectionSet") is not None else None
        })
        return _obj

