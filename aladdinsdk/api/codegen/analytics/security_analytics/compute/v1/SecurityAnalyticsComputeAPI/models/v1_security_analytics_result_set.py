# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.types_projected_speed import TypesProjectedSpeed
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_default_probabilities import V1DefaultProbabilities
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_fx_analytic_set import V1FXAnalyticSet
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_greek_analytic_set import V1GreekAnalyticSet
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_key_rate_duration_set import V1KeyRateDurationSet
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_swap_leg_analytic_set import V1SwapLegAnalyticSet

class V1SecurityAnalyticsResultSet(BaseModel):
    """
    V1SecurityAnalyticsResultSet
    """
    market_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="marketPrice")
    market_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="marketValue")
    notional_market_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="notionalMarketValue")
    accrued_interest: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="accruedInterest")
    accrued_interest_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="accruedInterestDollarValue")
    yield_to_maturity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="yieldToMaturity")
    wal_to_maturity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="walToMaturity")
    modified_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="modifiedDuration")
    modified_duration_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="modifiedDurationDollarValue")
    modified_duration_dv01: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="modifiedDurationDv01")
    modified_convexity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="modifiedConvexity")
    spread_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="spreadDuration")
    spread_duration_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="spreadDurationDollarValue")
    spread_duration_dv01: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="spreadDurationDv01")
    spread_convexity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="spreadConvexity")
    oas: Optional[Union[StrictFloat, StrictInt]] = None
    oad: Optional[Union[StrictFloat, StrictInt]] = None
    oad_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="oadDollarValue")
    oad_dv01: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="oadDv01")
    oac: Optional[Union[StrictFloat, StrictInt]] = None
    model_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="modelDuration")
    model_convexity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="modelConvexity")
    interest_rate_krd_set: Optional[V1KeyRateDurationSet] = Field(None, alias="interestRateKrdSet")
    interest_rate_krd_dollar_value_set: Optional[V1KeyRateDurationSet] = Field(None, alias="interestRateKrdDollarValueSet")
    interest_rate_krd_dv01_set: Optional[V1KeyRateDurationSet] = Field(None, alias="interestRateKrdDv01Set")
    swap_pay_leg_analytic_set: Optional[V1SwapLegAnalyticSet] = Field(None, alias="swapPayLegAnalyticSet")
    swap_receive_leg_analytic_set: Optional[V1SwapLegAnalyticSet] = Field(None, alias="swapReceiveLegAnalyticSet")
    greek_analytic_set: Optional[V1GreekAnalyticSet] = Field(None, alias="greekAnalyticSet")
    greek_dollar_value_set: Optional[V1GreekAnalyticSet] = Field(None, alias="greekDollarValueSet")
    volatility: Optional[Union[StrictFloat, StrictInt]] = None
    normal_vol_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="normalVolDuration")
    normal_vol_duration_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="normalVolDurationDollarValue")
    lognormal_vol_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lognormalVolDuration")
    lognormal_vol_duration_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lognormalVolDurationDollarValue")
    fx_basis_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fxBasisDuration")
    ois_libor_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="oisLiborDuration")
    at_the_money_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="atTheMoneyRate")
    at_the_money_volatility: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="atTheMoneyVolatility")
    inflation_krd_set: Optional[V1KeyRateDurationSet] = Field(None, alias="inflationKrdSet")
    inflation_krd_dollar_value_set: Optional[V1KeyRateDurationSet] = Field(None, alias="inflationKrdDollarValueSet")
    inflation_krd_dv01_set: Optional[V1KeyRateDurationSet] = Field(None, alias="inflationKrdDv01Set")
    inflation_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="inflationDuration")
    inflation_duration_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="inflationDurationDollarValue")
    inflation_duration_dv01: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="inflationDurationDv01")
    inflation_convexity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="inflationConvexity")
    breakeven_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="breakevenRate")
    street_yield: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="streetYield")
    prepay_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="prepayDuration")
    mortgage_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="mortgageDuration")
    mortgage_rate_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="mortgageRateDuration")
    mortgage_treasury_basis_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="mortgageTreasuryBasisDuration")
    pss_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="pssDuration")
    wal_equiv_cpr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="walEquivCpr")
    wal_equiv_psa: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="walEquivPsa")
    wal_of_principal: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="walOfPrincipal")
    wal_of_interest: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="walOfInterest")
    wal_of_losses: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="walOfLosses")
    prepayment_speeds_set: Optional[TypesProjectedSpeed] = Field(None, alias="prepaymentSpeedsSet")
    default_speeds_set: Optional[TypesProjectedSpeed] = Field(None, alias="defaultSpeedsSet")
    delinquency_speeds_set: Optional[TypesProjectedSpeed] = Field(None, alias="delinquencySpeedsSet")
    loss_severity_speeds_set: Optional[TypesProjectedSpeed] = Field(None, alias="lossSeveritySpeedsSet")
    a_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="aSpread")
    e_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="eSpread")
    i_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="iSpread")
    j_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="jSpread")
    n_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="nSpread")
    z_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="zSpread")
    zvo: Optional[Union[StrictFloat, StrictInt]] = None
    zero_vol_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="zeroVolSpread")
    static_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="staticSpread")
    option_cost: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="optionCost")
    dxs: Optional[Union[StrictFloat, StrictInt]] = None
    option_adjusted_yield: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="optionAdjustedYield")
    oac_dollar_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="oacDollarValue")
    oac_cv01: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="oacCv01")
    default_probabilities_set: Optional[V1DefaultProbabilities] = Field(None, alias="defaultProbabilitiesSet")
    cds_spread_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cdsSpreadDuration")
    cds_spread_convexity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cdsSpreadConvexity")
    breakeven_cds_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="breakevenCdsSpread")
    recovery_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="recoveryRate")
    default_adjusted_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="defaultAdjustedSpread")
    default_adjusted_yield: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="defaultAdjustedYield")
    default_adjusted_duration: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="defaultAdjustedDuration")
    default_adjusted_convexity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="defaultAdjustedConvexity")
    cds_implied_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cdsImpliedPrice")
    cds_market_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cdsMarketSpread")
    interest_shortfall: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="interestShortfall")
    principal_loss: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="principalLoss")
    cumulative_loss_pct: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cumulativeLossPct")
    remaining_loss_pct: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="remainingLossPct")
    remaining_liquidation_pct: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="remainingLiquidationPct")
    cumulative_loss_pct_cross_group: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cumulativeLossPctCrossGroup")
    remaining_loss_pct_cross_group: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="remainingLossPctCrossGroup")
    coverage_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="coverageRatio")
    wal_to_worst: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="walToWorst")
    yield_to_worst: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="yieldToWorst")
    pool_payup: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="poolPayup")
    fx_analytic_set: Optional[V1FXAnalyticSet] = Field(None, alias="fxAnalyticSet")
    yield_to_worst_date: Optional[date] = Field(None, alias="yieldToWorstDate")
    yield_to_call: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="yieldToCall")
    yield_to_call_date: Optional[date] = Field(None, alias="yieldToCallDate")
    yield_to_put: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="yieldToPut")
    yield_to_put_date: Optional[date] = Field(None, alias="yieldToPutDate")
    discount_margin: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="discountMargin")
    lowest_credit_enhancement: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lowestCreditEnhancement", description="The lowest credit enhancement percentage for the bond. The CE is the balance of subordinate tranches plus OC divided by the current deal balance.")
    lowest_credit_enhancement_date: Optional[date] = Field(None, alias="lowestCreditEnhancementDate", description="The date that the Lowest CE occurs.")
    cumulative_loss_cross_group: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cumulativeLossCrossGroup")
    remaining_liquidation_cross_group: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="remainingLiquidationCrossGroup")
    remaining_liquidation_pct_cross_group: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="remainingLiquidationPctCrossGroup")
    remaining_loss_cross_group: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="remainingLossCrossGroup")
    __properties = ["marketPrice", "marketValue", "notionalMarketValue", "accruedInterest", "accruedInterestDollarValue", "yieldToMaturity", "walToMaturity", "modifiedDuration", "modifiedDurationDollarValue", "modifiedDurationDv01", "modifiedConvexity", "spreadDuration", "spreadDurationDollarValue", "spreadDurationDv01", "spreadConvexity", "oas", "oad", "oadDollarValue", "oadDv01", "oac", "modelDuration", "modelConvexity", "interestRateKrdSet", "interestRateKrdDollarValueSet", "interestRateKrdDv01Set", "swapPayLegAnalyticSet", "swapReceiveLegAnalyticSet", "greekAnalyticSet", "greekDollarValueSet", "volatility", "normalVolDuration", "normalVolDurationDollarValue", "lognormalVolDuration", "lognormalVolDurationDollarValue", "fxBasisDuration", "oisLiborDuration", "atTheMoneyRate", "atTheMoneyVolatility", "inflationKrdSet", "inflationKrdDollarValueSet", "inflationKrdDv01Set", "inflationDuration", "inflationDurationDollarValue", "inflationDurationDv01", "inflationConvexity", "breakevenRate", "streetYield", "prepayDuration", "mortgageDuration", "mortgageRateDuration", "mortgageTreasuryBasisDuration", "pssDuration", "walEquivCpr", "walEquivPsa", "walOfPrincipal", "walOfInterest", "walOfLosses", "prepaymentSpeedsSet", "defaultSpeedsSet", "delinquencySpeedsSet", "lossSeveritySpeedsSet", "aSpread", "eSpread", "iSpread", "jSpread", "nSpread", "zSpread", "zvo", "zeroVolSpread", "staticSpread", "optionCost", "dxs", "optionAdjustedYield", "oacDollarValue", "oacCv01", "defaultProbabilitiesSet", "cdsSpreadDuration", "cdsSpreadConvexity", "breakevenCdsSpread", "recoveryRate", "defaultAdjustedSpread", "defaultAdjustedYield", "defaultAdjustedDuration", "defaultAdjustedConvexity", "cdsImpliedPrice", "cdsMarketSpread", "interestShortfall", "principalLoss", "cumulativeLossPct", "remainingLossPct", "remainingLiquidationPct", "cumulativeLossPctCrossGroup", "remainingLossPctCrossGroup", "coverageRatio", "walToWorst", "yieldToWorst", "poolPayup", "fxAnalyticSet", "yieldToWorstDate", "yieldToCall", "yieldToCallDate", "yieldToPut", "yieldToPutDate", "discountMargin", "lowestCreditEnhancement", "lowestCreditEnhancementDate", "cumulativeLossCrossGroup", "remainingLiquidationCrossGroup", "remainingLiquidationPctCrossGroup", "remainingLossCrossGroup"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SecurityAnalyticsResultSet:
        """Create an instance of V1SecurityAnalyticsResultSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of interest_rate_krd_set
        if self.interest_rate_krd_set:
            _dict['interestRateKrdSet'] = self.interest_rate_krd_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_rate_krd_dollar_value_set
        if self.interest_rate_krd_dollar_value_set:
            _dict['interestRateKrdDollarValueSet'] = self.interest_rate_krd_dollar_value_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interest_rate_krd_dv01_set
        if self.interest_rate_krd_dv01_set:
            _dict['interestRateKrdDv01Set'] = self.interest_rate_krd_dv01_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of swap_pay_leg_analytic_set
        if self.swap_pay_leg_analytic_set:
            _dict['swapPayLegAnalyticSet'] = self.swap_pay_leg_analytic_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of swap_receive_leg_analytic_set
        if self.swap_receive_leg_analytic_set:
            _dict['swapReceiveLegAnalyticSet'] = self.swap_receive_leg_analytic_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of greek_analytic_set
        if self.greek_analytic_set:
            _dict['greekAnalyticSet'] = self.greek_analytic_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of greek_dollar_value_set
        if self.greek_dollar_value_set:
            _dict['greekDollarValueSet'] = self.greek_dollar_value_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inflation_krd_set
        if self.inflation_krd_set:
            _dict['inflationKrdSet'] = self.inflation_krd_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inflation_krd_dollar_value_set
        if self.inflation_krd_dollar_value_set:
            _dict['inflationKrdDollarValueSet'] = self.inflation_krd_dollar_value_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inflation_krd_dv01_set
        if self.inflation_krd_dv01_set:
            _dict['inflationKrdDv01Set'] = self.inflation_krd_dv01_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prepayment_speeds_set
        if self.prepayment_speeds_set:
            _dict['prepaymentSpeedsSet'] = self.prepayment_speeds_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_speeds_set
        if self.default_speeds_set:
            _dict['defaultSpeedsSet'] = self.default_speeds_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delinquency_speeds_set
        if self.delinquency_speeds_set:
            _dict['delinquencySpeedsSet'] = self.delinquency_speeds_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loss_severity_speeds_set
        if self.loss_severity_speeds_set:
            _dict['lossSeveritySpeedsSet'] = self.loss_severity_speeds_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_probabilities_set
        if self.default_probabilities_set:
            _dict['defaultProbabilitiesSet'] = self.default_probabilities_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fx_analytic_set
        if self.fx_analytic_set:
            _dict['fxAnalyticSet'] = self.fx_analytic_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SecurityAnalyticsResultSet:
        """Create an instance of V1SecurityAnalyticsResultSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SecurityAnalyticsResultSet.parse_obj(obj)

        _obj = V1SecurityAnalyticsResultSet.parse_obj({
            "market_price": obj.get("marketPrice"),
            "market_value": obj.get("marketValue"),
            "notional_market_value": obj.get("notionalMarketValue"),
            "accrued_interest": obj.get("accruedInterest"),
            "accrued_interest_dollar_value": obj.get("accruedInterestDollarValue"),
            "yield_to_maturity": obj.get("yieldToMaturity"),
            "wal_to_maturity": obj.get("walToMaturity"),
            "modified_duration": obj.get("modifiedDuration"),
            "modified_duration_dollar_value": obj.get("modifiedDurationDollarValue"),
            "modified_duration_dv01": obj.get("modifiedDurationDv01"),
            "modified_convexity": obj.get("modifiedConvexity"),
            "spread_duration": obj.get("spreadDuration"),
            "spread_duration_dollar_value": obj.get("spreadDurationDollarValue"),
            "spread_duration_dv01": obj.get("spreadDurationDv01"),
            "spread_convexity": obj.get("spreadConvexity"),
            "oas": obj.get("oas"),
            "oad": obj.get("oad"),
            "oad_dollar_value": obj.get("oadDollarValue"),
            "oad_dv01": obj.get("oadDv01"),
            "oac": obj.get("oac"),
            "model_duration": obj.get("modelDuration"),
            "model_convexity": obj.get("modelConvexity"),
            "interest_rate_krd_set": V1KeyRateDurationSet.from_dict(obj.get("interestRateKrdSet")) if obj.get("interestRateKrdSet") is not None else None,
            "interest_rate_krd_dollar_value_set": V1KeyRateDurationSet.from_dict(obj.get("interestRateKrdDollarValueSet")) if obj.get("interestRateKrdDollarValueSet") is not None else None,
            "interest_rate_krd_dv01_set": V1KeyRateDurationSet.from_dict(obj.get("interestRateKrdDv01Set")) if obj.get("interestRateKrdDv01Set") is not None else None,
            "swap_pay_leg_analytic_set": V1SwapLegAnalyticSet.from_dict(obj.get("swapPayLegAnalyticSet")) if obj.get("swapPayLegAnalyticSet") is not None else None,
            "swap_receive_leg_analytic_set": V1SwapLegAnalyticSet.from_dict(obj.get("swapReceiveLegAnalyticSet")) if obj.get("swapReceiveLegAnalyticSet") is not None else None,
            "greek_analytic_set": V1GreekAnalyticSet.from_dict(obj.get("greekAnalyticSet")) if obj.get("greekAnalyticSet") is not None else None,
            "greek_dollar_value_set": V1GreekAnalyticSet.from_dict(obj.get("greekDollarValueSet")) if obj.get("greekDollarValueSet") is not None else None,
            "volatility": obj.get("volatility"),
            "normal_vol_duration": obj.get("normalVolDuration"),
            "normal_vol_duration_dollar_value": obj.get("normalVolDurationDollarValue"),
            "lognormal_vol_duration": obj.get("lognormalVolDuration"),
            "lognormal_vol_duration_dollar_value": obj.get("lognormalVolDurationDollarValue"),
            "fx_basis_duration": obj.get("fxBasisDuration"),
            "ois_libor_duration": obj.get("oisLiborDuration"),
            "at_the_money_rate": obj.get("atTheMoneyRate"),
            "at_the_money_volatility": obj.get("atTheMoneyVolatility"),
            "inflation_krd_set": V1KeyRateDurationSet.from_dict(obj.get("inflationKrdSet")) if obj.get("inflationKrdSet") is not None else None,
            "inflation_krd_dollar_value_set": V1KeyRateDurationSet.from_dict(obj.get("inflationKrdDollarValueSet")) if obj.get("inflationKrdDollarValueSet") is not None else None,
            "inflation_krd_dv01_set": V1KeyRateDurationSet.from_dict(obj.get("inflationKrdDv01Set")) if obj.get("inflationKrdDv01Set") is not None else None,
            "inflation_duration": obj.get("inflationDuration"),
            "inflation_duration_dollar_value": obj.get("inflationDurationDollarValue"),
            "inflation_duration_dv01": obj.get("inflationDurationDv01"),
            "inflation_convexity": obj.get("inflationConvexity"),
            "breakeven_rate": obj.get("breakevenRate"),
            "street_yield": obj.get("streetYield"),
            "prepay_duration": obj.get("prepayDuration"),
            "mortgage_duration": obj.get("mortgageDuration"),
            "mortgage_rate_duration": obj.get("mortgageRateDuration"),
            "mortgage_treasury_basis_duration": obj.get("mortgageTreasuryBasisDuration"),
            "pss_duration": obj.get("pssDuration"),
            "wal_equiv_cpr": obj.get("walEquivCpr"),
            "wal_equiv_psa": obj.get("walEquivPsa"),
            "wal_of_principal": obj.get("walOfPrincipal"),
            "wal_of_interest": obj.get("walOfInterest"),
            "wal_of_losses": obj.get("walOfLosses"),
            "prepayment_speeds_set": TypesProjectedSpeed.from_dict(obj.get("prepaymentSpeedsSet")) if obj.get("prepaymentSpeedsSet") is not None else None,
            "default_speeds_set": TypesProjectedSpeed.from_dict(obj.get("defaultSpeedsSet")) if obj.get("defaultSpeedsSet") is not None else None,
            "delinquency_speeds_set": TypesProjectedSpeed.from_dict(obj.get("delinquencySpeedsSet")) if obj.get("delinquencySpeedsSet") is not None else None,
            "loss_severity_speeds_set": TypesProjectedSpeed.from_dict(obj.get("lossSeveritySpeedsSet")) if obj.get("lossSeveritySpeedsSet") is not None else None,
            "a_spread": obj.get("aSpread"),
            "e_spread": obj.get("eSpread"),
            "i_spread": obj.get("iSpread"),
            "j_spread": obj.get("jSpread"),
            "n_spread": obj.get("nSpread"),
            "z_spread": obj.get("zSpread"),
            "zvo": obj.get("zvo"),
            "zero_vol_spread": obj.get("zeroVolSpread"),
            "static_spread": obj.get("staticSpread"),
            "option_cost": obj.get("optionCost"),
            "dxs": obj.get("dxs"),
            "option_adjusted_yield": obj.get("optionAdjustedYield"),
            "oac_dollar_value": obj.get("oacDollarValue"),
            "oac_cv01": obj.get("oacCv01"),
            "default_probabilities_set": V1DefaultProbabilities.from_dict(obj.get("defaultProbabilitiesSet")) if obj.get("defaultProbabilitiesSet") is not None else None,
            "cds_spread_duration": obj.get("cdsSpreadDuration"),
            "cds_spread_convexity": obj.get("cdsSpreadConvexity"),
            "breakeven_cds_spread": obj.get("breakevenCdsSpread"),
            "recovery_rate": obj.get("recoveryRate"),
            "default_adjusted_spread": obj.get("defaultAdjustedSpread"),
            "default_adjusted_yield": obj.get("defaultAdjustedYield"),
            "default_adjusted_duration": obj.get("defaultAdjustedDuration"),
            "default_adjusted_convexity": obj.get("defaultAdjustedConvexity"),
            "cds_implied_price": obj.get("cdsImpliedPrice"),
            "cds_market_spread": obj.get("cdsMarketSpread"),
            "interest_shortfall": obj.get("interestShortfall"),
            "principal_loss": obj.get("principalLoss"),
            "cumulative_loss_pct": obj.get("cumulativeLossPct"),
            "remaining_loss_pct": obj.get("remainingLossPct"),
            "remaining_liquidation_pct": obj.get("remainingLiquidationPct"),
            "cumulative_loss_pct_cross_group": obj.get("cumulativeLossPctCrossGroup"),
            "remaining_loss_pct_cross_group": obj.get("remainingLossPctCrossGroup"),
            "coverage_ratio": obj.get("coverageRatio"),
            "wal_to_worst": obj.get("walToWorst"),
            "yield_to_worst": obj.get("yieldToWorst"),
            "pool_payup": obj.get("poolPayup"),
            "fx_analytic_set": V1FXAnalyticSet.from_dict(obj.get("fxAnalyticSet")) if obj.get("fxAnalyticSet") is not None else None,
            "yield_to_worst_date": obj.get("yieldToWorstDate"),
            "yield_to_call": obj.get("yieldToCall"),
            "yield_to_call_date": obj.get("yieldToCallDate"),
            "yield_to_put": obj.get("yieldToPut"),
            "yield_to_put_date": obj.get("yieldToPutDate"),
            "discount_margin": obj.get("discountMargin"),
            "lowest_credit_enhancement": obj.get("lowestCreditEnhancement"),
            "lowest_credit_enhancement_date": obj.get("lowestCreditEnhancementDate"),
            "cumulative_loss_cross_group": obj.get("cumulativeLossCrossGroup"),
            "remaining_liquidation_cross_group": obj.get("remainingLiquidationCrossGroup"),
            "remaining_liquidation_pct_cross_group": obj.get("remainingLiquidationPctCrossGroup"),
            "remaining_loss_cross_group": obj.get("remainingLossCrossGroup")
        })
        return _obj

