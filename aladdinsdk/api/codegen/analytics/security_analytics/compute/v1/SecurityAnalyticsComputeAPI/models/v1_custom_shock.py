# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt

class V1CustomShock(BaseModel):
    """
    V1CustomShock
    """
    tenor3m: Optional[Union[StrictFloat, StrictInt]] = None
    tenor1y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor2y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor3y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor5y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor7y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor10y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor15y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor20y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor25y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor30y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor40y: Optional[Union[StrictFloat, StrictInt]] = None
    tenor50y: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["tenor3m", "tenor1y", "tenor2y", "tenor3y", "tenor5y", "tenor7y", "tenor10y", "tenor15y", "tenor20y", "tenor25y", "tenor30y", "tenor40y", "tenor50y"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CustomShock:
        """Create an instance of V1CustomShock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CustomShock:
        """Create an instance of V1CustomShock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CustomShock.parse_obj(obj)

        _obj = V1CustomShock.parse_obj({
            "tenor3m": obj.get("tenor3m"),
            "tenor1y": obj.get("tenor1y"),
            "tenor2y": obj.get("tenor2y"),
            "tenor3y": obj.get("tenor3y"),
            "tenor5y": obj.get("tenor5y"),
            "tenor7y": obj.get("tenor7y"),
            "tenor10y": obj.get("tenor10y"),
            "tenor15y": obj.get("tenor15y"),
            "tenor20y": obj.get("tenor20y"),
            "tenor25y": obj.get("tenor25y"),
            "tenor30y": obj.get("tenor30y"),
            "tenor40y": obj.get("tenor40y"),
            "tenor50y": obj.get("tenor50y")
        })
        return _obj

