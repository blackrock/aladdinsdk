# coding: utf-8

"""
    Security Analytics Compute

    Compute security level analytics, cash flows and scenario analytics with custom valuation settings.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_security_analytics_result_set import V1SecurityAnalyticsResultSet
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_security_indicative_info import V1SecurityIndicativeInfo
from aladdinsdk.api.codegen.analytics.security_analytics.compute.v1.SecurityAnalyticsComputeAPI.models.v1_security_valuation_config import V1SecurityValuationConfig

class V1ComputeSecurityAnalyticsResponse(BaseModel):
    """
    V1ComputeSecurityAnalyticsResponse
    """
    asset_info: Optional[V1SecurityIndicativeInfo] = Field(None, alias="assetInfo")
    valuation_config: Optional[V1SecurityValuationConfig] = Field(None, alias="valuationConfig")
    analytics_result_set: Optional[V1SecurityAnalyticsResultSet] = Field(None, alias="analyticsResultSet")
    __properties = ["assetInfo", "valuationConfig", "analyticsResultSet"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ComputeSecurityAnalyticsResponse:
        """Create an instance of V1ComputeSecurityAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of asset_info
        if self.asset_info:
            _dict['assetInfo'] = self.asset_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valuation_config
        if self.valuation_config:
            _dict['valuationConfig'] = self.valuation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of analytics_result_set
        if self.analytics_result_set:
            _dict['analyticsResultSet'] = self.analytics_result_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ComputeSecurityAnalyticsResponse:
        """Create an instance of V1ComputeSecurityAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ComputeSecurityAnalyticsResponse.parse_obj(obj)

        _obj = V1ComputeSecurityAnalyticsResponse.parse_obj({
            "asset_info": V1SecurityIndicativeInfo.from_dict(obj.get("assetInfo")) if obj.get("assetInfo") is not None else None,
            "valuation_config": V1SecurityValuationConfig.from_dict(obj.get("valuationConfig")) if obj.get("valuationConfig") is not None else None,
            "analytics_result_set": V1SecurityAnalyticsResultSet.from_dict(obj.get("analyticsResultSet")) if obj.get("analyticsResultSet") is not None else None
        })
        return _obj

