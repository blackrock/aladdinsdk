# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_allow_purchase_outside_universe import V2AllowPurchaseOutsideUniverse
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_allow_short_position import V2AllowShortPosition
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_heuristic_model import V2HeuristicModel
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_treat_assets_without_risk import V2TreatAssetsWithoutRisk

class V2OptimizerControlParameter(BaseModel):
    """
    V2OptimizerControlParameter
    """
    allow_short_position: Optional[V2AllowShortPosition] = Field(None, alias="allowShortPosition")
    ignore_missing_tcost: Optional[StrictBool] = Field(None, alias="ignoreMissingTcost")
    mip_time_limit: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="mipTimeLimit")
    heuristic_model: Optional[V2HeuristicModel] = Field(None, alias="heuristicModel")
    cplex_param_barqcpepcomp: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="cplexParamBarqcpepcomp")
    allow_purchase_outside_universe: Optional[V2AllowPurchaseOutsideUniverse] = Field(None, alias="allowPurchaseOutsideUniverse")
    fully_invested: Optional[StrictBool] = Field(None, alias="fullyInvested")
    treat_assets_without_risk: Optional[V2TreatAssetsWithoutRisk] = Field(None, alias="treatAssetsWithoutRisk")
    __properties = ["allowShortPosition", "ignoreMissingTcost", "mipTimeLimit", "heuristicModel", "cplexParamBarqcpepcomp", "allowPurchaseOutsideUniverse", "fullyInvested", "treatAssetsWithoutRisk"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2OptimizerControlParameter:
        """Create an instance of V2OptimizerControlParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2OptimizerControlParameter:
        """Create an instance of V2OptimizerControlParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2OptimizerControlParameter.parse_obj(obj)

        _obj = V2OptimizerControlParameter.parse_obj({
            "allow_short_position": obj.get("allowShortPosition"),
            "ignore_missing_tcost": obj.get("ignoreMissingTcost"),
            "mip_time_limit": obj.get("mipTimeLimit"),
            "heuristic_model": obj.get("heuristicModel"),
            "cplex_param_barqcpepcomp": obj.get("cplexParamBarqcpepcomp"),
            "allow_purchase_outside_universe": obj.get("allowPurchaseOutsideUniverse"),
            "fully_invested": obj.get("fullyInvested"),
            "treat_assets_without_risk": obj.get("treatAssetsWithoutRisk")
        })
        return _obj

