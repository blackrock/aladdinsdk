# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.types_tree_table_data import TypesTreeTableData
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_optimization_solution_type import V2OptimizationSolutionType

class V2OptimizationSolution(BaseModel):
    """
    V2OptimizationSolution
    """
    solution_type: Optional[V2OptimizationSolutionType] = Field(None, alias="solutionType")
    objective_score: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="objectiveScore")
    reports: Optional[Dict[str, TypesTreeTableData]] = None
    __properties = ["solutionType", "objectiveScore", "reports"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2OptimizationSolution:
        """Create an instance of V2OptimizationSolution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in reports (dict)
        _field_dict = {}
        if self.reports:
            for _key in self.reports:
                if self.reports[_key]:
                    _field_dict[_key] = self.reports[_key].to_dict()
            _dict['reports'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2OptimizationSolution:
        """Create an instance of V2OptimizationSolution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2OptimizationSolution.parse_obj(obj)

        _obj = V2OptimizationSolution.parse_obj({
            "solution_type": obj.get("solutionType"),
            "objective_score": obj.get("objectiveScore"),
            "reports": dict(
                (_k, TypesTreeTableData.from_dict(_v))
                for _k, _v in obj.get("reports").items()
            )
            if obj.get("reports") is not None
            else None
        })
        return _obj

