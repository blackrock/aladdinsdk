# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_optimization_case import V2OptimizationCase
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_optimization_case_adjustment import V2OptimizationCaseAdjustment

class V2OptimizationCaseGroup(BaseModel):
    """
    It is configured as a base case + a collection of modifications  For Example base case has: portfolio = I-SP500; date = 20200801 Adjustment 1 has: date = 20200701 Adjustment 2 has: date = 20200601
    """
    base_case: Optional[V2OptimizationCase] = Field(None, alias="baseCase")
    case_adjustments: Optional[conlist(V2OptimizationCaseAdjustment)] = Field(None, alias="caseAdjustments")
    __properties = ["baseCase", "caseAdjustments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2OptimizationCaseGroup:
        """Create an instance of V2OptimizationCaseGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of base_case
        if self.base_case:
            _dict['baseCase'] = self.base_case.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in case_adjustments (list)
        _items = []
        if self.case_adjustments:
            for _item in self.case_adjustments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['caseAdjustments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2OptimizationCaseGroup:
        """Create an instance of V2OptimizationCaseGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2OptimizationCaseGroup.parse_obj(obj)

        _obj = V2OptimizationCaseGroup.parse_obj({
            "base_case": V2OptimizationCase.from_dict(obj.get("baseCase")) if obj.get("baseCase") is not None else None,
            "case_adjustments": [V2OptimizationCaseAdjustment.from_dict(_item) for _item in obj.get("caseAdjustments")] if obj.get("caseAdjustments") is not None else None
        })
        return _obj

