# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.additional_factor_source_attribute_factor_source import AdditionalFactorSourceAttributeFactorSource
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.additional_factor_source_breakdown_factor_source import AdditionalFactorSourceBreakdownFactorSource
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.additional_factor_source_stress_scenario_source import AdditionalFactorSourceStressScenarioSource

class RiskModelAdditionalFactorSource(BaseModel):
    """
    RiskModelAdditionalFactorSource
    """
    attribute_factor_sources: Optional[conlist(AdditionalFactorSourceAttributeFactorSource)] = Field(None, alias="attributeFactorSources")
    breakdown_factor_sources: Optional[conlist(AdditionalFactorSourceBreakdownFactorSource)] = Field(None, alias="breakdownFactorSources")
    stress_scenario_sources: Optional[conlist(AdditionalFactorSourceStressScenarioSource)] = Field(None, alias="stressScenarioSources")
    __properties = ["attributeFactorSources", "breakdownFactorSources", "stressScenarioSources"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RiskModelAdditionalFactorSource:
        """Create an instance of RiskModelAdditionalFactorSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in attribute_factor_sources (list)
        _items = []
        if self.attribute_factor_sources:
            for _item in self.attribute_factor_sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attributeFactorSources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in breakdown_factor_sources (list)
        _items = []
        if self.breakdown_factor_sources:
            for _item in self.breakdown_factor_sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['breakdownFactorSources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stress_scenario_sources (list)
        _items = []
        if self.stress_scenario_sources:
            for _item in self.stress_scenario_sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stressScenarioSources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RiskModelAdditionalFactorSource:
        """Create an instance of RiskModelAdditionalFactorSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RiskModelAdditionalFactorSource.parse_obj(obj)

        _obj = RiskModelAdditionalFactorSource.parse_obj({
            "attribute_factor_sources": [AdditionalFactorSourceAttributeFactorSource.from_dict(_item) for _item in obj.get("attributeFactorSources")] if obj.get("attributeFactorSources") is not None else None,
            "breakdown_factor_sources": [AdditionalFactorSourceBreakdownFactorSource.from_dict(_item) for _item in obj.get("breakdownFactorSources")] if obj.get("breakdownFactorSources") is not None else None,
            "stress_scenario_sources": [AdditionalFactorSourceStressScenarioSource.from_dict(_item) for _item in obj.get("stressScenarioSources")] if obj.get("stressScenarioSources") is not None else None
        })
        return _obj

