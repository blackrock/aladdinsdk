# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.types_var_fi_eq import TypesVarFiEq
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.types_var_matrix_type import TypesVarMatrixType

class TypesVarMatrixParameter(BaseModel):
    """
    TypesVarMatrixParameter
    """
    var_matrix_type: Optional[TypesVarMatrixType] = Field(None, alias="varMatrixType")
    var_fi_eq: Optional[TypesVarFiEq] = Field(None, alias="varFiEq")
    calendar: Optional[StrictStr] = None
    var_matrix_overlap: Optional[StrictInt] = Field(None, alias="varMatrixOverlap")
    var_matrix_history_daily: Optional[StrictInt] = Field(None, alias="varMatrixHistoryDaily")
    var_matrix_history_weekly: Optional[StrictInt] = Field(None, alias="varMatrixHistoryWeekly")
    var_matrix_history_monthly: Optional[StrictInt] = Field(None, alias="varMatrixHistoryMonthly")
    var_matrix_decay: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="varMatrixDecay")
    exclude_var_blocks: Optional[conlist(StrictStr)] = Field(None, alias="excludeVarBlocks")
    matrix_date: Optional[date] = Field(None, alias="matrixDate")
    __properties = ["varMatrixType", "varFiEq", "calendar", "varMatrixOverlap", "varMatrixHistoryDaily", "varMatrixHistoryWeekly", "varMatrixHistoryMonthly", "varMatrixDecay", "excludeVarBlocks", "matrixDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TypesVarMatrixParameter:
        """Create an instance of TypesVarMatrixParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TypesVarMatrixParameter:
        """Create an instance of TypesVarMatrixParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TypesVarMatrixParameter.parse_obj(obj)

        _obj = TypesVarMatrixParameter.parse_obj({
            "var_matrix_type": obj.get("varMatrixType"),
            "var_fi_eq": obj.get("varFiEq"),
            "calendar": obj.get("calendar"),
            "var_matrix_overlap": obj.get("varMatrixOverlap"),
            "var_matrix_history_daily": obj.get("varMatrixHistoryDaily"),
            "var_matrix_history_weekly": obj.get("varMatrixHistoryWeekly"),
            "var_matrix_history_monthly": obj.get("varMatrixHistoryMonthly"),
            "var_matrix_decay": obj.get("varMatrixDecay"),
            "exclude_var_blocks": obj.get("excludeVarBlocks"),
            "matrix_date": obj.get("matrixDate")
        })
        return _obj

