# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import json
import pprint
import re  # noqa: F401
from aenum import Enum, no_arg





class V2OptimizationCaseType(str, Enum):
    """
    - OPTIMIZATION_CASE_TYPE_UNSPECIFIED: Value if optimization_case_type is not specified. Will cause an exception to be thrown  - OPTIMIZATION_CASE_TYPE_OPTIMIZE: Solve the case  - OPTIMIZATION_CASE_TYPE_EXPORT_MODEL: Export risk models and other case setup  - OPTIMIZATION_CASE_TYPE_EXPORT_ONLY_RISK_MODEL: Only export risk models  - OPTIMIZATION_CASE_TYPE_EXPORT_MODEL_AND_OPTIMIZE: Export risk models and other case setup, and then solve the case  - OPTIMIZATION_CASE_TYPE_OPTIMIZE_AND_VALIDATE_MODEL: Run optimization and then validate risk models  - OPTIMIZATION_CASE_TYPE_OPTIMIZE_WITH_MACRO_MODEL: Run optimization with Macro models  - OPTIMIZATION_CASE_TYPE_ABSOLUTE_RISK_BUDGETING: Run optimization using an absolute risk budgeting approach  - OPTIMIZATION_CASE_TYPE_ACTIVE_RISK_BUDGETING: Run optimization using an active risk budgeting approach
    """

    """
    allowed enum values
    """
    OPTIMIZATION_CASE_TYPE_UNSPECIFIED = 'OPTIMIZATION_CASE_TYPE_UNSPECIFIED'
    OPTIMIZATION_CASE_TYPE_OPTIMIZE = 'OPTIMIZATION_CASE_TYPE_OPTIMIZE'
    OPTIMIZATION_CASE_TYPE_EXPORT_MODEL = 'OPTIMIZATION_CASE_TYPE_EXPORT_MODEL'
    OPTIMIZATION_CASE_TYPE_EXPORT_ONLY_RISK_MODEL = 'OPTIMIZATION_CASE_TYPE_EXPORT_ONLY_RISK_MODEL'
    OPTIMIZATION_CASE_TYPE_EXPORT_MODEL_AND_OPTIMIZE = 'OPTIMIZATION_CASE_TYPE_EXPORT_MODEL_AND_OPTIMIZE'
    OPTIMIZATION_CASE_TYPE_OPTIMIZE_AND_VALIDATE_MODEL = 'OPTIMIZATION_CASE_TYPE_OPTIMIZE_AND_VALIDATE_MODEL'
    OPTIMIZATION_CASE_TYPE_OPTIMIZE_WITH_MACRO_MODEL = 'OPTIMIZATION_CASE_TYPE_OPTIMIZE_WITH_MACRO_MODEL'
    OPTIMIZATION_CASE_TYPE_ABSOLUTE_RISK_BUDGETING = 'OPTIMIZATION_CASE_TYPE_ABSOLUTE_RISK_BUDGETING'
    OPTIMIZATION_CASE_TYPE_ACTIVE_RISK_BUDGETING = 'OPTIMIZATION_CASE_TYPE_ACTIVE_RISK_BUDGETING'

    @classmethod
    def from_json(cls, json_str: str) -> V2OptimizationCaseType:
        """Create an instance of V2OptimizationCaseType from a JSON string"""
        return V2OptimizationCaseType(json.loads(json_str))


