# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_alpha_model import V2AlphaModel
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_asset_universe import V2AssetUniverse
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_risk_budgeting import V2RiskBudgeting
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_risk_model import V2RiskModel
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_tax_model import V2TaxModel
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_transaction_cost_model import V2TransactionCostModel

class V2OptimizationDataModel(BaseModel):
    """
    V2OptimizationDataModel
    """
    asset_universe: Optional[V2AssetUniverse] = Field(None, alias="assetUniverse")
    risk_model: Optional[V2RiskModel] = Field(None, alias="riskModel")
    tcost_model: Optional[V2TransactionCostModel] = Field(None, alias="tcostModel")
    alpha_model: Optional[V2AlphaModel] = Field(None, alias="alphaModel")
    tax_model: Optional[V2TaxModel] = Field(None, alias="taxModel")
    risk_budgeting: Optional[V2RiskBudgeting] = Field(None, alias="riskBudgeting")
    bypass_caching: Optional[StrictBool] = Field(None, alias="bypassCaching")
    __properties = ["assetUniverse", "riskModel", "tcostModel", "alphaModel", "taxModel", "riskBudgeting", "bypassCaching"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2OptimizationDataModel:
        """Create an instance of V2OptimizationDataModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of asset_universe
        if self.asset_universe:
            _dict['assetUniverse'] = self.asset_universe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_model
        if self.risk_model:
            _dict['riskModel'] = self.risk_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tcost_model
        if self.tcost_model:
            _dict['tcostModel'] = self.tcost_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of alpha_model
        if self.alpha_model:
            _dict['alphaModel'] = self.alpha_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_model
        if self.tax_model:
            _dict['taxModel'] = self.tax_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_budgeting
        if self.risk_budgeting:
            _dict['riskBudgeting'] = self.risk_budgeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2OptimizationDataModel:
        """Create an instance of V2OptimizationDataModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2OptimizationDataModel.parse_obj(obj)

        _obj = V2OptimizationDataModel.parse_obj({
            "asset_universe": V2AssetUniverse.from_dict(obj.get("assetUniverse")) if obj.get("assetUniverse") is not None else None,
            "risk_model": V2RiskModel.from_dict(obj.get("riskModel")) if obj.get("riskModel") is not None else None,
            "tcost_model": V2TransactionCostModel.from_dict(obj.get("tcostModel")) if obj.get("tcostModel") is not None else None,
            "alpha_model": V2AlphaModel.from_dict(obj.get("alphaModel")) if obj.get("alphaModel") is not None else None,
            "tax_model": V2TaxModel.from_dict(obj.get("taxModel")) if obj.get("taxModel") is not None else None,
            "risk_budgeting": V2RiskBudgeting.from_dict(obj.get("riskBudgeting")) if obj.get("riskBudgeting") is not None else None,
            "bypass_caching": obj.get("bypassCaching")
        })
        return _obj

