# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.tax_model_asset_wash_sale import TaxModelAssetWashSale
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.tax_model_tax_lot import TaxModelTaxLot
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.tax_model_tax_rate import TaxModelTaxRate
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.tax_model_taxable_optimization_type import TaxModelTaxableOptimizationType

class V2TaxModel(BaseModel):
    """
    V2TaxModel
    """
    wash_sales: Optional[conlist(TaxModelAssetWashSale)] = Field(None, alias="washSales")
    tax_lot_reason: Optional[StrictStr] = Field(None, alias="taxLotReason")
    taxable_optimization_type: Optional[TaxModelTaxableOptimizationType] = Field(None, alias="taxableOptimizationType")
    look_back_day: Optional[StrictInt] = Field(None, alias="lookBackDay")
    tax_rates: Optional[conlist(TaxModelTaxRate)] = Field(None, alias="taxRates")
    use_heuristic: Optional[StrictBool] = Field(None, alias="useHeuristic")
    tax_lots: Optional[conlist(TaxModelTaxLot)] = Field(None, alias="taxLots")
    __properties = ["washSales", "taxLotReason", "taxableOptimizationType", "lookBackDay", "taxRates", "useHeuristic", "taxLots"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2TaxModel:
        """Create an instance of V2TaxModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in wash_sales (list)
        _items = []
        if self.wash_sales:
            for _item in self.wash_sales:
                if _item:
                    _items.append(_item.to_dict())
            _dict['washSales'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_rates (list)
        _items = []
        if self.tax_rates:
            for _item in self.tax_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_lots (list)
        _items = []
        if self.tax_lots:
            for _item in self.tax_lots:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxLots'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2TaxModel:
        """Create an instance of V2TaxModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2TaxModel.parse_obj(obj)

        _obj = V2TaxModel.parse_obj({
            "wash_sales": [TaxModelAssetWashSale.from_dict(_item) for _item in obj.get("washSales")] if obj.get("washSales") is not None else None,
            "tax_lot_reason": obj.get("taxLotReason"),
            "taxable_optimization_type": obj.get("taxableOptimizationType"),
            "look_back_day": obj.get("lookBackDay"),
            "tax_rates": [TaxModelTaxRate.from_dict(_item) for _item in obj.get("taxRates")] if obj.get("taxRates") is not None else None,
            "use_heuristic": obj.get("useHeuristic"),
            "tax_lots": [TaxModelTaxLot.from_dict(_item) for _item in obj.get("taxLots")] if obj.get("taxLots") is not None else None
        })
        return _obj

