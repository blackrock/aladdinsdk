# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.risk_model_additional_factor_source import RiskModelAdditionalFactorSource
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.tablev1_sparse_data_table import Tablev1SparseDataTable
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.tablev2_sparse_data_table import Tablev2SparseDataTable
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.types_risk_model_parameter import TypesRiskModelParameter
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.types_tree_table_data import TypesTreeTableData

class V2RiskModel(BaseModel):
    """
    V2RiskModel
    """
    model_parameter: Optional[TypesRiskModelParameter] = Field(None, alias="modelParameter")
    additional_factor_source: Optional[RiskModelAdditionalFactorSource] = Field(None, alias="additionalFactorSource")
    risk_factor_exposure: Optional[Tablev1SparseDataTable] = Field(None, alias="riskFactorExposure")
    additional_factor_exposure: Optional[Tablev1SparseDataTable] = Field(None, alias="additionalFactorExposure")
    factor_covariance_matrix: Optional[TypesTreeTableData] = Field(None, alias="factorCovarianceMatrix")
    specific_covariance_matrix: Optional[Tablev1SparseDataTable] = Field(None, alias="specificCovarianceMatrix")
    alddin_blocks: Optional[conlist(StrictStr)] = Field(None, alias="alddinBlocks")
    fx_scaling_factor: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fxScalingFactor")
    factor_type_overrides: Optional[Dict[str, StrictStr]] = Field(None, alias="factorTypeOverrides", description="override types of risk and aditional factors.")
    factor_groupings: Optional[conlist(StrictStr)] = Field(None, alias="factorGroupings")
    risk_factor_exposure_list: Optional[Tablev2SparseDataTable] = Field(None, alias="riskFactorExposureList")
    additional_factor_exposure_list: Optional[Tablev2SparseDataTable] = Field(None, alias="additionalFactorExposureList")
    specific_covariance_list: Optional[Tablev2SparseDataTable] = Field(None, alias="specificCovarianceList")
    __properties = ["modelParameter", "additionalFactorSource", "riskFactorExposure", "additionalFactorExposure", "factorCovarianceMatrix", "specificCovarianceMatrix", "alddinBlocks", "fxScalingFactor", "factorTypeOverrides", "factorGroupings", "riskFactorExposureList", "additionalFactorExposureList", "specificCovarianceList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2RiskModel:
        """Create an instance of V2RiskModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of model_parameter
        if self.model_parameter:
            _dict['modelParameter'] = self.model_parameter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_factor_source
        if self.additional_factor_source:
            _dict['additionalFactorSource'] = self.additional_factor_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_factor_exposure
        if self.risk_factor_exposure:
            _dict['riskFactorExposure'] = self.risk_factor_exposure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_factor_exposure
        if self.additional_factor_exposure:
            _dict['additionalFactorExposure'] = self.additional_factor_exposure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of factor_covariance_matrix
        if self.factor_covariance_matrix:
            _dict['factorCovarianceMatrix'] = self.factor_covariance_matrix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specific_covariance_matrix
        if self.specific_covariance_matrix:
            _dict['specificCovarianceMatrix'] = self.specific_covariance_matrix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_factor_exposure_list
        if self.risk_factor_exposure_list:
            _dict['riskFactorExposureList'] = self.risk_factor_exposure_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_factor_exposure_list
        if self.additional_factor_exposure_list:
            _dict['additionalFactorExposureList'] = self.additional_factor_exposure_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specific_covariance_list
        if self.specific_covariance_list:
            _dict['specificCovarianceList'] = self.specific_covariance_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2RiskModel:
        """Create an instance of V2RiskModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2RiskModel.parse_obj(obj)

        _obj = V2RiskModel.parse_obj({
            "model_parameter": TypesRiskModelParameter.from_dict(obj.get("modelParameter")) if obj.get("modelParameter") is not None else None,
            "additional_factor_source": RiskModelAdditionalFactorSource.from_dict(obj.get("additionalFactorSource")) if obj.get("additionalFactorSource") is not None else None,
            "risk_factor_exposure": Tablev1SparseDataTable.from_dict(obj.get("riskFactorExposure")) if obj.get("riskFactorExposure") is not None else None,
            "additional_factor_exposure": Tablev1SparseDataTable.from_dict(obj.get("additionalFactorExposure")) if obj.get("additionalFactorExposure") is not None else None,
            "factor_covariance_matrix": TypesTreeTableData.from_dict(obj.get("factorCovarianceMatrix")) if obj.get("factorCovarianceMatrix") is not None else None,
            "specific_covariance_matrix": Tablev1SparseDataTable.from_dict(obj.get("specificCovarianceMatrix")) if obj.get("specificCovarianceMatrix") is not None else None,
            "alddin_blocks": obj.get("alddinBlocks"),
            "fx_scaling_factor": obj.get("fxScalingFactor"),
            "factor_type_overrides": obj.get("factorTypeOverrides"),
            "factor_groupings": obj.get("factorGroupings"),
            "risk_factor_exposure_list": Tablev2SparseDataTable.from_dict(obj.get("riskFactorExposureList")) if obj.get("riskFactorExposureList") is not None else None,
            "additional_factor_exposure_list": Tablev2SparseDataTable.from_dict(obj.get("additionalFactorExposureList")) if obj.get("additionalFactorExposureList") is not None else None,
            "specific_covariance_list": Tablev2SparseDataTable.from_dict(obj.get("specificCovarianceList")) if obj.get("specificCovarianceList") is not None else None
        })
        return _obj

