# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.bound_bound_style import BoundBoundStyle
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.bound_bound_type import BoundBoundType

class GroupBoundBound(BaseModel):
    """
    GroupBoundBound
    """
    bound_type: Optional[BoundBoundType] = Field(None, alias="boundType")
    asset_ids: Optional[conlist(StrictStr)] = Field(None, alias="assetIds")
    factor_id: Optional[StrictStr] = Field(None, alias="factorId")
    lower_bound: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lowerBound")
    upper_bound: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="upperBound")
    bound_style: Optional[BoundBoundStyle] = Field(None, alias="boundStyle")
    __properties = ["boundType", "assetIds", "factorId", "lowerBound", "upperBound", "boundStyle"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GroupBoundBound:
        """Create an instance of GroupBoundBound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GroupBoundBound:
        """Create an instance of GroupBoundBound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GroupBoundBound.parse_obj(obj)

        _obj = GroupBoundBound.parse_obj({
            "bound_type": obj.get("boundType"),
            "asset_ids": obj.get("assetIds"),
            "factor_id": obj.get("factorId"),
            "lower_bound": obj.get("lowerBound"),
            "upper_bound": obj.get("upperBound"),
            "bound_style": obj.get("boundStyle")
        })
        return _obj

