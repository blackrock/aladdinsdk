# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class V2OptimizationObjective(BaseModel):
    """
    V2OptimizationObjective
    """
    alpha_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="alphaWeight")
    sys_risk_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sysRiskWeight")
    idio_risk_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="idioRiskWeight")
    tcost_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tcostWeight")
    second_sys_risk_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="secondSysRiskWeight")
    second_idio_risk_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="secondIdioRiskWeight")
    short_term_tax_gain_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="shortTermTaxGainWeight")
    short_term_tax_loss_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="shortTermTaxLossWeight")
    short_term_tax_net_gain_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="shortTermTaxNetGainWeight")
    long_term_tax_gain_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="longTermTaxGainWeight")
    long_term_tax_loss_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="longTermTaxLossWeight")
    long_term_tax_net_gain_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="longTermTaxNetGainWeight")
    tax_net_gain_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxNetGainWeight")
    additional_sys_risk_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="additionalSysRiskWeight")
    fixed_cost_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fixedCostWeight")
    missing_risk_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="missingRiskPenalty")
    risk_budget_lambda: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="riskBudgetLambda")
    risk_budget_penalty_lambda: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="riskBudgetPenaltyLambda")
    risk_budget_cone_lambda: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="riskBudgetConeLambda")
    risk_budget_positive_cone_lambda: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="riskBudgetPositiveConeLambda")
    risk_budget_negative_cone_lambda: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="riskBudgetNegativeConeLambda")
    __properties = ["alphaWeight", "sysRiskWeight", "idioRiskWeight", "tcostWeight", "secondSysRiskWeight", "secondIdioRiskWeight", "shortTermTaxGainWeight", "shortTermTaxLossWeight", "shortTermTaxNetGainWeight", "longTermTaxGainWeight", "longTermTaxLossWeight", "longTermTaxNetGainWeight", "taxNetGainWeight", "additionalSysRiskWeight", "fixedCostWeight", "missingRiskPenalty", "riskBudgetLambda", "riskBudgetPenaltyLambda", "riskBudgetConeLambda", "riskBudgetPositiveConeLambda", "riskBudgetNegativeConeLambda"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2OptimizationObjective:
        """Create an instance of V2OptimizationObjective from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2OptimizationObjective:
        """Create an instance of V2OptimizationObjective from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2OptimizationObjective.parse_obj(obj)

        _obj = V2OptimizationObjective.parse_obj({
            "alpha_weight": obj.get("alphaWeight"),
            "sys_risk_weight": obj.get("sysRiskWeight"),
            "idio_risk_weight": obj.get("idioRiskWeight"),
            "tcost_weight": obj.get("tcostWeight"),
            "second_sys_risk_weight": obj.get("secondSysRiskWeight"),
            "second_idio_risk_weight": obj.get("secondIdioRiskWeight"),
            "short_term_tax_gain_weight": obj.get("shortTermTaxGainWeight"),
            "short_term_tax_loss_weight": obj.get("shortTermTaxLossWeight"),
            "short_term_tax_net_gain_weight": obj.get("shortTermTaxNetGainWeight"),
            "long_term_tax_gain_weight": obj.get("longTermTaxGainWeight"),
            "long_term_tax_loss_weight": obj.get("longTermTaxLossWeight"),
            "long_term_tax_net_gain_weight": obj.get("longTermTaxNetGainWeight"),
            "tax_net_gain_weight": obj.get("taxNetGainWeight"),
            "additional_sys_risk_weight": obj.get("additionalSysRiskWeight"),
            "fixed_cost_weight": obj.get("fixedCostWeight"),
            "missing_risk_penalty": obj.get("missingRiskPenalty"),
            "risk_budget_lambda": obj.get("riskBudgetLambda"),
            "risk_budget_penalty_lambda": obj.get("riskBudgetPenaltyLambda"),
            "risk_budget_cone_lambda": obj.get("riskBudgetConeLambda"),
            "risk_budget_positive_cone_lambda": obj.get("riskBudgetPositiveConeLambda"),
            "risk_budget_negative_cone_lambda": obj.get("riskBudgetNegativeConeLambda")
        })
        return _obj

