# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class V2RiskBudgeting(BaseModel):
    """
    V2RiskBudgeting
    """
    risk_budgets: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(None, alias="riskBudgets")
    risk_budget_active_weights: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(None, alias="riskBudgetActiveWeights")
    risk_budget_marginal_risks: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(None, alias="riskBudgetMarginalRisks")
    risk_budget_tier_type: Optional[StrictStr] = Field(None, alias="riskBudgetTierType")
    risk_budget_tier_one_threshold: Optional[StrictInt] = Field(None, alias="riskBudgetTierOneThreshold")
    risk_budget_tier_two_threshold: Optional[StrictInt] = Field(None, alias="riskBudgetTierTwoThreshold")
    risk_budget_tier_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="riskBudgetTierRatio")
    risk_budget_fixed_asset_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="riskBudgetFixedAssetRatio")
    __properties = ["riskBudgets", "riskBudgetActiveWeights", "riskBudgetMarginalRisks", "riskBudgetTierType", "riskBudgetTierOneThreshold", "riskBudgetTierTwoThreshold", "riskBudgetTierRatio", "riskBudgetFixedAssetRatio"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2RiskBudgeting:
        """Create an instance of V2RiskBudgeting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2RiskBudgeting:
        """Create an instance of V2RiskBudgeting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2RiskBudgeting.parse_obj(obj)

        _obj = V2RiskBudgeting.parse_obj({
            "risk_budgets": obj.get("riskBudgets"),
            "risk_budget_active_weights": obj.get("riskBudgetActiveWeights"),
            "risk_budget_marginal_risks": obj.get("riskBudgetMarginalRisks"),
            "risk_budget_tier_type": obj.get("riskBudgetTierType"),
            "risk_budget_tier_one_threshold": obj.get("riskBudgetTierOneThreshold"),
            "risk_budget_tier_two_threshold": obj.get("riskBudgetTierTwoThreshold"),
            "risk_budget_tier_ratio": obj.get("riskBudgetTierRatio"),
            "risk_budget_fixed_asset_ratio": obj.get("riskBudgetFixedAssetRatio")
        })
        return _obj

