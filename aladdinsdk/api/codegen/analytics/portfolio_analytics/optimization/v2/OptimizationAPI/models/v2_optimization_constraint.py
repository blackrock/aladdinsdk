# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_bound_relaxation import V2BoundRelaxation
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_diversification_rule import V2DiversificationRule
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_group_bound import V2GroupBound
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_single_bound import V2SingleBound
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_single_bound_hard import V2SingleBoundHard
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_single_bound_soft import V2SingleBoundSoft
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_single_per_asset_bound import V2SinglePerAssetBound
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_soft_bound_objective import V2SoftBoundObjective
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_transaction_type import V2TransactionType

class V2OptimizationConstraint(BaseModel):
    """
    V2OptimizationConstraint
    """
    max_trade_number: Optional[V2SingleBound] = Field(None, alias="maxTradeNumber")
    min_trade_size: Optional[V2SinglePerAssetBound] = Field(None, alias="minTradeSize")
    max_turnover: Optional[V2SingleBound] = Field(None, alias="maxTurnover")
    max_adv_trade_size: Optional[V2SinglePerAssetBound] = Field(None, alias="maxAdvTradeSize")
    min_holding_size: Optional[V2SinglePerAssetBound] = Field(None, alias="minHoldingSize")
    max_holding_number: Optional[V2SingleBound] = Field(None, alias="maxHoldingNumber")
    max_active_sys_risk: Optional[V2SingleBound] = Field(None, alias="maxActiveSysRisk")
    max_active_idio_risk: Optional[V2SingleBound] = Field(None, alias="maxActiveIdioRisk")
    max_active_risk: Optional[V2SingleBound] = Field(None, alias="maxActiveRisk")
    min_long_position: Optional[V2SingleBound] = Field(None, alias="minLongPosition")
    max_long_position: Optional[V2SingleBound] = Field(None, alias="maxLongPosition")
    min_short_position: Optional[V2SingleBound] = Field(None, alias="minShortPosition")
    max_short_position: Optional[V2SingleBound] = Field(None, alias="maxShortPosition")
    additional_factor_exposure_constraint: Optional[V2GroupBound] = Field(None, alias="additionalFactorExposureConstraint")
    asset_constraint: Optional[V2GroupBound] = Field(None, alias="assetConstraint")
    factor_exposure_constraint: Optional[V2GroupBound] = Field(None, alias="factorExposureConstraint")
    asset_buy_constraint: Optional[V2GroupBound] = Field(None, alias="assetBuyConstraint")
    asset_sell_constraint: Optional[V2GroupBound] = Field(None, alias="assetSellConstraint")
    trade_increment: Optional[V2SinglePerAssetBound] = Field(None, alias="tradeIncrement")
    max_net_taxable_gain: Optional[V2SingleBound] = Field(None, alias="maxNetTaxableGain")
    max_net_taxable_gain_liability: Optional[V2SingleBound] = Field(None, alias="maxNetTaxableGainLiability")
    max_taxable_gain: Optional[V2SingleBound] = Field(None, alias="maxTaxableGain")
    max_taxable_gain_liability: Optional[V2SingleBound] = Field(None, alias="maxTaxableGainLiability")
    max_net_taxable_loss: Optional[V2SingleBound] = Field(None, alias="maxNetTaxableLoss")
    max_net_taxable_loss_liability: Optional[V2SingleBound] = Field(None, alias="maxNetTaxableLossLiability")
    max_taxable_loss: Optional[V2SingleBound] = Field(None, alias="maxTaxableLoss")
    max_taxable_loss_liability: Optional[V2SingleBound] = Field(None, alias="maxTaxableLossLiability")
    min_net_taxable_gain: Optional[V2SingleBound] = Field(None, alias="minNetTaxableGain")
    min_net_taxable_gain_liability: Optional[V2SingleBound] = Field(None, alias="minNetTaxableGainLiability")
    min_taxable_gain: Optional[V2SingleBound] = Field(None, alias="minTaxableGain")
    min_taxable_gain_liability: Optional[V2SingleBound] = Field(None, alias="minTaxableGainLiability")
    min_net_taxable_loss: Optional[V2SingleBound] = Field(None, alias="minNetTaxableLoss")
    min_net_taxable_loss_liability: Optional[V2SingleBound] = Field(None, alias="minNetTaxableLossLiability")
    min_taxable_loss: Optional[V2SingleBound] = Field(None, alias="minTaxableLoss")
    min_taxable_loss_liability: Optional[V2SingleBound] = Field(None, alias="minTaxableLossLiability")
    final_cash: Optional[V2SingleBoundHard] = Field(None, alias="finalCash")
    final_cash_dollar: Optional[V2SingleBoundHard] = Field(None, alias="finalCashDollar")
    grandfather_upper_bound: Optional[StrictBool] = Field(None, alias="grandfatherUpperBound")
    grandfather_lower_bound: Optional[StrictBool] = Field(None, alias="grandfatherLowerBound")
    transactions_allowed: Optional[V2TransactionType] = Field(None, alias="transactionsAllowed")
    relaxation_overrides: Optional[Dict[str, V2BoundRelaxation]] = Field(None, alias="relaxationOverrides")
    max_budget: Optional[V2SingleBoundHard] = Field(None, alias="maxBudget")
    min_budget: Optional[V2SingleBoundHard] = Field(None, alias="minBudget")
    max_notional_budget: Optional[V2SingleBoundHard] = Field(None, alias="maxNotionalBudget")
    min_notional_budget: Optional[V2SingleBoundHard] = Field(None, alias="minNotionalBudget")
    soft_bound_objective_overrides: Optional[Dict[str, V2SoftBoundObjective]] = Field(None, alias="softBoundObjectiveOverrides")
    max_short_position_soft: Optional[V2SingleBoundSoft] = Field(None, alias="maxShortPositionSoft")
    min_short_position_soft: Optional[V2SingleBoundSoft] = Field(None, alias="minShortPositionSoft")
    max_long_position_soft: Optional[V2SingleBoundSoft] = Field(None, alias="maxLongPositionSoft")
    min_long_position_soft: Optional[V2SingleBoundSoft] = Field(None, alias="minLongPositionSoft")
    max_turnover_soft: Optional[V2SingleBoundSoft] = Field(None, alias="maxTurnoverSoft")
    max_trade_number_soft: Optional[V2SingleBoundSoft] = Field(None, alias="maxTradeNumberSoft")
    max_holding_number_soft: Optional[V2SingleBoundSoft] = Field(None, alias="maxHoldingNumberSoft")
    max_notional_budget_soft: Optional[V2SingleBoundSoft] = Field(None, alias="maxNotionalBudgetSoft")
    min_notional_budget_soft: Optional[V2SingleBoundSoft] = Field(None, alias="minNotionalBudgetSoft")
    diversification_rule: Optional[V2DiversificationRule] = Field(None, alias="diversificationRule")
    grandfather_min_holding_size: Optional[StrictBool] = Field(None, alias="grandfatherMinHoldingSize")
    grandfather_min_trade_size: Optional[StrictBool] = Field(None, alias="grandfatherMinTradeSize")
    grandfather_trade_increment: Optional[StrictBool] = Field(None, alias="grandfatherTradeIncrement")
    __properties = ["maxTradeNumber", "minTradeSize", "maxTurnover", "maxAdvTradeSize", "minHoldingSize", "maxHoldingNumber", "maxActiveSysRisk", "maxActiveIdioRisk", "maxActiveRisk", "minLongPosition", "maxLongPosition", "minShortPosition", "maxShortPosition", "additionalFactorExposureConstraint", "assetConstraint", "factorExposureConstraint", "assetBuyConstraint", "assetSellConstraint", "tradeIncrement", "maxNetTaxableGain", "maxNetTaxableGainLiability", "maxTaxableGain", "maxTaxableGainLiability", "maxNetTaxableLoss", "maxNetTaxableLossLiability", "maxTaxableLoss", "maxTaxableLossLiability", "minNetTaxableGain", "minNetTaxableGainLiability", "minTaxableGain", "minTaxableGainLiability", "minNetTaxableLoss", "minNetTaxableLossLiability", "minTaxableLoss", "minTaxableLossLiability", "finalCash", "finalCashDollar", "grandfatherUpperBound", "grandfatherLowerBound", "transactionsAllowed", "relaxationOverrides", "maxBudget", "minBudget", "maxNotionalBudget", "minNotionalBudget", "softBoundObjectiveOverrides", "maxShortPositionSoft", "minShortPositionSoft", "maxLongPositionSoft", "minLongPositionSoft", "maxTurnoverSoft", "maxTradeNumberSoft", "maxHoldingNumberSoft", "maxNotionalBudgetSoft", "minNotionalBudgetSoft", "diversificationRule", "grandfatherMinHoldingSize", "grandfatherMinTradeSize", "grandfatherTradeIncrement"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2OptimizationConstraint:
        """Create an instance of V2OptimizationConstraint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of max_trade_number
        if self.max_trade_number:
            _dict['maxTradeNumber'] = self.max_trade_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_trade_size
        if self.min_trade_size:
            _dict['minTradeSize'] = self.min_trade_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_turnover
        if self.max_turnover:
            _dict['maxTurnover'] = self.max_turnover.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_adv_trade_size
        if self.max_adv_trade_size:
            _dict['maxAdvTradeSize'] = self.max_adv_trade_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_holding_size
        if self.min_holding_size:
            _dict['minHoldingSize'] = self.min_holding_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_holding_number
        if self.max_holding_number:
            _dict['maxHoldingNumber'] = self.max_holding_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_active_sys_risk
        if self.max_active_sys_risk:
            _dict['maxActiveSysRisk'] = self.max_active_sys_risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_active_idio_risk
        if self.max_active_idio_risk:
            _dict['maxActiveIdioRisk'] = self.max_active_idio_risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_active_risk
        if self.max_active_risk:
            _dict['maxActiveRisk'] = self.max_active_risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_long_position
        if self.min_long_position:
            _dict['minLongPosition'] = self.min_long_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_long_position
        if self.max_long_position:
            _dict['maxLongPosition'] = self.max_long_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_short_position
        if self.min_short_position:
            _dict['minShortPosition'] = self.min_short_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_short_position
        if self.max_short_position:
            _dict['maxShortPosition'] = self.max_short_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_factor_exposure_constraint
        if self.additional_factor_exposure_constraint:
            _dict['additionalFactorExposureConstraint'] = self.additional_factor_exposure_constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asset_constraint
        if self.asset_constraint:
            _dict['assetConstraint'] = self.asset_constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of factor_exposure_constraint
        if self.factor_exposure_constraint:
            _dict['factorExposureConstraint'] = self.factor_exposure_constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asset_buy_constraint
        if self.asset_buy_constraint:
            _dict['assetBuyConstraint'] = self.asset_buy_constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asset_sell_constraint
        if self.asset_sell_constraint:
            _dict['assetSellConstraint'] = self.asset_sell_constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade_increment
        if self.trade_increment:
            _dict['tradeIncrement'] = self.trade_increment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_net_taxable_gain
        if self.max_net_taxable_gain:
            _dict['maxNetTaxableGain'] = self.max_net_taxable_gain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_net_taxable_gain_liability
        if self.max_net_taxable_gain_liability:
            _dict['maxNetTaxableGainLiability'] = self.max_net_taxable_gain_liability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_taxable_gain
        if self.max_taxable_gain:
            _dict['maxTaxableGain'] = self.max_taxable_gain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_taxable_gain_liability
        if self.max_taxable_gain_liability:
            _dict['maxTaxableGainLiability'] = self.max_taxable_gain_liability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_net_taxable_loss
        if self.max_net_taxable_loss:
            _dict['maxNetTaxableLoss'] = self.max_net_taxable_loss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_net_taxable_loss_liability
        if self.max_net_taxable_loss_liability:
            _dict['maxNetTaxableLossLiability'] = self.max_net_taxable_loss_liability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_taxable_loss
        if self.max_taxable_loss:
            _dict['maxTaxableLoss'] = self.max_taxable_loss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_taxable_loss_liability
        if self.max_taxable_loss_liability:
            _dict['maxTaxableLossLiability'] = self.max_taxable_loss_liability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_net_taxable_gain
        if self.min_net_taxable_gain:
            _dict['minNetTaxableGain'] = self.min_net_taxable_gain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_net_taxable_gain_liability
        if self.min_net_taxable_gain_liability:
            _dict['minNetTaxableGainLiability'] = self.min_net_taxable_gain_liability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_taxable_gain
        if self.min_taxable_gain:
            _dict['minTaxableGain'] = self.min_taxable_gain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_taxable_gain_liability
        if self.min_taxable_gain_liability:
            _dict['minTaxableGainLiability'] = self.min_taxable_gain_liability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_net_taxable_loss
        if self.min_net_taxable_loss:
            _dict['minNetTaxableLoss'] = self.min_net_taxable_loss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_net_taxable_loss_liability
        if self.min_net_taxable_loss_liability:
            _dict['minNetTaxableLossLiability'] = self.min_net_taxable_loss_liability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_taxable_loss
        if self.min_taxable_loss:
            _dict['minTaxableLoss'] = self.min_taxable_loss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_taxable_loss_liability
        if self.min_taxable_loss_liability:
            _dict['minTaxableLossLiability'] = self.min_taxable_loss_liability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of final_cash
        if self.final_cash:
            _dict['finalCash'] = self.final_cash.to_dict()
        # override the default output from pydantic by calling `to_dict()` of final_cash_dollar
        if self.final_cash_dollar:
            _dict['finalCashDollar'] = self.final_cash_dollar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in relaxation_overrides (dict)
        _field_dict = {}
        if self.relaxation_overrides:
            for _key in self.relaxation_overrides:
                if self.relaxation_overrides[_key]:
                    _field_dict[_key] = self.relaxation_overrides[_key].to_dict()
            _dict['relaxationOverrides'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of max_budget
        if self.max_budget:
            _dict['maxBudget'] = self.max_budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_budget
        if self.min_budget:
            _dict['minBudget'] = self.min_budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_notional_budget
        if self.max_notional_budget:
            _dict['maxNotionalBudget'] = self.max_notional_budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_notional_budget
        if self.min_notional_budget:
            _dict['minNotionalBudget'] = self.min_notional_budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in soft_bound_objective_overrides (dict)
        _field_dict = {}
        if self.soft_bound_objective_overrides:
            for _key in self.soft_bound_objective_overrides:
                if self.soft_bound_objective_overrides[_key]:
                    _field_dict[_key] = self.soft_bound_objective_overrides[_key].to_dict()
            _dict['softBoundObjectiveOverrides'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of max_short_position_soft
        if self.max_short_position_soft:
            _dict['maxShortPositionSoft'] = self.max_short_position_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_short_position_soft
        if self.min_short_position_soft:
            _dict['minShortPositionSoft'] = self.min_short_position_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_long_position_soft
        if self.max_long_position_soft:
            _dict['maxLongPositionSoft'] = self.max_long_position_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_long_position_soft
        if self.min_long_position_soft:
            _dict['minLongPositionSoft'] = self.min_long_position_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_turnover_soft
        if self.max_turnover_soft:
            _dict['maxTurnoverSoft'] = self.max_turnover_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_trade_number_soft
        if self.max_trade_number_soft:
            _dict['maxTradeNumberSoft'] = self.max_trade_number_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_holding_number_soft
        if self.max_holding_number_soft:
            _dict['maxHoldingNumberSoft'] = self.max_holding_number_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_notional_budget_soft
        if self.max_notional_budget_soft:
            _dict['maxNotionalBudgetSoft'] = self.max_notional_budget_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_notional_budget_soft
        if self.min_notional_budget_soft:
            _dict['minNotionalBudgetSoft'] = self.min_notional_budget_soft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diversification_rule
        if self.diversification_rule:
            _dict['diversificationRule'] = self.diversification_rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2OptimizationConstraint:
        """Create an instance of V2OptimizationConstraint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2OptimizationConstraint.parse_obj(obj)

        _obj = V2OptimizationConstraint.parse_obj({
            "max_trade_number": V2SingleBound.from_dict(obj.get("maxTradeNumber")) if obj.get("maxTradeNumber") is not None else None,
            "min_trade_size": V2SinglePerAssetBound.from_dict(obj.get("minTradeSize")) if obj.get("minTradeSize") is not None else None,
            "max_turnover": V2SingleBound.from_dict(obj.get("maxTurnover")) if obj.get("maxTurnover") is not None else None,
            "max_adv_trade_size": V2SinglePerAssetBound.from_dict(obj.get("maxAdvTradeSize")) if obj.get("maxAdvTradeSize") is not None else None,
            "min_holding_size": V2SinglePerAssetBound.from_dict(obj.get("minHoldingSize")) if obj.get("minHoldingSize") is not None else None,
            "max_holding_number": V2SingleBound.from_dict(obj.get("maxHoldingNumber")) if obj.get("maxHoldingNumber") is not None else None,
            "max_active_sys_risk": V2SingleBound.from_dict(obj.get("maxActiveSysRisk")) if obj.get("maxActiveSysRisk") is not None else None,
            "max_active_idio_risk": V2SingleBound.from_dict(obj.get("maxActiveIdioRisk")) if obj.get("maxActiveIdioRisk") is not None else None,
            "max_active_risk": V2SingleBound.from_dict(obj.get("maxActiveRisk")) if obj.get("maxActiveRisk") is not None else None,
            "min_long_position": V2SingleBound.from_dict(obj.get("minLongPosition")) if obj.get("minLongPosition") is not None else None,
            "max_long_position": V2SingleBound.from_dict(obj.get("maxLongPosition")) if obj.get("maxLongPosition") is not None else None,
            "min_short_position": V2SingleBound.from_dict(obj.get("minShortPosition")) if obj.get("minShortPosition") is not None else None,
            "max_short_position": V2SingleBound.from_dict(obj.get("maxShortPosition")) if obj.get("maxShortPosition") is not None else None,
            "additional_factor_exposure_constraint": V2GroupBound.from_dict(obj.get("additionalFactorExposureConstraint")) if obj.get("additionalFactorExposureConstraint") is not None else None,
            "asset_constraint": V2GroupBound.from_dict(obj.get("assetConstraint")) if obj.get("assetConstraint") is not None else None,
            "factor_exposure_constraint": V2GroupBound.from_dict(obj.get("factorExposureConstraint")) if obj.get("factorExposureConstraint") is not None else None,
            "asset_buy_constraint": V2GroupBound.from_dict(obj.get("assetBuyConstraint")) if obj.get("assetBuyConstraint") is not None else None,
            "asset_sell_constraint": V2GroupBound.from_dict(obj.get("assetSellConstraint")) if obj.get("assetSellConstraint") is not None else None,
            "trade_increment": V2SinglePerAssetBound.from_dict(obj.get("tradeIncrement")) if obj.get("tradeIncrement") is not None else None,
            "max_net_taxable_gain": V2SingleBound.from_dict(obj.get("maxNetTaxableGain")) if obj.get("maxNetTaxableGain") is not None else None,
            "max_net_taxable_gain_liability": V2SingleBound.from_dict(obj.get("maxNetTaxableGainLiability")) if obj.get("maxNetTaxableGainLiability") is not None else None,
            "max_taxable_gain": V2SingleBound.from_dict(obj.get("maxTaxableGain")) if obj.get("maxTaxableGain") is not None else None,
            "max_taxable_gain_liability": V2SingleBound.from_dict(obj.get("maxTaxableGainLiability")) if obj.get("maxTaxableGainLiability") is not None else None,
            "max_net_taxable_loss": V2SingleBound.from_dict(obj.get("maxNetTaxableLoss")) if obj.get("maxNetTaxableLoss") is not None else None,
            "max_net_taxable_loss_liability": V2SingleBound.from_dict(obj.get("maxNetTaxableLossLiability")) if obj.get("maxNetTaxableLossLiability") is not None else None,
            "max_taxable_loss": V2SingleBound.from_dict(obj.get("maxTaxableLoss")) if obj.get("maxTaxableLoss") is not None else None,
            "max_taxable_loss_liability": V2SingleBound.from_dict(obj.get("maxTaxableLossLiability")) if obj.get("maxTaxableLossLiability") is not None else None,
            "min_net_taxable_gain": V2SingleBound.from_dict(obj.get("minNetTaxableGain")) if obj.get("minNetTaxableGain") is not None else None,
            "min_net_taxable_gain_liability": V2SingleBound.from_dict(obj.get("minNetTaxableGainLiability")) if obj.get("minNetTaxableGainLiability") is not None else None,
            "min_taxable_gain": V2SingleBound.from_dict(obj.get("minTaxableGain")) if obj.get("minTaxableGain") is not None else None,
            "min_taxable_gain_liability": V2SingleBound.from_dict(obj.get("minTaxableGainLiability")) if obj.get("minTaxableGainLiability") is not None else None,
            "min_net_taxable_loss": V2SingleBound.from_dict(obj.get("minNetTaxableLoss")) if obj.get("minNetTaxableLoss") is not None else None,
            "min_net_taxable_loss_liability": V2SingleBound.from_dict(obj.get("minNetTaxableLossLiability")) if obj.get("minNetTaxableLossLiability") is not None else None,
            "min_taxable_loss": V2SingleBound.from_dict(obj.get("minTaxableLoss")) if obj.get("minTaxableLoss") is not None else None,
            "min_taxable_loss_liability": V2SingleBound.from_dict(obj.get("minTaxableLossLiability")) if obj.get("minTaxableLossLiability") is not None else None,
            "final_cash": V2SingleBoundHard.from_dict(obj.get("finalCash")) if obj.get("finalCash") is not None else None,
            "final_cash_dollar": V2SingleBoundHard.from_dict(obj.get("finalCashDollar")) if obj.get("finalCashDollar") is not None else None,
            "grandfather_upper_bound": obj.get("grandfatherUpperBound"),
            "grandfather_lower_bound": obj.get("grandfatherLowerBound"),
            "transactions_allowed": obj.get("transactionsAllowed"),
            "relaxation_overrides": dict(
                (_k, V2BoundRelaxation.from_dict(_v))
                for _k, _v in obj.get("relaxationOverrides").items()
            )
            if obj.get("relaxationOverrides") is not None
            else None,
            "max_budget": V2SingleBoundHard.from_dict(obj.get("maxBudget")) if obj.get("maxBudget") is not None else None,
            "min_budget": V2SingleBoundHard.from_dict(obj.get("minBudget")) if obj.get("minBudget") is not None else None,
            "max_notional_budget": V2SingleBoundHard.from_dict(obj.get("maxNotionalBudget")) if obj.get("maxNotionalBudget") is not None else None,
            "min_notional_budget": V2SingleBoundHard.from_dict(obj.get("minNotionalBudget")) if obj.get("minNotionalBudget") is not None else None,
            "soft_bound_objective_overrides": dict(
                (_k, V2SoftBoundObjective.from_dict(_v))
                for _k, _v in obj.get("softBoundObjectiveOverrides").items()
            )
            if obj.get("softBoundObjectiveOverrides") is not None
            else None,
            "max_short_position_soft": V2SingleBoundSoft.from_dict(obj.get("maxShortPositionSoft")) if obj.get("maxShortPositionSoft") is not None else None,
            "min_short_position_soft": V2SingleBoundSoft.from_dict(obj.get("minShortPositionSoft")) if obj.get("minShortPositionSoft") is not None else None,
            "max_long_position_soft": V2SingleBoundSoft.from_dict(obj.get("maxLongPositionSoft")) if obj.get("maxLongPositionSoft") is not None else None,
            "min_long_position_soft": V2SingleBoundSoft.from_dict(obj.get("minLongPositionSoft")) if obj.get("minLongPositionSoft") is not None else None,
            "max_turnover_soft": V2SingleBoundSoft.from_dict(obj.get("maxTurnoverSoft")) if obj.get("maxTurnoverSoft") is not None else None,
            "max_trade_number_soft": V2SingleBoundSoft.from_dict(obj.get("maxTradeNumberSoft")) if obj.get("maxTradeNumberSoft") is not None else None,
            "max_holding_number_soft": V2SingleBoundSoft.from_dict(obj.get("maxHoldingNumberSoft")) if obj.get("maxHoldingNumberSoft") is not None else None,
            "max_notional_budget_soft": V2SingleBoundSoft.from_dict(obj.get("maxNotionalBudgetSoft")) if obj.get("maxNotionalBudgetSoft") is not None else None,
            "min_notional_budget_soft": V2SingleBoundSoft.from_dict(obj.get("minNotionalBudgetSoft")) if obj.get("minNotionalBudgetSoft") is not None else None,
            "diversification_rule": V2DiversificationRule.from_dict(obj.get("diversificationRule")) if obj.get("diversificationRule") is not None else None,
            "grandfather_min_holding_size": obj.get("grandfatherMinHoldingSize"),
            "grandfather_min_trade_size": obj.get("grandfatherMinTradeSize"),
            "grandfather_trade_increment": obj.get("grandfatherTradeIncrement")
        })
        return _obj

