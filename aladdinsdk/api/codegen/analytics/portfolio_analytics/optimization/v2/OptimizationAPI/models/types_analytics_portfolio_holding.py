# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class TypesAnalyticsPortfolioHolding(BaseModel):
    """
    TypesAnalyticsPortfolioHolding
    """
    asset_id: StrictStr = Field(..., alias="assetId")
    position_market_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="positionMarketValue")
    position_notional_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="positionNotionalValue")
    position_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="positionQuantity")
    portfolio_ticker: Optional[StrictStr] = Field(None, alias="portfolioTicker")
    strategy_id: Optional[StrictInt] = Field(None, alias="strategyId", description="Strategy ID Note: In case of what-if, the strategy id represents the order.")
    notional_weight: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="notionalWeight", description="Notional value in percentage.")
    sector_paths: Optional[conlist(StrictStr)] = Field(None, alias="sectorPaths", description="Sector path which shows where the actual security belongs in the tree (e.g. under which sector). Can be empty list.")
    unique_id_reference: Optional[StrictStr] = Field(None, alias="uniqueIdReference", description="Optional unique identifier. If not provider, then the asset_id will be used.")
    __properties = ["assetId", "positionMarketValue", "positionNotionalValue", "positionQuantity", "portfolioTicker", "strategyId", "notionalWeight", "sectorPaths", "uniqueIdReference"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TypesAnalyticsPortfolioHolding:
        """Create an instance of TypesAnalyticsPortfolioHolding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TypesAnalyticsPortfolioHolding:
        """Create an instance of TypesAnalyticsPortfolioHolding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TypesAnalyticsPortfolioHolding.parse_obj(obj)

        _obj = TypesAnalyticsPortfolioHolding.parse_obj({
            "asset_id": obj.get("assetId"),
            "position_market_value": obj.get("positionMarketValue"),
            "position_notional_value": obj.get("positionNotionalValue"),
            "position_quantity": obj.get("positionQuantity"),
            "portfolio_ticker": obj.get("portfolioTicker"),
            "strategy_id": obj.get("strategyId"),
            "notional_weight": obj.get("notionalWeight"),
            "sector_paths": obj.get("sectorPaths"),
            "unique_id_reference": obj.get("uniqueIdReference")
        })
        return _obj

