# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class AdditionalFactorSourceBreakdownFactorSource(BaseModel):
    """
    AdditionalFactorSourceBreakdownFactorSource
    """
    breakdown_name: Optional[StrictStr] = Field(None, alias="breakdownName")
    sector_path_regex: Optional[StrictStr] = Field(None, alias="sectorPathRegex", description="only create factors out of sector paths that match certain pattern.  If empty, match everything.")
    expand_level: Optional[StrictInt] = Field(None, alias="expandLevel")
    factor_type: Optional[StrictStr] = Field(None, alias="factorType")
    __properties = ["breakdownName", "sectorPathRegex", "expandLevel", "factorType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdditionalFactorSourceBreakdownFactorSource:
        """Create an instance of AdditionalFactorSourceBreakdownFactorSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdditionalFactorSourceBreakdownFactorSource:
        """Create an instance of AdditionalFactorSourceBreakdownFactorSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdditionalFactorSourceBreakdownFactorSource.parse_obj(obj)

        _obj = AdditionalFactorSourceBreakdownFactorSource.parse_obj({
            "breakdown_name": obj.get("breakdownName"),
            "sector_path_regex": obj.get("sectorPathRegex"),
            "expand_level": obj.get("expandLevel"),
            "factor_type": obj.get("factorType")
        })
        return _obj

