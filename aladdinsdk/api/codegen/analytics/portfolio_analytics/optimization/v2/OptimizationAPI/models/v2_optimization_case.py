# coding: utf-8

"""
    Portfolio Optimization 2.0

    Optimize portfolio positions to maximize expected returns and minimize risk and transaction costs.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_optimization_case_type import V2OptimizationCaseType
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_optimization_constraint import V2OptimizationConstraint
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_optimization_data_model import V2OptimizationDataModel
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_optimization_objective import V2OptimizationObjective
from aladdinsdk.api.codegen.analytics.portfolio_analytics.optimization.v2.OptimizationAPI.models.v2_optimization_setting import V2OptimizationSetting

class V2OptimizationCase(BaseModel):
    """
    V2OptimizationCase
    """
    case_type: Optional[V2OptimizationCaseType] = Field(None, alias="caseType")
    case_date: date = Field(..., alias="caseDate")
    portfolio_ticker: StrictStr = Field(..., alias="portfolioTicker")
    benchmark_ticker: Optional[StrictStr] = Field(None, alias="benchmarkTicker")
    model_portfolio_tickers: Optional[conlist(StrictStr)] = Field(None, alias="modelPortfolioTickers")
    objective: Optional[V2OptimizationObjective] = None
    constraint: Optional[V2OptimizationConstraint] = None
    data_model: Optional[V2OptimizationDataModel] = Field(None, alias="dataModel")
    setting: Optional[V2OptimizationSetting] = None
    __properties = ["caseType", "caseDate", "portfolioTicker", "benchmarkTicker", "modelPortfolioTickers", "objective", "constraint", "dataModel", "setting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2OptimizationCase:
        """Create an instance of V2OptimizationCase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of objective
        if self.objective:
            _dict['objective'] = self.objective.to_dict()
        # override the default output from pydantic by calling `to_dict()` of constraint
        if self.constraint:
            _dict['constraint'] = self.constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_model
        if self.data_model:
            _dict['dataModel'] = self.data_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of setting
        if self.setting:
            _dict['setting'] = self.setting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2OptimizationCase:
        """Create an instance of V2OptimizationCase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2OptimizationCase.parse_obj(obj)

        _obj = V2OptimizationCase.parse_obj({
            "case_type": obj.get("caseType"),
            "case_date": obj.get("caseDate"),
            "portfolio_ticker": obj.get("portfolioTicker"),
            "benchmark_ticker": obj.get("benchmarkTicker"),
            "model_portfolio_tickers": obj.get("modelPortfolioTickers"),
            "objective": V2OptimizationObjective.from_dict(obj.get("objective")) if obj.get("objective") is not None else None,
            "constraint": V2OptimizationConstraint.from_dict(obj.get("constraint")) if obj.get("constraint") is not None else None,
            "data_model": V2OptimizationDataModel.from_dict(obj.get("dataModel")) if obj.get("dataModel") is not None else None,
            "setting": V2OptimizationSetting.from_dict(obj.get("setting")) if obj.get("setting") is not None else None
        })
        return _obj

