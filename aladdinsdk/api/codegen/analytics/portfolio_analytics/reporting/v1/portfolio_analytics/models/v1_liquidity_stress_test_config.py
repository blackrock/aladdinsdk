# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt

class V1LiquidityStressTestConfig(BaseModel):
    """
    V1LiquidityStressTestConfig
    """
    sector_level_test: Optional[StrictBool] = Field(None, alias="sectorLevelTest")
    global_level_stress_test: Optional[StrictBool] = Field(None, alias="globalLevelStressTest")
    market_depth_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="marketDepthMultiplier")
    fixed_cost_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fixedCostMultiplier")
    market_impact_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="marketImpactMultiplier")
    __properties = ["sectorLevelTest", "globalLevelStressTest", "marketDepthMultiplier", "fixedCostMultiplier", "marketImpactMultiplier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1LiquidityStressTestConfig:
        """Create an instance of V1LiquidityStressTestConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1LiquidityStressTestConfig:
        """Create an instance of V1LiquidityStressTestConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1LiquidityStressTestConfig.parse_obj(obj)

        _obj = V1LiquidityStressTestConfig.parse_obj({
            "sector_level_test": obj.get("sectorLevelTest"),
            "global_level_stress_test": obj.get("globalLevelStressTest"),
            "market_depth_multiplier": obj.get("marketDepthMultiplier"),
            "fixed_cost_multiplier": obj.get("fixedCostMultiplier"),
            "market_impact_multiplier": obj.get("marketImpactMultiplier")
        })
        return _obj

