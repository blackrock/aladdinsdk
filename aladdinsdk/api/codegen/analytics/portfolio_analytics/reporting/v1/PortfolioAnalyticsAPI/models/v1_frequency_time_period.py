# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.frequency_time_period_time_period_type import FrequencyTimePeriodTimePeriodType
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_period_frequency import V1PeriodFrequency

class V1FrequencyTimePeriod(BaseModel):
    """
    Time period that allows a type, frequency and number of periods.
    """
    time_period_type: Optional[FrequencyTimePeriodTimePeriodType] = Field(None, alias="timePeriodType")
    period_frequency: Optional[V1PeriodFrequency] = Field(None, alias="periodFrequency")
    period_number: Optional[StrictInt] = Field(None, alias="periodNumber", description="The number of periods to include.")
    __properties = ["timePeriodType", "periodFrequency", "periodNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FrequencyTimePeriod:
        """Create an instance of V1FrequencyTimePeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FrequencyTimePeriod:
        """Create an instance of V1FrequencyTimePeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FrequencyTimePeriod.parse_obj(obj)

        _obj = V1FrequencyTimePeriod.parse_obj({
            "time_period_type": obj.get("timePeriodType"),
            "period_frequency": obj.get("periodFrequency"),
            "period_number": obj.get("periodNumber")
        })
        return _obj

