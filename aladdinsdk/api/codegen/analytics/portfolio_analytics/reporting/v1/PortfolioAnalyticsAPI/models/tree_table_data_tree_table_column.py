# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.tree_table_data_tree_table_generic_data import TreeTableDataTreeTableGenericData

class TreeTableDataTreeTableColumn(BaseModel):
    """
    TreeTableDataTreeTableColumn
    """
    tag: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(None, alias="displayName")
    extension_data_object: Optional[TreeTableDataTreeTableGenericData] = Field(None, alias="extensionDataObject")
    __properties = ["tag", "displayName", "extensionDataObject"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TreeTableDataTreeTableColumn:
        """Create an instance of TreeTableDataTreeTableColumn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of extension_data_object
        if self.extension_data_object:
            _dict['extensionDataObject'] = self.extension_data_object.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TreeTableDataTreeTableColumn:
        """Create an instance of TreeTableDataTreeTableColumn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TreeTableDataTreeTableColumn.parse_obj(obj)

        _obj = TreeTableDataTreeTableColumn.parse_obj({
            "tag": obj.get("tag"),
            "display_name": obj.get("displayName"),
            "extension_data_object": TreeTableDataTreeTableGenericData.from_dict(obj.get("extensionDataObject")) if obj.get("extensionDataObject") is not None else None
        })
        return _obj

