# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_portfolio_analytics_breakdown_config import V1PortfolioAnalyticsBreakdownConfig

class V1ColumnBreakdownOption(BaseModel):
    """
    V1ColumnBreakdownOption
    """
    column_breakdown_config: Optional[V1PortfolioAnalyticsBreakdownConfig] = Field(None, alias="columnBreakdownConfig")
    show_total_column: Optional[StrictBool] = Field(None, alias="showTotalColumn")
    show_other_column: Optional[StrictBool] = Field(None, alias="showOtherColumn")
    display_empty_column: Optional[StrictBool] = Field(None, alias="displayEmptyColumn")
    breakdown_level: Optional[StrictInt] = Field(None, alias="breakdownLevel")
    __properties = ["columnBreakdownConfig", "showTotalColumn", "showOtherColumn", "displayEmptyColumn", "breakdownLevel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ColumnBreakdownOption:
        """Create an instance of V1ColumnBreakdownOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of column_breakdown_config
        if self.column_breakdown_config:
            _dict['columnBreakdownConfig'] = self.column_breakdown_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ColumnBreakdownOption:
        """Create an instance of V1ColumnBreakdownOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ColumnBreakdownOption.parse_obj(obj)

        _obj = V1ColumnBreakdownOption.parse_obj({
            "column_breakdown_config": V1PortfolioAnalyticsBreakdownConfig.from_dict(obj.get("columnBreakdownConfig")) if obj.get("columnBreakdownConfig") is not None else None,
            "show_total_column": obj.get("showTotalColumn"),
            "show_other_column": obj.get("showOtherColumn"),
            "display_empty_column": obj.get("displayEmptyColumn"),
            "breakdown_level": obj.get("breakdownLevel")
        })
        return _obj

