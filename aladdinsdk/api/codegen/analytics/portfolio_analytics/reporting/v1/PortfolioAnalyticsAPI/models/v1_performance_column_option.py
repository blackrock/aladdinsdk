# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_performance_time_period import V1PerformanceTimePeriod

class V1PerformanceColumnOption(BaseModel):
    """
    V1PerformanceColumnOption
    """
    performance_time_period: Optional[V1PerformanceTimePeriod] = Field(None, alias="performanceTimePeriod")
    as_reported: Optional[StrictBool] = Field(None, alias="asReported", description="Flag to indicate if the returns should be \"As Reported\" or calculated on the fly.")
    __properties = ["performanceTimePeriod", "asReported"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PerformanceColumnOption:
        """Create an instance of V1PerformanceColumnOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of performance_time_period
        if self.performance_time_period:
            _dict['performanceTimePeriod'] = self.performance_time_period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PerformanceColumnOption:
        """Create an instance of V1PerformanceColumnOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PerformanceColumnOption.parse_obj(obj)

        _obj = V1PerformanceColumnOption.parse_obj({
            "performance_time_period": V1PerformanceTimePeriod.from_dict(obj.get("performanceTimePeriod")) if obj.get("performanceTimePeriod") is not None else None,
            "as_reported": obj.get("asReported")
        })
        return _obj

