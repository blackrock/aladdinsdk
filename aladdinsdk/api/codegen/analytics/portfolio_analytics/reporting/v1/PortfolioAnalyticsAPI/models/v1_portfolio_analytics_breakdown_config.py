# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_breakdown_column_set import V1BreakdownColumnSet

class V1PortfolioAnalyticsBreakdownConfig(BaseModel):
    """
    V1PortfolioAnalyticsBreakdownConfig
    """
    column_set: Optional[V1BreakdownColumnSet] = Field(None, alias="columnSet")
    favorite_id: Optional[StrictStr] = Field(None, alias="favoriteId", description="This field stores a breakdown favorite id.")
    __properties = ["columnSet", "favoriteId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PortfolioAnalyticsBreakdownConfig:
        """Create an instance of V1PortfolioAnalyticsBreakdownConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of column_set
        if self.column_set:
            _dict['columnSet'] = self.column_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PortfolioAnalyticsBreakdownConfig:
        """Create an instance of V1PortfolioAnalyticsBreakdownConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PortfolioAnalyticsBreakdownConfig.parse_obj(obj)

        _obj = V1PortfolioAnalyticsBreakdownConfig.parse_obj({
            "column_set": V1BreakdownColumnSet.from_dict(obj.get("columnSet")) if obj.get("columnSet") is not None else None,
            "favorite_id": obj.get("favoriteId")
        })
        return _obj

