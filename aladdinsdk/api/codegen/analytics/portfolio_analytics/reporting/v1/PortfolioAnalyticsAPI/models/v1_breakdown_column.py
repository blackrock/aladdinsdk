# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_column_type import V1ColumnType

class V1BreakdownColumn(BaseModel):
    """
    Column to be used with BreakdownColumnSet.
    """
    column_name: Optional[StrictStr] = Field(None, alias="columnName")
    column_type: Optional[V1ColumnType] = Field(None, alias="columnType")
    use_none_bucket: Optional[StrictBool] = Field(None, alias="useNoneBucket")
    __properties = ["columnName", "columnType", "useNoneBucket"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BreakdownColumn:
        """Create an instance of V1BreakdownColumn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BreakdownColumn:
        """Create an instance of V1BreakdownColumn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BreakdownColumn.parse_obj(obj)

        _obj = V1BreakdownColumn.parse_obj({
            "column_name": obj.get("columnName"),
            "column_type": obj.get("columnType"),
            "use_none_bucket": obj.get("useNoneBucket")
        })
        return _obj

