# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_active_calculation_column_option import V1ActiveCalculationColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_aggregation_column_option import V1AggregationColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_book_column_option import V1BookColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_book_fx_conversion_column_option import V1BookFxConversionColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_column_breakdown_option import V1ColumnBreakdownOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_contribution_unit_setting import V1ContributionUnitSetting
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_custom_aggregation_column_option import V1CustomAggregationColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_days_to_unwind import V1DaysToUnwind
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_equity_annual_frequency_column_option import V1EquityAnnualFrequencyColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_equity_estimates_column_option import V1EquityEstimatesColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_equity_frequency_column_option import V1EquityFrequencyColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_equity_interim_frequency_column_option import V1EquityInterimFrequencyColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_equity_long_term_column_option import V1EquityLongTermColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_equity_target_price_column_option import V1EquityTargetPriceColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_esma_capacity_approach import V1ESMACapacityApproach
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_esma_holiday_lookup import V1ESMAHolidayLookup
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_esma_partial_liquidation_settings import V1EsmaPartialLiquidationSettings
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_esma_partial_liquidation_settings_with_modified_strategy_only import V1EsmaPartialLiquidationSettingsWithModifiedStrategyOnly
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_euro_bond_column_option import V1EuroBondColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_issuer_count_column_option import V1IssuerCountColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_key_rate_duration_buckets import V1KeyRateDurationBuckets
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidation_include_equity_hedge_fund_cash import V1LiquidationIncludeEquityHedgeFundCash
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidation_include_settlement_period import V1LiquidationIncludeSettlementPeriod
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidation_include_transaction_cost import V1LiquidationIncludeTransactionCost
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidation_unit import V1LiquidationUnit
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_adavanced_participation_rate_override import V1LiquidityAdavancedParticipationRateOverride
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_advanced_setting import V1LiquidityAdvancedSetting
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_aggregation_all_options import V1LiquidityAggregationAllOptions
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_aggregation_option import V1LiquidityAggregationOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_horizon import V1LiquidityHorizon
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_nav_multiplier_setting import V1LiquidityNAVMultiplierSetting
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_participation_rate_override import V1LiquidityParticipationRateOverride
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_stress_test_config import V1LiquidityStressTestConfig
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_liquidity_time_horizons import V1LiquidityTimeHorizons
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_override_date_column_option import V1OverrideDateColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_override_date_comparison import V1OverrideDateComparison
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_performance_column_option import V1PerformanceColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_performance_pivot_point_column_option import V1PerformancePivotPointColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_portfolio_name_column_option import V1PortfolioNameColumnOption
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_precanned_stress_scenario import V1PrecannedStressScenario
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_sec_liquidity_settings import V1SECLiquiditySettings
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_standalone_unit_setting import V1StandaloneUnitSetting
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_stress_liquidity_analysis_flag import V1StressLiquidityAnalysisFlag
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_stress_liquidity_fixed_cost_shock import V1StressLiquidityFixedCostShock
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_stress_liquidity_market_depth_shock import V1StressLiquidityMarketDepthShock
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_stress_liquidity_market_impact_shock import V1StressLiquidityMarketImpactShock
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_stress_liquidity_tcost_flag import V1StressLiquidityTcostFlag
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_t_cost_partial_liquidation_settings import V1TCostPartialLiquidationSettings
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_value_xx_column_option import V1ValueXXColumnOption

class V1ColumnOption(BaseModel):
    """
    V1ColumnOption
    """
    aggregate_column_option: Optional[V1AggregationColumnOption] = Field(None, alias="aggregateColumnOption")
    active_calculation_column_option: Optional[V1ActiveCalculationColumnOption] = Field(None, alias="activeCalculationColumnOption")
    book_column_option: Optional[V1BookColumnOption] = Field(None, alias="bookColumnOption")
    book_fx_conversion_column_option: Optional[V1BookFxConversionColumnOption] = Field(None, alias="bookFxConversionColumnOption")
    column_breakdown_option: Optional[V1ColumnBreakdownOption] = Field(None, alias="columnBreakdownOption")
    shock_value_option: Optional[V1ValueXXColumnOption] = Field(None, alias="shockValueOption")
    liquidity_time_horizon: Optional[V1LiquidityTimeHorizons] = Field(None, alias="liquidityTimeHorizon")
    participation_rate_override: Optional[V1LiquidityParticipationRateOverride] = Field(None, alias="participationRateOverride")
    include_transaction_cost: Optional[V1LiquidationIncludeTransactionCost] = Field(None, alias="includeTransactionCost")
    include_settlement_period: Optional[V1LiquidationIncludeSettlementPeriod] = Field(None, alias="includeSettlementPeriod")
    include_hedge_fund: Optional[V1LiquidationIncludeEquityHedgeFundCash] = Field(None, alias="includeHedgeFund")
    liquidity_nav_multiplier_setting: Optional[V1LiquidityNAVMultiplierSetting] = Field(None, alias="liquidityNavMultiplierSetting")
    liquidity_stress_test_config: Optional[V1LiquidityStressTestConfig] = Field(None, alias="liquidityStressTestConfig")
    liquidity_advanced_setting: Optional[V1LiquidityAdvancedSetting] = Field(None, alias="liquidityAdvancedSetting")
    fixed_cost_shock: Optional[V1StressLiquidityFixedCostShock] = Field(None, alias="fixedCostShock")
    market_impact_shock: Optional[V1StressLiquidityMarketImpactShock] = Field(None, alias="marketImpactShock")
    market_depth_shock: Optional[V1StressLiquidityMarketDepthShock] = Field(None, alias="marketDepthShock")
    stress_analysis_flag: Optional[V1StressLiquidityAnalysisFlag] = Field(None, alias="stressAnalysisFlag")
    tcost_stress_flag: Optional[V1StressLiquidityTcostFlag] = Field(None, alias="tcostStressFlag")
    tcost_partial_liquidation_setting: Optional[V1TCostPartialLiquidationSettings] = Field(None, alias="tcostPartialLiquidationSetting")
    esma_partial_liquidation_setting: Optional[V1EsmaPartialLiquidationSettings] = Field(None, alias="esmaPartialLiquidationSetting")
    esma_modified_only_partial_liquidation_setting: Optional[V1EsmaPartialLiquidationSettingsWithModifiedStrategyOnly] = Field(None, alias="esmaModifiedOnlyPartialLiquidationSetting")
    standalone_unit: Optional[V1StandaloneUnitSetting] = Field(None, alias="standaloneUnit")
    contribution_unit: Optional[V1ContributionUnitSetting] = Field(None, alias="contributionUnit")
    liquidity_setting: Optional[V1SECLiquiditySettings] = Field(None, alias="liquiditySetting")
    horizon: Optional[V1LiquidityHorizon] = None
    liquidation_unit: Optional[V1LiquidationUnit] = Field(None, alias="liquidationUnit")
    liquidity_aggregation: Optional[V1LiquidityAggregationOption] = Field(None, alias="liquidityAggregation")
    liquidity_all_aggregation: Optional[V1LiquidityAggregationAllOptions] = Field(None, alias="liquidityAllAggregation")
    capacity_approach: Optional[V1ESMACapacityApproach] = Field(None, alias="capacityApproach")
    holiday_lookup: Optional[V1ESMAHolidayLookup] = Field(None, alias="holidayLookup")
    advanced_percentage_rate: Optional[V1LiquidityAdavancedParticipationRateOverride] = Field(None, alias="advancedPercentageRate")
    days_to_unwind: Optional[V1DaysToUnwind] = Field(None, alias="daysToUnwind")
    precanned_stress_scenario: Optional[V1PrecannedStressScenario] = Field(None, alias="precannedStressScenario")
    custom_aggregation: Optional[V1CustomAggregationColumnOption] = Field(None, alias="customAggregation")
    portfolio_name_column_option: Optional[V1PortfolioNameColumnOption] = Field(None, alias="portfolioNameColumnOption")
    equity_frequency_option: Optional[V1EquityFrequencyColumnOption] = Field(None, alias="equityFrequencyOption")
    equity_estimates_option: Optional[V1EquityEstimatesColumnOption] = Field(None, alias="equityEstimatesOption")
    equity_long_term_option: Optional[V1EquityLongTermColumnOption] = Field(None, alias="equityLongTermOption")
    equity_annual_frequency_option: Optional[V1EquityAnnualFrequencyColumnOption] = Field(None, alias="equityAnnualFrequencyOption")
    equity_interim_frequency_option: Optional[V1EquityInterimFrequencyColumnOption] = Field(None, alias="equityInterimFrequencyOption")
    equity_target_price_option: Optional[V1EquityTargetPriceColumnOption] = Field(None, alias="equityTargetPriceOption")
    key_rate_duration_buckets_setting: Optional[V1KeyRateDurationBuckets] = Field(None, alias="keyRateDurationBucketsSetting")
    use_euro_bond_duration: Optional[V1EuroBondColumnOption] = Field(None, alias="useEuroBondDuration")
    override_date_option: Optional[V1OverrideDateColumnOption] = Field(None, alias="overrideDateOption")
    override_date_comparison: Optional[V1OverrideDateComparison] = Field(None, alias="overrideDateComparison")
    performance_column_option: Optional[V1PerformanceColumnOption] = Field(None, alias="performanceColumnOption")
    performance_pivot_point_column_option: Optional[V1PerformancePivotPointColumnOption] = Field(None, alias="performancePivotPointColumnOption")
    issuer_count_column_option: Optional[V1IssuerCountColumnOption] = Field(None, alias="issuerCountColumnOption")
    __properties = ["aggregateColumnOption", "activeCalculationColumnOption", "bookColumnOption", "bookFxConversionColumnOption", "columnBreakdownOption", "shockValueOption", "liquidityTimeHorizon", "participationRateOverride", "includeTransactionCost", "includeSettlementPeriod", "includeHedgeFund", "liquidityNavMultiplierSetting", "liquidityStressTestConfig", "liquidityAdvancedSetting", "fixedCostShock", "marketImpactShock", "marketDepthShock", "stressAnalysisFlag", "tcostStressFlag", "tcostPartialLiquidationSetting", "esmaPartialLiquidationSetting", "esmaModifiedOnlyPartialLiquidationSetting", "standaloneUnit", "contributionUnit", "liquiditySetting", "horizon", "liquidationUnit", "liquidityAggregation", "liquidityAllAggregation", "capacityApproach", "holidayLookup", "advancedPercentageRate", "daysToUnwind", "precannedStressScenario", "customAggregation", "portfolioNameColumnOption", "equityFrequencyOption", "equityEstimatesOption", "equityLongTermOption", "equityAnnualFrequencyOption", "equityInterimFrequencyOption", "equityTargetPriceOption", "keyRateDurationBucketsSetting", "useEuroBondDuration", "overrideDateOption", "overrideDateComparison", "performanceColumnOption", "performancePivotPointColumnOption", "issuerCountColumnOption"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ColumnOption:
        """Create an instance of V1ColumnOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of aggregate_column_option
        if self.aggregate_column_option:
            _dict['aggregateColumnOption'] = self.aggregate_column_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of active_calculation_column_option
        if self.active_calculation_column_option:
            _dict['activeCalculationColumnOption'] = self.active_calculation_column_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of book_column_option
        if self.book_column_option:
            _dict['bookColumnOption'] = self.book_column_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of book_fx_conversion_column_option
        if self.book_fx_conversion_column_option:
            _dict['bookFxConversionColumnOption'] = self.book_fx_conversion_column_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of column_breakdown_option
        if self.column_breakdown_option:
            _dict['columnBreakdownOption'] = self.column_breakdown_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shock_value_option
        if self.shock_value_option:
            _dict['shockValueOption'] = self.shock_value_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidity_time_horizon
        if self.liquidity_time_horizon:
            _dict['liquidityTimeHorizon'] = self.liquidity_time_horizon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of participation_rate_override
        if self.participation_rate_override:
            _dict['participationRateOverride'] = self.participation_rate_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of include_transaction_cost
        if self.include_transaction_cost:
            _dict['includeTransactionCost'] = self.include_transaction_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of include_settlement_period
        if self.include_settlement_period:
            _dict['includeSettlementPeriod'] = self.include_settlement_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of include_hedge_fund
        if self.include_hedge_fund:
            _dict['includeHedgeFund'] = self.include_hedge_fund.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidity_nav_multiplier_setting
        if self.liquidity_nav_multiplier_setting:
            _dict['liquidityNavMultiplierSetting'] = self.liquidity_nav_multiplier_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidity_stress_test_config
        if self.liquidity_stress_test_config:
            _dict['liquidityStressTestConfig'] = self.liquidity_stress_test_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidity_advanced_setting
        if self.liquidity_advanced_setting:
            _dict['liquidityAdvancedSetting'] = self.liquidity_advanced_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fixed_cost_shock
        if self.fixed_cost_shock:
            _dict['fixedCostShock'] = self.fixed_cost_shock.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_impact_shock
        if self.market_impact_shock:
            _dict['marketImpactShock'] = self.market_impact_shock.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_depth_shock
        if self.market_depth_shock:
            _dict['marketDepthShock'] = self.market_depth_shock.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stress_analysis_flag
        if self.stress_analysis_flag:
            _dict['stressAnalysisFlag'] = self.stress_analysis_flag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tcost_stress_flag
        if self.tcost_stress_flag:
            _dict['tcostStressFlag'] = self.tcost_stress_flag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tcost_partial_liquidation_setting
        if self.tcost_partial_liquidation_setting:
            _dict['tcostPartialLiquidationSetting'] = self.tcost_partial_liquidation_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of esma_partial_liquidation_setting
        if self.esma_partial_liquidation_setting:
            _dict['esmaPartialLiquidationSetting'] = self.esma_partial_liquidation_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of esma_modified_only_partial_liquidation_setting
        if self.esma_modified_only_partial_liquidation_setting:
            _dict['esmaModifiedOnlyPartialLiquidationSetting'] = self.esma_modified_only_partial_liquidation_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standalone_unit
        if self.standalone_unit:
            _dict['standaloneUnit'] = self.standalone_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contribution_unit
        if self.contribution_unit:
            _dict['contributionUnit'] = self.contribution_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidity_setting
        if self.liquidity_setting:
            _dict['liquiditySetting'] = self.liquidity_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of horizon
        if self.horizon:
            _dict['horizon'] = self.horizon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidation_unit
        if self.liquidation_unit:
            _dict['liquidationUnit'] = self.liquidation_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidity_aggregation
        if self.liquidity_aggregation:
            _dict['liquidityAggregation'] = self.liquidity_aggregation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liquidity_all_aggregation
        if self.liquidity_all_aggregation:
            _dict['liquidityAllAggregation'] = self.liquidity_all_aggregation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capacity_approach
        if self.capacity_approach:
            _dict['capacityApproach'] = self.capacity_approach.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holiday_lookup
        if self.holiday_lookup:
            _dict['holidayLookup'] = self.holiday_lookup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advanced_percentage_rate
        if self.advanced_percentage_rate:
            _dict['advancedPercentageRate'] = self.advanced_percentage_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of days_to_unwind
        if self.days_to_unwind:
            _dict['daysToUnwind'] = self.days_to_unwind.to_dict()
        # override the default output from pydantic by calling `to_dict()` of precanned_stress_scenario
        if self.precanned_stress_scenario:
            _dict['precannedStressScenario'] = self.precanned_stress_scenario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_aggregation
        if self.custom_aggregation:
            _dict['customAggregation'] = self.custom_aggregation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of portfolio_name_column_option
        if self.portfolio_name_column_option:
            _dict['portfolioNameColumnOption'] = self.portfolio_name_column_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equity_frequency_option
        if self.equity_frequency_option:
            _dict['equityFrequencyOption'] = self.equity_frequency_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equity_estimates_option
        if self.equity_estimates_option:
            _dict['equityEstimatesOption'] = self.equity_estimates_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equity_long_term_option
        if self.equity_long_term_option:
            _dict['equityLongTermOption'] = self.equity_long_term_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equity_annual_frequency_option
        if self.equity_annual_frequency_option:
            _dict['equityAnnualFrequencyOption'] = self.equity_annual_frequency_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equity_interim_frequency_option
        if self.equity_interim_frequency_option:
            _dict['equityInterimFrequencyOption'] = self.equity_interim_frequency_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equity_target_price_option
        if self.equity_target_price_option:
            _dict['equityTargetPriceOption'] = self.equity_target_price_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_rate_duration_buckets_setting
        if self.key_rate_duration_buckets_setting:
            _dict['keyRateDurationBucketsSetting'] = self.key_rate_duration_buckets_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of use_euro_bond_duration
        if self.use_euro_bond_duration:
            _dict['useEuroBondDuration'] = self.use_euro_bond_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of override_date_option
        if self.override_date_option:
            _dict['overrideDateOption'] = self.override_date_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_column_option
        if self.performance_column_option:
            _dict['performanceColumnOption'] = self.performance_column_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_pivot_point_column_option
        if self.performance_pivot_point_column_option:
            _dict['performancePivotPointColumnOption'] = self.performance_pivot_point_column_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issuer_count_column_option
        if self.issuer_count_column_option:
            _dict['issuerCountColumnOption'] = self.issuer_count_column_option.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ColumnOption:
        """Create an instance of V1ColumnOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ColumnOption.parse_obj(obj)

        _obj = V1ColumnOption.parse_obj({
            "aggregate_column_option": V1AggregationColumnOption.from_dict(obj.get("aggregateColumnOption")) if obj.get("aggregateColumnOption") is not None else None,
            "active_calculation_column_option": V1ActiveCalculationColumnOption.from_dict(obj.get("activeCalculationColumnOption")) if obj.get("activeCalculationColumnOption") is not None else None,
            "book_column_option": V1BookColumnOption.from_dict(obj.get("bookColumnOption")) if obj.get("bookColumnOption") is not None else None,
            "book_fx_conversion_column_option": V1BookFxConversionColumnOption.from_dict(obj.get("bookFxConversionColumnOption")) if obj.get("bookFxConversionColumnOption") is not None else None,
            "column_breakdown_option": V1ColumnBreakdownOption.from_dict(obj.get("columnBreakdownOption")) if obj.get("columnBreakdownOption") is not None else None,
            "shock_value_option": V1ValueXXColumnOption.from_dict(obj.get("shockValueOption")) if obj.get("shockValueOption") is not None else None,
            "liquidity_time_horizon": V1LiquidityTimeHorizons.from_dict(obj.get("liquidityTimeHorizon")) if obj.get("liquidityTimeHorizon") is not None else None,
            "participation_rate_override": V1LiquidityParticipationRateOverride.from_dict(obj.get("participationRateOverride")) if obj.get("participationRateOverride") is not None else None,
            "include_transaction_cost": V1LiquidationIncludeTransactionCost.from_dict(obj.get("includeTransactionCost")) if obj.get("includeTransactionCost") is not None else None,
            "include_settlement_period": V1LiquidationIncludeSettlementPeriod.from_dict(obj.get("includeSettlementPeriod")) if obj.get("includeSettlementPeriod") is not None else None,
            "include_hedge_fund": V1LiquidationIncludeEquityHedgeFundCash.from_dict(obj.get("includeHedgeFund")) if obj.get("includeHedgeFund") is not None else None,
            "liquidity_nav_multiplier_setting": V1LiquidityNAVMultiplierSetting.from_dict(obj.get("liquidityNavMultiplierSetting")) if obj.get("liquidityNavMultiplierSetting") is not None else None,
            "liquidity_stress_test_config": V1LiquidityStressTestConfig.from_dict(obj.get("liquidityStressTestConfig")) if obj.get("liquidityStressTestConfig") is not None else None,
            "liquidity_advanced_setting": V1LiquidityAdvancedSetting.from_dict(obj.get("liquidityAdvancedSetting")) if obj.get("liquidityAdvancedSetting") is not None else None,
            "fixed_cost_shock": V1StressLiquidityFixedCostShock.from_dict(obj.get("fixedCostShock")) if obj.get("fixedCostShock") is not None else None,
            "market_impact_shock": V1StressLiquidityMarketImpactShock.from_dict(obj.get("marketImpactShock")) if obj.get("marketImpactShock") is not None else None,
            "market_depth_shock": V1StressLiquidityMarketDepthShock.from_dict(obj.get("marketDepthShock")) if obj.get("marketDepthShock") is not None else None,
            "stress_analysis_flag": V1StressLiquidityAnalysisFlag.from_dict(obj.get("stressAnalysisFlag")) if obj.get("stressAnalysisFlag") is not None else None,
            "tcost_stress_flag": V1StressLiquidityTcostFlag.from_dict(obj.get("tcostStressFlag")) if obj.get("tcostStressFlag") is not None else None,
            "tcost_partial_liquidation_setting": V1TCostPartialLiquidationSettings.from_dict(obj.get("tcostPartialLiquidationSetting")) if obj.get("tcostPartialLiquidationSetting") is not None else None,
            "esma_partial_liquidation_setting": V1EsmaPartialLiquidationSettings.from_dict(obj.get("esmaPartialLiquidationSetting")) if obj.get("esmaPartialLiquidationSetting") is not None else None,
            "esma_modified_only_partial_liquidation_setting": V1EsmaPartialLiquidationSettingsWithModifiedStrategyOnly.from_dict(obj.get("esmaModifiedOnlyPartialLiquidationSetting")) if obj.get("esmaModifiedOnlyPartialLiquidationSetting") is not None else None,
            "standalone_unit": V1StandaloneUnitSetting.from_dict(obj.get("standaloneUnit")) if obj.get("standaloneUnit") is not None else None,
            "contribution_unit": V1ContributionUnitSetting.from_dict(obj.get("contributionUnit")) if obj.get("contributionUnit") is not None else None,
            "liquidity_setting": V1SECLiquiditySettings.from_dict(obj.get("liquiditySetting")) if obj.get("liquiditySetting") is not None else None,
            "horizon": V1LiquidityHorizon.from_dict(obj.get("horizon")) if obj.get("horizon") is not None else None,
            "liquidation_unit": V1LiquidationUnit.from_dict(obj.get("liquidationUnit")) if obj.get("liquidationUnit") is not None else None,
            "liquidity_aggregation": V1LiquidityAggregationOption.from_dict(obj.get("liquidityAggregation")) if obj.get("liquidityAggregation") is not None else None,
            "liquidity_all_aggregation": V1LiquidityAggregationAllOptions.from_dict(obj.get("liquidityAllAggregation")) if obj.get("liquidityAllAggregation") is not None else None,
            "capacity_approach": V1ESMACapacityApproach.from_dict(obj.get("capacityApproach")) if obj.get("capacityApproach") is not None else None,
            "holiday_lookup": V1ESMAHolidayLookup.from_dict(obj.get("holidayLookup")) if obj.get("holidayLookup") is not None else None,
            "advanced_percentage_rate": V1LiquidityAdavancedParticipationRateOverride.from_dict(obj.get("advancedPercentageRate")) if obj.get("advancedPercentageRate") is not None else None,
            "days_to_unwind": V1DaysToUnwind.from_dict(obj.get("daysToUnwind")) if obj.get("daysToUnwind") is not None else None,
            "precanned_stress_scenario": V1PrecannedStressScenario.from_dict(obj.get("precannedStressScenario")) if obj.get("precannedStressScenario") is not None else None,
            "custom_aggregation": V1CustomAggregationColumnOption.from_dict(obj.get("customAggregation")) if obj.get("customAggregation") is not None else None,
            "portfolio_name_column_option": V1PortfolioNameColumnOption.from_dict(obj.get("portfolioNameColumnOption")) if obj.get("portfolioNameColumnOption") is not None else None,
            "equity_frequency_option": V1EquityFrequencyColumnOption.from_dict(obj.get("equityFrequencyOption")) if obj.get("equityFrequencyOption") is not None else None,
            "equity_estimates_option": V1EquityEstimatesColumnOption.from_dict(obj.get("equityEstimatesOption")) if obj.get("equityEstimatesOption") is not None else None,
            "equity_long_term_option": V1EquityLongTermColumnOption.from_dict(obj.get("equityLongTermOption")) if obj.get("equityLongTermOption") is not None else None,
            "equity_annual_frequency_option": V1EquityAnnualFrequencyColumnOption.from_dict(obj.get("equityAnnualFrequencyOption")) if obj.get("equityAnnualFrequencyOption") is not None else None,
            "equity_interim_frequency_option": V1EquityInterimFrequencyColumnOption.from_dict(obj.get("equityInterimFrequencyOption")) if obj.get("equityInterimFrequencyOption") is not None else None,
            "equity_target_price_option": V1EquityTargetPriceColumnOption.from_dict(obj.get("equityTargetPriceOption")) if obj.get("equityTargetPriceOption") is not None else None,
            "key_rate_duration_buckets_setting": V1KeyRateDurationBuckets.from_dict(obj.get("keyRateDurationBucketsSetting")) if obj.get("keyRateDurationBucketsSetting") is not None else None,
            "use_euro_bond_duration": V1EuroBondColumnOption.from_dict(obj.get("useEuroBondDuration")) if obj.get("useEuroBondDuration") is not None else None,
            "override_date_option": V1OverrideDateColumnOption.from_dict(obj.get("overrideDateOption")) if obj.get("overrideDateOption") is not None else None,
            "override_date_comparison": obj.get("overrideDateComparison"),
            "performance_column_option": V1PerformanceColumnOption.from_dict(obj.get("performanceColumnOption")) if obj.get("performanceColumnOption") is not None else None,
            "performance_pivot_point_column_option": V1PerformancePivotPointColumnOption.from_dict(obj.get("performancePivotPointColumnOption")) if obj.get("performancePivotPointColumnOption") is not None else None,
            "issuer_count_column_option": V1IssuerCountColumnOption.from_dict(obj.get("issuerCountColumnOption")) if obj.get("issuerCountColumnOption") is not None else None
        })
        return _obj

