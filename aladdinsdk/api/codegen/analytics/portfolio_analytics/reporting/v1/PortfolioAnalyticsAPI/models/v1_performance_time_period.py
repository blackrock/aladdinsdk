# coding: utf-8

"""
    Portfolio Analytics

    Generate Portfolio Analytics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_custom_time_period import V1CustomTimePeriod
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_frequency_time_period import V1FrequencyTimePeriod
from aladdinsdk.api.codegen.analytics.portfolio_analytics.reporting.v1.PortfolioAnalyticsAPI.models.v1_named_time_period import V1NamedTimePeriod

class V1PerformanceTimePeriod(BaseModel):
    """
    Options to specify the time period.
    """
    frequency_period: Optional[V1FrequencyTimePeriod] = Field(None, alias="frequencyPeriod")
    custom_time_period: Optional[V1CustomTimePeriod] = Field(None, alias="customTimePeriod")
    named_period: Optional[V1NamedTimePeriod] = Field(None, alias="namedPeriod")
    __properties = ["frequencyPeriod", "customTimePeriod", "namedPeriod"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PerformanceTimePeriod:
        """Create an instance of V1PerformanceTimePeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of frequency_period
        if self.frequency_period:
            _dict['frequencyPeriod'] = self.frequency_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_time_period
        if self.custom_time_period:
            _dict['customTimePeriod'] = self.custom_time_period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PerformanceTimePeriod:
        """Create an instance of V1PerformanceTimePeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PerformanceTimePeriod.parse_obj(obj)

        _obj = V1PerformanceTimePeriod.parse_obj({
            "frequency_period": V1FrequencyTimePeriod.from_dict(obj.get("frequencyPeriod")) if obj.get("frequencyPeriod") is not None else None,
            "custom_time_period": V1CustomTimePeriod.from_dict(obj.get("customTimePeriod")) if obj.get("customTimePeriod") is not None else None,
            "named_period": obj.get("namedPeriod")
        })
        return _obj

