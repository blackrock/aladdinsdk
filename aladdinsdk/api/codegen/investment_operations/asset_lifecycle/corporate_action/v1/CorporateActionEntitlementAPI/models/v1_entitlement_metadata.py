# coding: utf-8

"""
    Aladdin Corporate Action Entitlement

    API contains operations on Aladdin Corporate Action Entitlement resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_lock_column_details import V1LockColumnDetails

class V1EntitlementMetadata(BaseModel):
    """
    Entitlement metadata.
    """
    instruction_deadline_modifier: Optional[StrictStr] = Field(None, alias="instructionDeadlineModifier", description="User who manually edited the instruction deadline.")
    election_deadline_modifier: Optional[StrictStr] = Field(None, alias="electionDeadlineModifier", description="User who manually edited the election deadline.")
    custodian_provided_instruction_deadline_time: Optional[datetime] = Field(None, alias="custodianProvidedInstructionDeadlineTime", description="Instruction deadline provided by the custodian for the entitlement.")
    lock_column_details: Optional[conlist(V1LockColumnDetails)] = Field(None, alias="lockColumnDetails", description="Represents the locked columns details for this entitlement.")
    __properties = ["instructionDeadlineModifier", "electionDeadlineModifier", "custodianProvidedInstructionDeadlineTime", "lockColumnDetails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1EntitlementMetadata:
        """Create an instance of V1EntitlementMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in lock_column_details (list)
        _items = []
        if self.lock_column_details:
            for _item in self.lock_column_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lockColumnDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1EntitlementMetadata:
        """Create an instance of V1EntitlementMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1EntitlementMetadata.parse_obj(obj)

        _obj = V1EntitlementMetadata.parse_obj({
            "instruction_deadline_modifier": obj.get("instructionDeadlineModifier"),
            "election_deadline_modifier": obj.get("electionDeadlineModifier"),
            "custodian_provided_instruction_deadline_time": obj.get("custodianProvidedInstructionDeadlineTime"),
            "lock_column_details": [V1LockColumnDetails.from_dict(_item) for _item in obj.get("lockColumnDetails")] if obj.get("lockColumnDetails") is not None else None
        })
        return _obj

