# coding: utf-8

"""
    Aladdin Corporate Action Entitlement

    API contains operations on Aladdin Corporate Action Entitlement resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.corporate_action_entitlement_entitlement_state import CorporateActionEntitlementEntitlementState
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_election import V1Election
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_entitlement_metadata import V1EntitlementMetadata
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_entitlement_security_type import V1EntitlementSecurityType
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_entitlement_type import V1EntitlementType

class V1CorporateActionEntitlement(BaseModel):
    """
    CorporateActionEntitlement describes portfolio level distributin on a corporate action. When a corporate action takes place eg Stock split for a asset. The view of all portfolios having this asset is called entitlement.
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have a 'id' field.  Corporate action entitlement Id generated by Aladdin. Numeric value stored as a string.")
    corporate_action_id: Optional[StrictStr] = Field(None, alias="corporateActionId", description="Corporate action Id generated by Aladdin. Numeric value stored as a string.")
    portfolio_id: Optional[StrictStr] = Field(None, alias="portfolioId", description="Portfolio Id. Numeric value stored as a string.")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId", description="Aladdin asset identifier undergoing corporate action.")
    broker_id: Optional[StrictStr] = Field(None, alias="brokerId", description="Broker Id.")
    traded_entitlement_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tradedEntitlementAmount", description="Traded entitlement amount.")
    settled_entitlement_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="settledEntitlementAmount", description="Settled entitlement amount.")
    counter_party_entitlement_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="counterPartyEntitlementAmount", description="Counter party entitlement amount.")
    instruction_comment: Optional[StrictStr] = Field(None, alias="instructionComment", description="Entitlement instruction comments.")
    modifier: Optional[StrictStr] = Field(None, description="The user that last modified this record.")
    modify_time: Optional[datetime] = Field(None, alias="modifyTime", description="RTime when this record was modified.")
    touch_count: Optional[StrictInt] = Field(None, alias="touchCount", description="The number of times this record has been touched.")
    election_deadline_date: Optional[date] = Field(None, alias="electionDeadlineDate", description="Election deadline date.")
    instruction_deadline_time: Optional[datetime] = Field(None, alias="instructionDeadlineTime", description="Deadline time for entitlement instruction.")
    entitlement_state: Optional[CorporateActionEntitlementEntitlementState] = Field(None, alias="entitlementState")
    entitlement_security_type: Optional[V1EntitlementSecurityType] = Field(None, alias="entitlementSecurityType")
    entitlement_type: Optional[V1EntitlementType] = Field(None, alias="entitlementType")
    entitlement_full_type: Optional[StrictStr] = Field(None, alias="entitlementFullType", description="Represents Entitlement Full Type.")
    restriction: Optional[StrictStr] = Field(None, description="Restriction on the entitlement.")
    entitlement_metadata: Optional[V1EntitlementMetadata] = Field(None, alias="entitlementMetadata")
    elections: Optional[conlist(V1Election)] = Field(None, description="Describes the elections made for each of the corporate action entitlements and the instructions for the custodian. In the case where an entitlement's election is split between multiple options there will be multiple elections for the same entitlement Id.")
    __properties = ["id", "corporateActionId", "portfolioId", "assetId", "brokerId", "tradedEntitlementAmount", "settledEntitlementAmount", "counterPartyEntitlementAmount", "instructionComment", "modifier", "modifyTime", "touchCount", "electionDeadlineDate", "instructionDeadlineTime", "entitlementState", "entitlementSecurityType", "entitlementType", "entitlementFullType", "restriction", "entitlementMetadata", "elections"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CorporateActionEntitlement:
        """Create an instance of V1CorporateActionEntitlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of entitlement_metadata
        if self.entitlement_metadata:
            _dict['entitlementMetadata'] = self.entitlement_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in elections (list)
        _items = []
        if self.elections:
            for _item in self.elections:
                if _item:
                    _items.append(_item.to_dict())
            _dict['elections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CorporateActionEntitlement:
        """Create an instance of V1CorporateActionEntitlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CorporateActionEntitlement.parse_obj(obj)

        _obj = V1CorporateActionEntitlement.parse_obj({
            "id": obj.get("id"),
            "corporate_action_id": obj.get("corporateActionId"),
            "portfolio_id": obj.get("portfolioId"),
            "asset_id": obj.get("assetId"),
            "broker_id": obj.get("brokerId"),
            "traded_entitlement_amount": obj.get("tradedEntitlementAmount"),
            "settled_entitlement_amount": obj.get("settledEntitlementAmount"),
            "counter_party_entitlement_amount": obj.get("counterPartyEntitlementAmount"),
            "instruction_comment": obj.get("instructionComment"),
            "modifier": obj.get("modifier"),
            "modify_time": obj.get("modifyTime"),
            "touch_count": obj.get("touchCount"),
            "election_deadline_date": obj.get("electionDeadlineDate"),
            "instruction_deadline_time": obj.get("instructionDeadlineTime"),
            "entitlement_state": obj.get("entitlementState"),
            "entitlement_security_type": obj.get("entitlementSecurityType"),
            "entitlement_type": obj.get("entitlementType"),
            "entitlement_full_type": obj.get("entitlementFullType"),
            "restriction": obj.get("restriction"),
            "entitlement_metadata": V1EntitlementMetadata.from_dict(obj.get("entitlementMetadata")) if obj.get("entitlementMetadata") is not None else None,
            "elections": [V1Election.from_dict(_item) for _item in obj.get("elections")] if obj.get("elections") is not None else None
        })
        return _obj

