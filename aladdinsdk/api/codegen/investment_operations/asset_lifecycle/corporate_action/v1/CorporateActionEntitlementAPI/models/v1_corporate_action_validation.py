# coding: utf-8

"""
    Aladdin Corporate Action Entitlement

    API contains operations on Aladdin Corporate Action Entitlement resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_corporate_action_validation_severity import V1CorporateActionValidationSeverity
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_validation_code import V1ValidationCode

class V1CorporateActionValidation(BaseModel):
    """
    CorporateActionValidation describes the validation result for any operation.
    """
    corporate_action_validation_severity: Optional[V1CorporateActionValidationSeverity] = Field(None, alias="corporateActionValidationSeverity")
    validation_code: Optional[V1ValidationCode] = Field(None, alias="validationCode")
    validation_message: StrictStr = Field(..., alias="validationMessage", description="A description of the violation.")
    __properties = ["corporateActionValidationSeverity", "validationCode", "validationMessage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CorporateActionValidation:
        """Create an instance of V1CorporateActionValidation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CorporateActionValidation:
        """Create an instance of V1CorporateActionValidation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CorporateActionValidation.parse_obj(obj)

        _obj = V1CorporateActionValidation.parse_obj({
            "corporate_action_validation_severity": obj.get("corporateActionValidationSeverity"),
            "validation_code": obj.get("validationCode"),
            "validation_message": obj.get("validationMessage")
        })
        return _obj

