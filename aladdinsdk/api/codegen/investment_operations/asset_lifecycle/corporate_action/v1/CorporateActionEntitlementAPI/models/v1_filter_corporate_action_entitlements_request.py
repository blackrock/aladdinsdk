# coding: utf-8

"""
    Aladdin Corporate Action Entitlement

    API contains operations on Aladdin Corporate Action Entitlement resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_corporate_action_entitlement_query import V1CorporateActionEntitlementQuery
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionEntitlementAPI.models.v1_entitlement_load_flag import V1EntitlementLoadFlag

class V1FilterCorporateActionEntitlementsRequest(BaseModel):
    """
    The request message for CorporateActionEntitlementAPI.FilterCorporateActionEntitlements.
    """
    corporate_action_entitlement_query: Optional[V1CorporateActionEntitlementQuery] = Field(None, alias="corporateActionEntitlementQuery")
    page_token: Optional[StrictStr] = Field(None, alias="pageToken", description="A page token, received from a previous 'FilterCorporateActionEntitlements' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'FilterCorporateActionEntitlements' must match the call that provided the page token. This value is currently not being used.")
    page_size: Optional[StrictInt] = Field(None, alias="pageSize", description="The maximum number of CorporateActions to return. The service may return fewer than this value. If unspecified, at most 250 CorporateActions will be returned. The maximum value is 250; values above 250 will be coerced to 250. This value is currently not being used.")
    entitlement_load_flags: Optional[conlist(V1EntitlementLoadFlag)] = Field(None, alias="entitlementLoadFlags", description="Represents corporate action entitlement load flags.")
    __properties = ["corporateActionEntitlementQuery", "pageToken", "pageSize", "entitlementLoadFlags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterCorporateActionEntitlementsRequest:
        """Create an instance of V1FilterCorporateActionEntitlementsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of corporate_action_entitlement_query
        if self.corporate_action_entitlement_query:
            _dict['corporateActionEntitlementQuery'] = self.corporate_action_entitlement_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterCorporateActionEntitlementsRequest:
        """Create an instance of V1FilterCorporateActionEntitlementsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterCorporateActionEntitlementsRequest.parse_obj(obj)

        _obj = V1FilterCorporateActionEntitlementsRequest.parse_obj({
            "corporate_action_entitlement_query": V1CorporateActionEntitlementQuery.from_dict(obj.get("corporateActionEntitlementQuery")) if obj.get("corporateActionEntitlementQuery") is not None else None,
            "page_token": obj.get("pageToken"),
            "page_size": obj.get("pageSize"),
            "entitlement_load_flags": obj.get("entitlementLoadFlags")
        })
        return _obj

