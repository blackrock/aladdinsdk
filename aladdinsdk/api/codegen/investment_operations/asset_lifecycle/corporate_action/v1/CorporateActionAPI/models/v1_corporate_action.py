# coding: utf-8

"""
    Aladdin Corporate Action

    A corporate action is an event triggered by a public company that changes an equity or fixed income security issued by the company. There are two main categories - Mandatory and Voluntary.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.type_date_time import TypeDateTime
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_corporate_action_link_state import V1CorporateActionLinkState
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_corporate_action_option import V1CorporateActionOption
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_corporate_action_workflow_state import V1CorporateActionWorkflowState
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_option_alignment_state import V1OptionAlignmentState
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_tax_code import V1TaxCode
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_voluntary_mandatory_code import V1VoluntaryMandatoryCode

class V1CorporateAction(BaseModel):
    """
    CorporateActions describes an event triggered by a public company that changes an equity or fixed income security issued by the company. There are many different types of corporate action but they can be bucketed into two main categories - mandatory and voluntary. Mandatory events do not require any action from the shareholder. Cash dividends and stocks splits are examples of mandatory corporate action. Voluntary corporate action are events where shareholders may elect to participate in the event. Examples of voluntary events include tender offers and rights subscriptions.
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have an 'id' field.  Id describes the computer or human assigned resource identifier. String represenation of numeric internal corporate action Id.")
    corporate_action_type: Optional[StrictStr] = Field(None, alias="corporateActionType", description="Code used to categorize corporate action types.")
    corporate_action_link_state: Optional[V1CorporateActionLinkState] = Field(None, alias="corporateActionLinkState")
    voluntary_mandatory_code: Optional[V1VoluntaryMandatoryCode] = Field(None, alias="voluntaryMandatoryCode")
    corporate_action_workflow_state: Optional[V1CorporateActionWorkflowState] = Field(None, alias="corporateActionWorkflowState")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    ex_date: Optional[date] = Field(None, alias="exDate", description="First date on which shares are purchased without entitlement to the corporate action. Date is in Aladdin Server timezone.")
    important_date: Optional[date] = Field(None, alias="importantDate", description="Date on a specific corporate action calculated by a specific date per event type. Used to determine if a corporate action is unique. May be blank. Date is in Aladdin Server timezone.")
    effective_date: Optional[date] = Field(None, alias="effectiveDate", description="Date on which a corporate action becomes effective. Date is in Aladdin Server timezone.")
    corporate_action_expiration_time: Optional[TypeDateTime] = Field(None, alias="corporateActionExpirationTime")
    early_expiration_time: Optional[TypeDateTime] = Field(None, alias="earlyExpirationTime")
    payable_date: Optional[date] = Field(None, alias="payableDate", description="The date on which payment or shares are sent to eligible holders. Date is in Aladdin Server timezone.")
    record_date: Optional[date] = Field(None, alias="recordDate", description="Date on which ownership is established to determine payment of a distribution. Date is in Aladdin Server timezone.")
    first_sub_date: Optional[date] = Field(None, alias="firstSubDate", description="Subscription begin date. First date on which a rights subscription can be accepted. Date is in Aladdin Server timezone.")
    first_trade_date: Optional[date] = Field(None, alias="firstTradeDate", description="First date on which an entitlement to rights can be sold to another party. Date is in Aladdin Server timezone.")
    last_sub_date: Optional[date] = Field(None, alias="lastSubDate", description="Last Date on which a subscription can be executed. Date is in Aladdin Server timezone.")
    last_trade_date: Optional[date] = Field(None, alias="lastTradeDate", description="Last Date on which an entitlement to rights can be sold to another party. Date is in Aladdin Server timezone.")
    processing_date: Optional[date] = Field(None, alias="processingDate", description="Aladdin specific date on which the corporate action is processed. For Events with parent type = 'RES or 'SU' or 'WE', the Processing date = Effective Date - two business days. For all other events, processingDate = exDate or ImportantDate. Date is in Aladdin Server timezone.")
    trade_eligibility_date: Optional[date] = Field(None, alias="tradeEligibilityDate", description="Aladdin specific date for position to be traded by in order to be eligible for entitlement. Date is in Aladdin Server timezone.")
    settlement_eligibility_date: Optional[date] = Field(None, alias="settlementEligibilityDate", description="Aladdin-specific date for position to be settled by in order to be eligible for entitlement. Typically populates with due bill off date or recordDate. If those dates are not available, then exDate -1 , importantDate -1. Date is in Aladdin Server timezone.")
    lifecycle_start_date: Optional[date] = Field(None, alias="lifecycleStartDate", description="Aladdin-specific date on which the corporate action event first appears on  the Dashboard Events Monitor. Date is in Aladdin Server timezone.")
    lifecycle_end_date: Optional[date] = Field(None, alias="lifecycleEndDate", description="Aladdin specific date on which the approved corporate action event falls of the Dashboard Events Monitor. This date is the latest of (Ex Date/Important Date + 5), (Payable Date + 1), or (Expiration Date + 1). Derived from source. Date is in Aladdin Server timezone.")
    external_issue_description: Optional[StrictStr] = Field(None, alias="externalIssueDescription", description="Text information about the security issue. This field is sourced from external feed.")
    issuer_description: Optional[StrictStr] = Field(None, alias="issuerDescription")
    offeror_name: Optional[StrictStr] = Field(None, alias="offerorName", description="Name of the company or entity making an offer.")
    modifier: Optional[StrictStr] = None
    confirmer: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime", description="The date/time when this corporate action was last modified. Time is in Aladdin Server timezone.")
    confirm_time: Optional[datetime] = Field(None, alias="confirmTime", description="The date/time when this corporate action was confirmed. Time is in Aladdin Server timezone.")
    minimum_trade_size: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="minimumTradeSize", description="Minimum number of shares to be exercised to participate.")
    tax_code: Optional[V1TaxCode] = Field(None, alias="taxCode")
    corporate_action_options: Optional[conlist(V1CorporateActionOption)] = Field(None, alias="corporateActionOptions", description="List of options for this corporate action (only one entry for mandatory corporate action). Only one of these can be a default option for a corporate action event.")
    option_alignment_state: Optional[V1OptionAlignmentState] = Field(None, alias="optionAlignmentState")
    external_corporate_action_id: Optional[StrictStr] = Field(None, alias="externalCorporateActionId", description="Vendor or custodian-specific reference number to identify corporate action event.")
    corporate_action_data_source: Optional[StrictStr] = Field(None, alias="corporateActionDataSource", description="Vendor or custodian that provided the corporate action feed. 'COMPOSITE' value represents gold copy of Aladdin Record.")
    __properties = ["id", "corporateActionType", "corporateActionLinkState", "voluntaryMandatoryCode", "corporateActionWorkflowState", "assetId", "exDate", "importantDate", "effectiveDate", "corporateActionExpirationTime", "earlyExpirationTime", "payableDate", "recordDate", "firstSubDate", "firstTradeDate", "lastSubDate", "lastTradeDate", "processingDate", "tradeEligibilityDate", "settlementEligibilityDate", "lifecycleStartDate", "lifecycleEndDate", "externalIssueDescription", "issuerDescription", "offerorName", "modifier", "confirmer", "modifyTime", "confirmTime", "minimumTradeSize", "taxCode", "corporateActionOptions", "optionAlignmentState", "externalCorporateActionId", "corporateActionDataSource"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CorporateAction:
        """Create an instance of V1CorporateAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of corporate_action_expiration_time
        if self.corporate_action_expiration_time:
            _dict['corporateActionExpirationTime'] = self.corporate_action_expiration_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of early_expiration_time
        if self.early_expiration_time:
            _dict['earlyExpirationTime'] = self.early_expiration_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in corporate_action_options (list)
        _items = []
        if self.corporate_action_options:
            for _item in self.corporate_action_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['corporateActionOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CorporateAction:
        """Create an instance of V1CorporateAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CorporateAction.parse_obj(obj)

        _obj = V1CorporateAction.parse_obj({
            "id": obj.get("id"),
            "corporate_action_type": obj.get("corporateActionType"),
            "corporate_action_link_state": obj.get("corporateActionLinkState"),
            "voluntary_mandatory_code": obj.get("voluntaryMandatoryCode"),
            "corporate_action_workflow_state": obj.get("corporateActionWorkflowState"),
            "asset_id": obj.get("assetId"),
            "ex_date": obj.get("exDate"),
            "important_date": obj.get("importantDate"),
            "effective_date": obj.get("effectiveDate"),
            "corporate_action_expiration_time": TypeDateTime.from_dict(obj.get("corporateActionExpirationTime")) if obj.get("corporateActionExpirationTime") is not None else None,
            "early_expiration_time": TypeDateTime.from_dict(obj.get("earlyExpirationTime")) if obj.get("earlyExpirationTime") is not None else None,
            "payable_date": obj.get("payableDate"),
            "record_date": obj.get("recordDate"),
            "first_sub_date": obj.get("firstSubDate"),
            "first_trade_date": obj.get("firstTradeDate"),
            "last_sub_date": obj.get("lastSubDate"),
            "last_trade_date": obj.get("lastTradeDate"),
            "processing_date": obj.get("processingDate"),
            "trade_eligibility_date": obj.get("tradeEligibilityDate"),
            "settlement_eligibility_date": obj.get("settlementEligibilityDate"),
            "lifecycle_start_date": obj.get("lifecycleStartDate"),
            "lifecycle_end_date": obj.get("lifecycleEndDate"),
            "external_issue_description": obj.get("externalIssueDescription"),
            "issuer_description": obj.get("issuerDescription"),
            "offeror_name": obj.get("offerorName"),
            "modifier": obj.get("modifier"),
            "confirmer": obj.get("confirmer"),
            "modify_time": obj.get("modifyTime"),
            "confirm_time": obj.get("confirmTime"),
            "minimum_trade_size": obj.get("minimumTradeSize"),
            "tax_code": obj.get("taxCode"),
            "corporate_action_options": [V1CorporateActionOption.from_dict(_item) for _item in obj.get("corporateActionOptions")] if obj.get("corporateActionOptions") is not None else None,
            "option_alignment_state": obj.get("optionAlignmentState"),
            "external_corporate_action_id": obj.get("externalCorporateActionId"),
            "corporate_action_data_source": obj.get("corporateActionDataSource")
        })
        return _obj

