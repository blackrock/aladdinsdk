# coding: utf-8

"""
    Aladdin Corporate Action

    A corporate action is an event triggered by a public company that changes an equity or fixed income security issued by the company. There are two main categories - Mandatory and Voluntary.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_payout import V1Payout

class V1CorporateActionOption(BaseModel):
    """
    Options of corporate action.
    """
    default_option: Optional[StrictBool] = Field(None, alias="defaultOption", description="If 'TRUE', then the option is automatically elected when entitlement holder makes no election. By default, the value is - 'FALSE'.")
    recommended: Optional[StrictBool] = Field(None, description="Indicates whether the option is recommended.")
    recommender: Optional[StrictStr] = None
    option_description: Optional[StrictStr] = Field(None, alias="optionDescription", description="Full desciption of the option. For some events, additional information may assist in choosing one option type over another.")
    option_number: Optional[StrictInt] = Field(None, alias="optionNumber", description="Option reference number.")
    option_sub_type: Optional[StrictStr] = Field(None, alias="optionSubType", description="Option subtype.")
    option_type: Optional[StrictStr] = Field(None, alias="optionType", description="Option type.")
    payouts: Optional[conlist(V1Payout)] = Field(None, description="List of payouts - cash and security movements comprising this option.")
    __properties = ["defaultOption", "recommended", "recommender", "optionDescription", "optionNumber", "optionSubType", "optionType", "payouts"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CorporateActionOption:
        """Create an instance of V1CorporateActionOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in payouts (list)
        _items = []
        if self.payouts:
            for _item in self.payouts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payouts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CorporateActionOption:
        """Create an instance of V1CorporateActionOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CorporateActionOption.parse_obj(obj)

        _obj = V1CorporateActionOption.parse_obj({
            "default_option": obj.get("defaultOption"),
            "recommended": obj.get("recommended"),
            "recommender": obj.get("recommender"),
            "option_description": obj.get("optionDescription"),
            "option_number": obj.get("optionNumber"),
            "option_sub_type": obj.get("optionSubType"),
            "option_type": obj.get("optionType"),
            "payouts": [V1Payout.from_dict(_item) for _item in obj.get("payouts")] if obj.get("payouts") is not None else None
        })
        return _obj

