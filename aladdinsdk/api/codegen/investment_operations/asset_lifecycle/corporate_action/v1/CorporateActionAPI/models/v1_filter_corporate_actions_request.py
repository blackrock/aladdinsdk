# coding: utf-8

"""
    Aladdin Corporate Action

    A corporate action is an event triggered by a public company that changes an equity or fixed income security issued by the company. There are two main categories - Mandatory and Voluntary.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_corporate_action_query import V1CorporateActionQuery
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_corporate_action_view import V1CorporateActionView

class V1FilterCorporateActionsRequest(BaseModel):
    """
    The request message for CorporateActionAPI.FilterCorporateActions.
    """
    corporate_action_query: Optional[V1CorporateActionQuery] = Field(None, alias="corporateActionQuery")
    page_token: Optional[StrictStr] = Field(None, alias="pageToken", description="A page token, received from a previous 'FilterCorporateActions' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'FilterCorporateActions' must match the call that provided the page token. This value is currently not being used.")
    page_size: Optional[StrictInt] = Field(None, alias="pageSize", description="The maximum number of CorporateActions to return. The service may return fewer than this value. If unspecified, at most 250 CorporateActions will be returned. The maximum value is 250; values above 250 will be coerced to 250. This value is currently not being used.")
    corporate_action_view: Optional[V1CorporateActionView] = Field(None, alias="corporateActionView")
    __properties = ["corporateActionQuery", "pageToken", "pageSize", "corporateActionView"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterCorporateActionsRequest:
        """Create an instance of V1FilterCorporateActionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of corporate_action_query
        if self.corporate_action_query:
            _dict['corporateActionQuery'] = self.corporate_action_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterCorporateActionsRequest:
        """Create an instance of V1FilterCorporateActionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterCorporateActionsRequest.parse_obj(obj)

        _obj = V1FilterCorporateActionsRequest.parse_obj({
            "corporate_action_query": V1CorporateActionQuery.from_dict(obj.get("corporateActionQuery")) if obj.get("corporateActionQuery") is not None else None,
            "page_token": obj.get("pageToken"),
            "page_size": obj.get("pageSize"),
            "corporate_action_view": obj.get("corporateActionView")
        })
        return _obj

