# coding: utf-8

"""
    Aladdin Corporate Action

    A corporate action is an event triggered by a public company that changes an equity or fixed income security issued by the company. There are two main categories - Mandatory and Voluntary.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_corporate_action_workflow_state import V1CorporateActionWorkflowState
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.corporate_action.v1.CorporateActionAPI.models.v1_voluntary_mandatory_code import V1VoluntaryMandatoryCode

class V1CorporateActionQuery(BaseModel):
    """
    The query required to perform a CorporateActionAPI.FilterCorporateActions query.
    """
    ids: Optional[conlist(StrictStr)] = Field(None, description="Represents internal corporate action Ids. If corporate Ids are provided in the search request then all other criteria  fields would be ignored.")
    external_corporate_action_ids: Optional[conlist(StrictStr)] = Field(None, alias="externalCorporateActionIds", description="Represents corporate action external Ids.")
    asset_ids: Optional[conlist(StrictStr)] = Field(None, alias="assetIds", description="Represents corporate action asset Ids.")
    corporate_action_types: Optional[conlist(StrictStr)] = Field(None, alias="corporateActionTypes", description="Represents corporate action types.")
    corporate_action_sub_types: Optional[conlist(StrictStr)] = Field(None, alias="corporateActionSubTypes", description="Represents corporate action sub types.")
    lifecycle_date: Optional[date] = Field(None, alias="lifecycleDate", description="Lifecycle date. This date is checked to see if it is between the lifecycle  start date and end date. Defaults to today if not specified. Date is in Aladdin Server timezone.")
    corporate_action_data_sources: Optional[conlist(StrictStr)] = Field(None, alias="corporateActionDataSources", description="Vendor or custodian that provided the corporate action feed. 'COMPOSITE' value represents gold copy of Aladdin Record.")
    corporate_action_workflow_states: Optional[conlist(V1CorporateActionWorkflowState)] = Field(None, alias="corporateActionWorkflowStates", description="Represents workflow states.")
    start_processing_date: Optional[date] = Field(None, alias="startProcessingDate", description="Start processing date. Date is in Aladdin Server timezone.")
    end_processing_date: Optional[date] = Field(None, alias="endProcessingDate", description="End processing date. Date is in Aladdin Server timezone.")
    start_expiration_date: Optional[date] = Field(None, alias="startExpirationDate", description="Start expiration date. Date is in Aladdin Server timezone.")
    end_expiration_date: Optional[date] = Field(None, alias="endExpirationDate")
    start_payable_date: Optional[date] = Field(None, alias="startPayableDate", description="Start Payable date. Date is in Aladdin Server timezone.")
    end_payable_date: Optional[date] = Field(None, alias="endPayableDate", description="End Payable date. Date is in Aladdin Server timezone.")
    start_modify_time: Optional[datetime] = Field(None, alias="startModifyTime", description="Start Modify time. Time is in Aladdin Server timezone.")
    end_modify_time: Optional[datetime] = Field(None, alias="endModifyTime", description="End modify time. Time is in Aladdin Server timezone.")
    voluntary_mandatory_code: Optional[V1VoluntaryMandatoryCode] = Field(None, alias="voluntaryMandatoryCode")
    portfolio_group_name: Optional[StrictStr] = Field(None, alias="portfolioGroupName", description="Portfolio group containing asset Ids related to corporate action events.")
    __properties = ["ids", "externalCorporateActionIds", "assetIds", "corporateActionTypes", "corporateActionSubTypes", "lifecycleDate", "corporateActionDataSources", "corporateActionWorkflowStates", "startProcessingDate", "endProcessingDate", "startExpirationDate", "endExpirationDate", "startPayableDate", "endPayableDate", "startModifyTime", "endModifyTime", "voluntaryMandatoryCode", "portfolioGroupName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CorporateActionQuery:
        """Create an instance of V1CorporateActionQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CorporateActionQuery:
        """Create an instance of V1CorporateActionQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CorporateActionQuery.parse_obj(obj)

        _obj = V1CorporateActionQuery.parse_obj({
            "ids": obj.get("ids"),
            "external_corporate_action_ids": obj.get("externalCorporateActionIds"),
            "asset_ids": obj.get("assetIds"),
            "corporate_action_types": obj.get("corporateActionTypes"),
            "corporate_action_sub_types": obj.get("corporateActionSubTypes"),
            "lifecycle_date": obj.get("lifecycleDate"),
            "corporate_action_data_sources": obj.get("corporateActionDataSources"),
            "corporate_action_workflow_states": obj.get("corporateActionWorkflowStates"),
            "start_processing_date": obj.get("startProcessingDate"),
            "end_processing_date": obj.get("endProcessingDate"),
            "start_expiration_date": obj.get("startExpirationDate"),
            "end_expiration_date": obj.get("endExpirationDate"),
            "start_payable_date": obj.get("startPayableDate"),
            "end_payable_date": obj.get("endPayableDate"),
            "start_modify_time": obj.get("startModifyTime"),
            "end_modify_time": obj.get("endModifyTime"),
            "voluntary_mandatory_code": obj.get("voluntaryMandatoryCode"),
            "portfolio_group_name": obj.get("portfolioGroupName")
        })
        return _obj

