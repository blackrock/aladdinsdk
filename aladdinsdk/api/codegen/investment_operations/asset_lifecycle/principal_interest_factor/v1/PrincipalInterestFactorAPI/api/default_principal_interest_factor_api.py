# coding: utf-8

"""
    Principal and Interest Factor

    Principal and Interest Factors (PIFs) generally represent the amount of payment per 1000 of Original Face currency units value you currently hold in the given asset, and are used in conjunction with position data to generate cashflows. This API allows for filtering and retrieval of PIF records based on a number of criteria including assetId, dates, security groups, currency and more.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import date, datetime

from pydantic import Field, StrictStr

from typing import Any, Dict, Optional

from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_batch_create_principal_interest_factors_request import V1BatchCreatePrincipalInterestFactorsRequest
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_batch_create_principal_interest_factors_response import V1BatchCreatePrincipalInterestFactorsResponse
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_batch_update_principal_interest_factors_request import V1BatchUpdatePrincipalInterestFactorsRequest
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_batch_update_principal_interest_factors_response import V1BatchUpdatePrincipalInterestFactorsResponse
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_filter_principal_interest_factor_audit_trails_request import V1FilterPrincipalInterestFactorAuditTrailsRequest
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_filter_principal_interest_factor_audit_trails_response import V1FilterPrincipalInterestFactorAuditTrailsResponse
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_filter_principal_interest_factors_request import V1FilterPrincipalInterestFactorsRequest
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_filter_principal_interest_factors_response import V1FilterPrincipalInterestFactorsResponse
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_list_principal_interest_factors_request import V1ListPrincipalInterestFactorsRequest
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_list_principal_interest_factors_response import V1ListPrincipalInterestFactorsResponse
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_principal_interest_factor import V1PrincipalInterestFactor

from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.api_client import ApiClient
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultPrincipalInterestFactorAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def principal_interest_factor_api_batch_create_principal_interest_factors(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreatePrincipalInterestFactorsRequest, **kwargs) -> V1BatchCreatePrincipalInterestFactorsResponse:  # noqa: E501
        """Batch create Principal Interest Factor records  # noqa: E501

        Allows for one to create multiple principal and interest factors (PIFs)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_batch_create_principal_interest_factors(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreatePrincipalInterestFactorsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchCreatePrincipalInterestFactorsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_batch_create_principal_interest_factors_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_batch_create_principal_interest_factors_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_batch_create_principal_interest_factors_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreatePrincipalInterestFactorsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch create Principal Interest Factor records  # noqa: E501

        Allows for one to create multiple principal and interest factors (PIFs)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_batch_create_principal_interest_factors_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreatePrincipalInterestFactorsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchCreatePrincipalInterestFactorsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_batch_create_principal_interest_factors" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchCreatePrincipalInterestFactorsResponse",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactors:batchCreate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def principal_interest_factor_api_batch_update_principal_interest_factors(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdatePrincipalInterestFactorsRequest, **kwargs) -> V1BatchUpdatePrincipalInterestFactorsResponse:  # noqa: E501
        """Batch update Principal Interest Factor records  # noqa: E501

        Allows for one to update multiple principal and interest factors (PIFs)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_batch_update_principal_interest_factors(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdatePrincipalInterestFactorsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchUpdatePrincipalInterestFactorsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_batch_update_principal_interest_factors_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_batch_update_principal_interest_factors_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_batch_update_principal_interest_factors_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdatePrincipalInterestFactorsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch update Principal Interest Factor records  # noqa: E501

        Allows for one to update multiple principal and interest factors (PIFs)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_batch_update_principal_interest_factors_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdatePrincipalInterestFactorsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchUpdatePrincipalInterestFactorsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_batch_update_principal_interest_factors" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchUpdatePrincipalInterestFactorsResponse",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactors:batchUpdate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def principal_interest_factor_api_create_principal_interest_factor(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1PrincipalInterestFactor, Field(..., description="PIF to create")], **kwargs) -> V1PrincipalInterestFactor:  # noqa: E501
        """Create new Principal Interest Factor  # noqa: E501

        Allows for one to create new principal and interest factor (PIF)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_create_principal_interest_factor(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: PIF to create (required)
        :type body: V1PrincipalInterestFactor
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1PrincipalInterestFactor
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_create_principal_interest_factor_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_create_principal_interest_factor_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_create_principal_interest_factor_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1PrincipalInterestFactor, Field(..., description="PIF to create")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create new Principal Interest Factor  # noqa: E501

        Allows for one to create new principal and interest factor (PIF)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_create_principal_interest_factor_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: PIF to create (required)
        :type body: V1PrincipalInterestFactor
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1PrincipalInterestFactor, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_create_principal_interest_factor" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1PrincipalInterestFactor",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactors', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def principal_interest_factor_api_delete_principal_interest_factor(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], key_asset_id : Annotated[StrictStr, Field(..., description="Asset Identifier.")], key_record_date : Annotated[date, Field(..., description="represents record date of the PIF (i.e. trade date).")], key_payment_date : Annotated[date, Field(..., description="represents payment date of the PIF (i.e. settle date).")], key_currency_code : Annotated[StrictStr, Field(..., description="Currency code.")], **kwargs) -> object:  # noqa: E501
        """Delete Principal Interest Factor  # noqa: E501

        Allows for one to delete a principal and interest factor (PIF) (-- api-linter: core::0135::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because the resource doesn't have a non-composite id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_delete_principal_interest_factor(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, key_asset_id, key_record_date, key_payment_date, key_currency_code, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param key_asset_id: Asset Identifier. (required)
        :type key_asset_id: str
        :param key_record_date: represents record date of the PIF (i.e. trade date). (required)
        :type key_record_date: date
        :param key_payment_date: represents payment date of the PIF (i.e. settle date). (required)
        :type key_payment_date: date
        :param key_currency_code: Currency code. (required)
        :type key_currency_code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_delete_principal_interest_factor_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_delete_principal_interest_factor_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, key_asset_id, key_record_date, key_payment_date, key_currency_code, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_delete_principal_interest_factor_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], key_asset_id : Annotated[StrictStr, Field(..., description="Asset Identifier.")], key_record_date : Annotated[date, Field(..., description="represents record date of the PIF (i.e. trade date).")], key_payment_date : Annotated[date, Field(..., description="represents payment date of the PIF (i.e. settle date).")], key_currency_code : Annotated[StrictStr, Field(..., description="Currency code.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Principal Interest Factor  # noqa: E501

        Allows for one to delete a principal and interest factor (PIF) (-- api-linter: core::0135::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because the resource doesn't have a non-composite id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_delete_principal_interest_factor_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, key_asset_id, key_record_date, key_payment_date, key_currency_code, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param key_asset_id: Asset Identifier. (required)
        :type key_asset_id: str
        :param key_record_date: represents record date of the PIF (i.e. trade date). (required)
        :type key_record_date: date
        :param key_payment_date: represents payment date of the PIF (i.e. settle date). (required)
        :type key_payment_date: date
        :param key_currency_code: Currency code. (required)
        :type key_currency_code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'key_asset_id',
            'key_record_date',
            'key_payment_date',
            'key_currency_code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_delete_principal_interest_factor" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('key_asset_id') is not None:  # noqa: E501
            _query_params.append(('key.assetId', _params['key_asset_id']))

        if _params.get('key_record_date') is not None:  # noqa: E501
            if isinstance(_params['key_record_date'], datetime):
                _query_params.append(('key.recordDate', _params['key_record_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('key.recordDate', _params['key_record_date']))

        if _params.get('key_payment_date') is not None:  # noqa: E501
            if isinstance(_params['key_payment_date'], datetime):
                _query_params.append(('key.paymentDate', _params['key_payment_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('key.paymentDate', _params['key_payment_date']))

        if _params.get('key_currency_code') is not None:  # noqa: E501
            _query_params.append(('key.currencyCode', _params['key_currency_code']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactor', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def principal_interest_factor_api_filter_principal_interest_factor_audit_trails(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterPrincipalInterestFactorAuditTrailsRequest, **kwargs) -> V1FilterPrincipalInterestFactorAuditTrailsResponse:  # noqa: E501
        """Filter PIF's audit trails  # noqa: E501

        Allows user to get Audit Trails for a specific PIF (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: Trails is plural. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_filter_principal_interest_factor_audit_trails(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterPrincipalInterestFactorAuditTrailsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterPrincipalInterestFactorAuditTrailsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_filter_principal_interest_factor_audit_trails_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_filter_principal_interest_factor_audit_trails_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_filter_principal_interest_factor_audit_trails_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterPrincipalInterestFactorAuditTrailsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter PIF's audit trails  # noqa: E501

        Allows user to get Audit Trails for a specific PIF (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: Trails is plural. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_filter_principal_interest_factor_audit_trails_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterPrincipalInterestFactorAuditTrailsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterPrincipalInterestFactorAuditTrailsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_filter_principal_interest_factor_audit_trails" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterPrincipalInterestFactorAuditTrailsResponse",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactorAuditTrails:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def principal_interest_factor_api_filter_principal_interest_factors(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterPrincipalInterestFactorsRequest, **kwargs) -> V1FilterPrincipalInterestFactorsResponse:  # noqa: E501
        """Filter Principal Interest Factor records  # noqa: E501

        Allows for retrieval of principal and interest factors (PIFs) by various criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_filter_principal_interest_factors(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterPrincipalInterestFactorsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterPrincipalInterestFactorsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_filter_principal_interest_factors_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_filter_principal_interest_factors_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_filter_principal_interest_factors_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterPrincipalInterestFactorsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Principal Interest Factor records  # noqa: E501

        Allows for retrieval of principal and interest factors (PIFs) by various criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_filter_principal_interest_factors_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterPrincipalInterestFactorsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterPrincipalInterestFactorsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_filter_principal_interest_factors" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterPrincipalInterestFactorsResponse",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactors:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def principal_interest_factor_api_get_principal_interest_factor(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], key_asset_id : Annotated[StrictStr, Field(..., description="Asset Identifier.")], key_record_date : Annotated[date, Field(..., description="represents record date of the PIF (i.e. trade date).")], key_payment_date : Annotated[date, Field(..., description="represents payment date of the PIF (i.e. settle date).")], key_currency_code : Annotated[StrictStr, Field(..., description="Currency code.")], **kwargs) -> V1PrincipalInterestFactor:  # noqa: E501
        """Gets a Principal Interest Factor record  # noqa: E501

        Retrieves unique PIF record (-- api-linter: core::0131::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because the resource doesn't have a non-composite id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_get_principal_interest_factor(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, key_asset_id, key_record_date, key_payment_date, key_currency_code, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param key_asset_id: Asset Identifier. (required)
        :type key_asset_id: str
        :param key_record_date: represents record date of the PIF (i.e. trade date). (required)
        :type key_record_date: date
        :param key_payment_date: represents payment date of the PIF (i.e. settle date). (required)
        :type key_payment_date: date
        :param key_currency_code: Currency code. (required)
        :type key_currency_code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1PrincipalInterestFactor
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_get_principal_interest_factor_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_get_principal_interest_factor_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, key_asset_id, key_record_date, key_payment_date, key_currency_code, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_get_principal_interest_factor_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], key_asset_id : Annotated[StrictStr, Field(..., description="Asset Identifier.")], key_record_date : Annotated[date, Field(..., description="represents record date of the PIF (i.e. trade date).")], key_payment_date : Annotated[date, Field(..., description="represents payment date of the PIF (i.e. settle date).")], key_currency_code : Annotated[StrictStr, Field(..., description="Currency code.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Gets a Principal Interest Factor record  # noqa: E501

        Retrieves unique PIF record (-- api-linter: core::0131::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because the resource doesn't have a non-composite id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_get_principal_interest_factor_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, key_asset_id, key_record_date, key_payment_date, key_currency_code, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param key_asset_id: Asset Identifier. (required)
        :type key_asset_id: str
        :param key_record_date: represents record date of the PIF (i.e. trade date). (required)
        :type key_record_date: date
        :param key_payment_date: represents payment date of the PIF (i.e. settle date). (required)
        :type key_payment_date: date
        :param key_currency_code: Currency code. (required)
        :type key_currency_code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1PrincipalInterestFactor, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'key_asset_id',
            'key_record_date',
            'key_payment_date',
            'key_currency_code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_get_principal_interest_factor" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('key_asset_id') is not None:  # noqa: E501
            _query_params.append(('key.assetId', _params['key_asset_id']))

        if _params.get('key_record_date') is not None:  # noqa: E501
            if isinstance(_params['key_record_date'], datetime):
                _query_params.append(('key.recordDate', _params['key_record_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('key.recordDate', _params['key_record_date']))

        if _params.get('key_payment_date') is not None:  # noqa: E501
            if isinstance(_params['key_payment_date'], datetime):
                _query_params.append(('key.paymentDate', _params['key_payment_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('key.paymentDate', _params['key_payment_date']))

        if _params.get('key_currency_code') is not None:  # noqa: E501
            _query_params.append(('key.currencyCode', _params['key_currency_code']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1PrincipalInterestFactor",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactor', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def principal_interest_factor_api_list_principal_interest_factors(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ListPrincipalInterestFactorsRequest, **kwargs) -> V1ListPrincipalInterestFactorsResponse:  # noqa: E501
        """Lists Principal Interest Factor records  # noqa: E501

        Lists PIF records per given unique keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_list_principal_interest_factors(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ListPrincipalInterestFactorsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListPrincipalInterestFactorsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_list_principal_interest_factors_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_list_principal_interest_factors_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_list_principal_interest_factors_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ListPrincipalInterestFactorsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Lists Principal Interest Factor records  # noqa: E501

        Lists PIF records per given unique keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_list_principal_interest_factors_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ListPrincipalInterestFactorsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListPrincipalInterestFactorsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_list_principal_interest_factors" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListPrincipalInterestFactorsResponse",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactors:list', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def principal_interest_factor_api_update_principal_interest_factor(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1PrincipalInterestFactor, Field(..., description="PIF record to be updated")], update_mask : Annotated[Optional[StrictStr], Field(description="List of fields to be updated.")] = None, **kwargs) -> V1PrincipalInterestFactor:  # noqa: E501
        """Update Principal Interest Factor records  # noqa: E501

        Allows for one to update various attributes of a given principal and interest factor (PIF) (-- api-linter: core::0134::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because the resource doesn't have a non-composite id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_update_principal_interest_factor(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, update_mask, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: PIF record to be updated (required)
        :type body: V1PrincipalInterestFactor
        :param update_mask: List of fields to be updated.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1PrincipalInterestFactor
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the principal_interest_factor_api_update_principal_interest_factor_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.principal_interest_factor_api_update_principal_interest_factor_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, update_mask, **kwargs)  # noqa: E501

    @validate_arguments
    def principal_interest_factor_api_update_principal_interest_factor_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1PrincipalInterestFactor, Field(..., description="PIF record to be updated")], update_mask : Annotated[Optional[StrictStr], Field(description="List of fields to be updated.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Principal Interest Factor records  # noqa: E501

        Allows for one to update various attributes of a given principal and interest factor (PIF) (-- api-linter: core::0134::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because the resource doesn't have a non-composite id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.principal_interest_factor_api_update_principal_interest_factor_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, update_mask, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: PIF record to be updated (required)
        :type body: V1PrincipalInterestFactor
        :param update_mask: List of fields to be updated.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1PrincipalInterestFactor, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'update_mask'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method principal_interest_factor_api_update_principal_interest_factor" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('update_mask') is not None:  # noqa: E501
            _query_params.append(('updateMask', _params['update_mask']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1PrincipalInterestFactor",
            '400': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '401': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '403': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
            '404': "PrincipalInterestFactorAPIGetPrincipalInterestFactor400Response",
        }

        return self.api_client.call_api(
            '/principalInterestFactors', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
