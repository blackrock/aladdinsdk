# coding: utf-8

"""
    Principal and Interest Factor

    Principal and Interest Factors (PIFs) generally represent the amount of payment per 1000 of Original Face currency units value you currently hold in the given asset, and are used in conjunction with position data to generate cashflows. This API allows for filtering and retrieval of PIF records based on a number of criteria including assetId, dates, security groups, currency and more.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.principal_interest_factor_principal_interest_factor_detail import PrincipalInterestFactorPrincipalInterestFactorDetail
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.principal_interest_factor_state import PrincipalInterestFactorState

class V1PrincipalInterestFactor(BaseModel):
    """
    V1PrincipalInterestFactor
    """
    id: Optional[StrictStr] = Field(None, description="Name describes the computer or human assigned resource identifier.")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    record_date: Optional[date] = Field(None, alias="recordDate")
    payment_date: Optional[date] = Field(None, alias="paymentDate")
    principal_state: Optional[PrincipalInterestFactorState] = Field(None, alias="principalState")
    interest_state: Optional[PrincipalInterestFactorState] = Field(None, alias="interestState")
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    principal_accrual_date: Optional[date] = Field(None, alias="principalAccrualDate")
    factor: Optional[Union[StrictFloat, StrictInt]] = None
    previous_factor: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="previousFactor")
    interest: Optional[Union[StrictFloat, StrictInt]] = None
    interest_accrual_date: Optional[date] = Field(None, alias="interestAccrualDate")
    coupon: Optional[Union[StrictFloat, StrictInt]] = None
    period_day_count: Optional[StrictInt] = Field(None, alias="periodDayCount")
    date_calc_basis: Optional[StrictStr] = Field(None, alias="dateCalcBasis")
    entry_date: Optional[date] = Field(None, alias="entryDate")
    source: Optional[StrictStr] = None
    next_payment_date: Optional[date] = Field(None, alias="nextPaymentDate")
    user_principal: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="userPrincipal")
    user_interest: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="userInterest")
    pif_comment: Optional[StrictStr] = Field(None, alias="pifComment")
    nominal_payment_date: Optional[date] = Field(None, alias="nominalPaymentDate")
    confirmer: Optional[StrictStr] = None
    recon_source: Optional[StrictStr] = Field(None, alias="reconSource")
    interest_accrual_end_date: Optional[date] = Field(None, alias="interestAccrualEndDate")
    suspension_date: Optional[date] = Field(None, alias="suspensionDate")
    coupon_source: Optional[StrictStr] = Field(None, alias="couponSource")
    settlement_code: Optional[StrictInt] = Field(None, alias="settlementCode")
    final_payment: Optional[StrictBool] = Field(None, alias="finalPayment", description="Represents whether this is the final payment. Final payments are ignored by gen_pni and the amount is posted as a trade by rm_mat.")
    fixing_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fixingRate")
    fixing_date: Optional[date] = Field(None, alias="fixingDate")
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    sequence_number: Optional[StrictInt] = Field(None, alias="sequenceNumber")
    principal_interest_factor_details: Optional[conlist(PrincipalInterestFactorPrincipalInterestFactorDetail)] = Field(None, alias="principalInterestFactorDetails")
    __properties = ["id", "assetId", "recordDate", "paymentDate", "principalState", "interestState", "principal", "principalAccrualDate", "factor", "previousFactor", "interest", "interestAccrualDate", "coupon", "periodDayCount", "dateCalcBasis", "entryDate", "source", "nextPaymentDate", "userPrincipal", "userInterest", "pifComment", "nominalPaymentDate", "confirmer", "reconSource", "interestAccrualEndDate", "suspensionDate", "couponSource", "settlementCode", "finalPayment", "fixingRate", "fixingDate", "currencyCode", "sequenceNumber", "principalInterestFactorDetails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PrincipalInterestFactor:
        """Create an instance of V1PrincipalInterestFactor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in principal_interest_factor_details (list)
        _items = []
        if self.principal_interest_factor_details:
            for _item in self.principal_interest_factor_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['principalInterestFactorDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PrincipalInterestFactor:
        """Create an instance of V1PrincipalInterestFactor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PrincipalInterestFactor.parse_obj(obj)

        _obj = V1PrincipalInterestFactor.parse_obj({
            "id": obj.get("id"),
            "asset_id": obj.get("assetId"),
            "record_date": obj.get("recordDate"),
            "payment_date": obj.get("paymentDate"),
            "principal_state": obj.get("principalState"),
            "interest_state": obj.get("interestState"),
            "principal": obj.get("principal"),
            "principal_accrual_date": obj.get("principalAccrualDate"),
            "factor": obj.get("factor"),
            "previous_factor": obj.get("previousFactor"),
            "interest": obj.get("interest"),
            "interest_accrual_date": obj.get("interestAccrualDate"),
            "coupon": obj.get("coupon"),
            "period_day_count": obj.get("periodDayCount"),
            "date_calc_basis": obj.get("dateCalcBasis"),
            "entry_date": obj.get("entryDate"),
            "source": obj.get("source"),
            "next_payment_date": obj.get("nextPaymentDate"),
            "user_principal": obj.get("userPrincipal"),
            "user_interest": obj.get("userInterest"),
            "pif_comment": obj.get("pifComment"),
            "nominal_payment_date": obj.get("nominalPaymentDate"),
            "confirmer": obj.get("confirmer"),
            "recon_source": obj.get("reconSource"),
            "interest_accrual_end_date": obj.get("interestAccrualEndDate"),
            "suspension_date": obj.get("suspensionDate"),
            "coupon_source": obj.get("couponSource"),
            "settlement_code": obj.get("settlementCode"),
            "final_payment": obj.get("finalPayment"),
            "fixing_rate": obj.get("fixingRate"),
            "fixing_date": obj.get("fixingDate"),
            "currency_code": obj.get("currencyCode"),
            "sequence_number": obj.get("sequenceNumber"),
            "principal_interest_factor_details": [PrincipalInterestFactorPrincipalInterestFactorDetail.from_dict(_item) for _item in obj.get("principalInterestFactorDetails")] if obj.get("principalInterestFactorDetails") is not None else None
        })
        return _obj

