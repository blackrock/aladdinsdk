# coding: utf-8

"""
    Principal and Interest Factor

    Principal and Interest Factors (PIFs) generally represent the amount of payment per 1000 of Original Face currency units value you currently hold in the given asset, and are used in conjunction with position data to generate cashflows. This API allows for filtering and retrieval of PIF records based on a number of criteria including assetId, dates, security groups, currency and more.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_audit import V1Audit
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.principal_interest_factor.v1.PrincipalInterestFactorAPI.models.v1_principal_interest_factor import V1PrincipalInterestFactor

class V1PrincipalInterestFactorAuditTrails(BaseModel):
    """
    V1PrincipalInterestFactorAuditTrails
    """
    principal_interest_factor: Optional[V1PrincipalInterestFactor] = Field(None, alias="principalInterestFactor")
    audit: Optional[V1Audit] = None
    __properties = ["principalInterestFactor", "audit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PrincipalInterestFactorAuditTrails:
        """Create an instance of V1PrincipalInterestFactorAuditTrails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of principal_interest_factor
        if self.principal_interest_factor:
            _dict['principalInterestFactor'] = self.principal_interest_factor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audit
        if self.audit:
            _dict['audit'] = self.audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PrincipalInterestFactorAuditTrails:
        """Create an instance of V1PrincipalInterestFactorAuditTrails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PrincipalInterestFactorAuditTrails.parse_obj(obj)

        _obj = V1PrincipalInterestFactorAuditTrails.parse_obj({
            "principal_interest_factor": V1PrincipalInterestFactor.from_dict(obj.get("principalInterestFactor")) if obj.get("principalInterestFactor") is not None else None,
            "audit": V1Audit.from_dict(obj.get("audit")) if obj.get("audit") is not None else None
        })
        return _obj

