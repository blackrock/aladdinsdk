# coding: utf-8

"""
    Coupon Reset

    Coupon in Aladdin are generated internally by Aladdin's Bulk Rate Mechanism (BRM) module or sourced from external vendors. This API allows for retrieval of coupon reset records based on a number of criteria including assetId, dates and more.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.coupon_reset.v1.CouponResetAPI.models.v1_create_coupon_reset_request import V1CreateCouponResetRequest

class V1BatchCreateCouponResetsRequest(BaseModel):
    """
    V1BatchCreateCouponResetsRequest
    """
    requests: conlist(V1CreateCouponResetRequest) = Field(...)
    __properties = ["requests"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BatchCreateCouponResetsRequest:
        """Create an instance of V1BatchCreateCouponResetsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in requests (list)
        _items = []
        if self.requests:
            for _item in self.requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['requests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BatchCreateCouponResetsRequest:
        """Create an instance of V1BatchCreateCouponResetsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BatchCreateCouponResetsRequest.parse_obj(obj)

        _obj = V1BatchCreateCouponResetsRequest.parse_obj({
            "requests": [V1CreateCouponResetRequest.from_dict(_item) for _item in obj.get("requests")] if obj.get("requests") is not None else None
        })
        return _obj

