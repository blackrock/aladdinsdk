# coding: utf-8

"""
    Coupon Reset

    Coupon in Aladdin are generated internally by Aladdin's Bulk Rate Mechanism (BRM) module or sourced from external vendors. This API allows for retrieval of coupon reset records based on a number of criteria including assetId, dates and more.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.investment_operations.asset_lifecycle.coupon_reset.v1.CouponResetAPI.models.coupon_reset_state import CouponResetState

class V1CouponReset(BaseModel):
    """
    V1CouponReset
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have a 'id' field.  Id describes the computer or human assigned resource identifier.")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    determination_date: Optional[date] = Field(None, alias="determinationDate")
    reset_date: Optional[date] = Field(None, alias="resetDate")
    coupon: Optional[Union[StrictFloat, StrictInt]] = None
    index_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="indexValue")
    next_determination_date: Optional[date] = Field(None, alias="nextDeterminationDate")
    next_reset_date: Optional[date] = Field(None, alias="nextResetDate")
    status: Optional[CouponResetState] = None
    coupon_source: Optional[StrictStr] = Field(None, alias="couponSource")
    calculation_date: Optional[date] = Field(None, alias="calculationDate")
    confirmer: Optional[StrictStr] = None
    quoted_date: Optional[date] = Field(None, alias="quotedDate")
    __properties = ["id", "assetId", "determinationDate", "resetDate", "coupon", "indexValue", "nextDeterminationDate", "nextResetDate", "status", "couponSource", "calculationDate", "confirmer", "quotedDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CouponReset:
        """Create an instance of V1CouponReset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CouponReset:
        """Create an instance of V1CouponReset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CouponReset.parse_obj(obj)

        _obj = V1CouponReset.parse_obj({
            "id": obj.get("id"),
            "asset_id": obj.get("assetId"),
            "determination_date": obj.get("determinationDate"),
            "reset_date": obj.get("resetDate"),
            "coupon": obj.get("coupon"),
            "index_value": obj.get("indexValue"),
            "next_determination_date": obj.get("nextDeterminationDate"),
            "next_reset_date": obj.get("nextResetDate"),
            "status": obj.get("status"),
            "coupon_source": obj.get("couponSource"),
            "calculation_date": obj.get("calculationDate"),
            "confirmer": obj.get("confirmer"),
            "quoted_date": obj.get("quotedDate")
        })
        return _obj

