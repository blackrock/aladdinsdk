# coding: utf-8

"""
    Cashflows

    This API allows users to create, update and cancel miscellaneous cashflows. There are three endpoints to create, update, and cancel cashflows with SSI, and three other endpoints to create, update, and cancel cashflows without SSI. For full details on this API including permissions required and sample calls, please check out the Cashflows API Release Note available in the Release Note section on Studio or on your client site homepage.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.models.v1_cashflow import V1Cashflow

class V1CreateCashflowAndSendTransmissionResponse(BaseModel):
    """
    V1CreateCashflowAndSendTransmissionResponse
    """
    cashflow: Optional[V1Cashflow] = None
    __properties = ["cashflow"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateCashflowAndSendTransmissionResponse:
        """Create an instance of V1CreateCashflowAndSendTransmissionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cashflow
        if self.cashflow:
            _dict['cashflow'] = self.cashflow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateCashflowAndSendTransmissionResponse:
        """Create an instance of V1CreateCashflowAndSendTransmissionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateCashflowAndSendTransmissionResponse.parse_obj(obj)

        _obj = V1CreateCashflowAndSendTransmissionResponse.parse_obj({
            "cashflow": V1Cashflow.from_dict(obj.get("cashflow")) if obj.get("cashflow") is not None else None
        })
        return _obj

