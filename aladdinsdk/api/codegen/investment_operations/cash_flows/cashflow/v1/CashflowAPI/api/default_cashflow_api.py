# coding: utf-8

"""
    Cashflows

    This API allows users to create, update and cancel miscellaneous cashflows. There are three endpoints to create, update, and cancel cashflows with SSI, and three other endpoints to create, update, and cancel cashflows without SSI. For full details on this API including permissions required and sample calls, please check out the Cashflows API Release Note available in the Release Note section on Studio or on your client site homepage.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictStr

from typing import Optional

from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.models.v1_cancel_cashflow_and_send_transmission_request import V1CancelCashflowAndSendTransmissionRequest
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.models.v1_cancel_cashflow_and_send_transmission_response import V1CancelCashflowAndSendTransmissionResponse
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.models.v1_cancel_cashflow_request import V1CancelCashflowRequest
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.models.v1_cashflow import V1Cashflow
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.models.v1_create_cashflow_and_send_transmission_request import V1CreateCashflowAndSendTransmissionRequest
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.models.v1_create_cashflow_and_send_transmission_response import V1CreateCashflowAndSendTransmissionResponse
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.models.v1_update_cashflow_and_send_transmission_response import V1UpdateCashflowAndSendTransmissionResponse

from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.api_client import ApiClient
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.investment_operations.cash_flows.cashflow.v1.CashflowAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultCashflowAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def cashflow_api_cancel_cashflow(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelCashflowRequest, **kwargs) -> V1Cashflow:  # noqa: E501
        """Cancel a cashflow  # noqa: E501

        This endpoint can be used to cancel cashflows without SSI by setting the status to 'C'. Note, to cancel cashflows with SSI, use the Cancel a cashflow with SSI endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization) if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. Once a cashflow has been marked as cancelled no further updates will be allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_cancel_cashflow(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelCashflowRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1Cashflow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cashflow_api_cancel_cashflow_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cashflow_api_cancel_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def cashflow_api_cancel_cashflow_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelCashflowRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel a cashflow  # noqa: E501

        This endpoint can be used to cancel cashflows without SSI by setting the status to 'C'. Note, to cancel cashflows with SSI, use the Cancel a cashflow with SSI endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization) if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. Once a cashflow has been marked as cancelled no further updates will be allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_cancel_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelCashflowRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1Cashflow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cashflow_api_cancel_cashflow" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1Cashflow",
            '400': "CashflowAPICreateCashflow400Response",
            '401': "CashflowAPICreateCashflow400Response",
            '403': "CashflowAPICreateCashflow400Response",
            '404': "CashflowAPICreateCashflow400Response",
        }

        return self.api_client.call_api(
            '/cashflows:cancel', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def cashflow_api_cancel_cashflow_and_send_transmission(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelCashflowAndSendTransmissionRequest, **kwargs) -> V1CancelCashflowAndSendTransmissionResponse:  # noqa: E501
        """Cancel a cashflow with SSI  # noqa: E501

        This endpoint can be used to cancel cashflows with SSI by setting the status to 'C'. Note, to cancel cashflows without SSI, use the Cancel a cashflow endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization) if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. Once a cashflow has been marked as cancelled no further updates will be allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_cancel_cashflow_and_send_transmission(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelCashflowAndSendTransmissionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CancelCashflowAndSendTransmissionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cashflow_api_cancel_cashflow_and_send_transmission_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cashflow_api_cancel_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def cashflow_api_cancel_cashflow_and_send_transmission_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelCashflowAndSendTransmissionRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel a cashflow with SSI  # noqa: E501

        This endpoint can be used to cancel cashflows with SSI by setting the status to 'C'. Note, to cancel cashflows without SSI, use the Cancel a cashflow endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization) if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. Once a cashflow has been marked as cancelled no further updates will be allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_cancel_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelCashflowAndSendTransmissionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CancelCashflowAndSendTransmissionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cashflow_api_cancel_cashflow_and_send_transmission" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CancelCashflowAndSendTransmissionResponse",
            '400': "CashflowAPICreateCashflow400Response",
            '401': "CashflowAPICreateCashflow400Response",
            '403': "CashflowAPICreateCashflow400Response",
            '404': "CashflowAPICreateCashflow400Response",
        }

        return self.api_client.call_api(
            '/cashflows:cancelCashflowAndSendTransmission', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def cashflow_api_create_cashflow(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1Cashflow, Field(..., description="Cashflow to post")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> V1Cashflow:  # noqa: E501
        """Create a cashflow  # noqa: E501

        This endpoint allows for the creation of cashflows without a Standard Settlement Instruction (SSI) attached. Note, to create a cashflow with SSI, please use the Create a cashflow with SSI endpoint. Before posting a cashflow, you may use the validateOnly parameter to confirm whether the cashflow passes validations or not. When set to true, only validations will run, cashflow will not be posted. The request will be validated based on the cashflowTransactionType and cashflowSubTransactionType.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_create_cashflow(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Cashflow to post (required)
        :type body: V1Cashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1Cashflow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cashflow_api_create_cashflow_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cashflow_api_create_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, **kwargs)  # noqa: E501

    @validate_arguments
    def cashflow_api_create_cashflow_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1Cashflow, Field(..., description="Cashflow to post")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a cashflow  # noqa: E501

        This endpoint allows for the creation of cashflows without a Standard Settlement Instruction (SSI) attached. Note, to create a cashflow with SSI, please use the Create a cashflow with SSI endpoint. Before posting a cashflow, you may use the validateOnly parameter to confirm whether the cashflow passes validations or not. When set to true, only validations will run, cashflow will not be posted. The request will be validated based on the cashflowTransactionType and cashflowSubTransactionType.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_create_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Cashflow to post (required)
        :type body: V1Cashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1Cashflow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'validate_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cashflow_api_create_cashflow" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('validate_only') is not None:  # noqa: E501
            _query_params.append(('validateOnly', _params['validate_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1Cashflow",
            '400': "CashflowAPICreateCashflow400Response",
            '401': "CashflowAPICreateCashflow400Response",
            '403': "CashflowAPICreateCashflow400Response",
            '404': "CashflowAPICreateCashflow400Response",
        }

        return self.api_client.call_api(
            '/cashflows', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def cashflow_api_create_cashflow_and_send_transmission(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CreateCashflowAndSendTransmissionRequest, **kwargs) -> V1CreateCashflowAndSendTransmissionResponse:  # noqa: E501
        """Create a cashflow with SSI  # noqa: E501

        This endpoint allows for the creation of cashflows with a Standard Settlement Instruction (SSI) attached and sends money out through the transmission framework (confirmedBy and reviewedBy parameters are required in order for the transmission to be generated). SSI can be specified using the brokerId and settlementInstructionId parameters. If not provided settlementInstructionId will be defaulted based on brokerId and cashflow information. Before posting a cashflow, you may use the validateOnly parameter to confirm whether the cashflow passes validations or not. When set to true, only validations will run, cashflow will not be posted. The request will be validated based on the cashflowTransactionType and cashflowSubTransactionType. (-- api-linter: core::0133::http-body=disabled  aip.dev/not-precedent: We need to do this because this is what the request will return; a response containing cashflows --) (-- api-linter: core::0133::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response is defined with the matching name below--) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_create_cashflow_and_send_transmission(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CreateCashflowAndSendTransmissionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CreateCashflowAndSendTransmissionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cashflow_api_create_cashflow_and_send_transmission_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cashflow_api_create_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def cashflow_api_create_cashflow_and_send_transmission_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CreateCashflowAndSendTransmissionRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a cashflow with SSI  # noqa: E501

        This endpoint allows for the creation of cashflows with a Standard Settlement Instruction (SSI) attached and sends money out through the transmission framework (confirmedBy and reviewedBy parameters are required in order for the transmission to be generated). SSI can be specified using the brokerId and settlementInstructionId parameters. If not provided settlementInstructionId will be defaulted based on brokerId and cashflow information. Before posting a cashflow, you may use the validateOnly parameter to confirm whether the cashflow passes validations or not. When set to true, only validations will run, cashflow will not be posted. The request will be validated based on the cashflowTransactionType and cashflowSubTransactionType. (-- api-linter: core::0133::http-body=disabled  aip.dev/not-precedent: We need to do this because this is what the request will return; a response containing cashflows --) (-- api-linter: core::0133::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response is defined with the matching name below--) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_create_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CreateCashflowAndSendTransmissionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CreateCashflowAndSendTransmissionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cashflow_api_create_cashflow_and_send_transmission" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CreateCashflowAndSendTransmissionResponse",
            '400': "CashflowAPICreateCashflow400Response",
            '401': "CashflowAPICreateCashflow400Response",
            '403': "CashflowAPICreateCashflow400Response",
            '404': "CashflowAPICreateCashflow400Response",
        }

        return self.api_client.call_api(
            '/cashflows:createCashflowAndSendTransmission', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def cashflow_api_update_cashflow(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1Cashflow, Field(..., description="Cashflow to update")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> V1Cashflow:  # noqa: E501
        """Update a cashflow  # noqa: E501

        This endpoint can be used to update cashflows that does not include SSI. To update a record and add SSI, please use the Update a cashflow to include SSI endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization), if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. If any validation fails, an exception will be thrown. (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_update_cashflow(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Cashflow to update (required)
        :type body: V1Cashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1Cashflow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cashflow_api_update_cashflow_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cashflow_api_update_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, **kwargs)  # noqa: E501

    @validate_arguments
    def cashflow_api_update_cashflow_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1Cashflow, Field(..., description="Cashflow to update")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a cashflow  # noqa: E501

        This endpoint can be used to update cashflows that does not include SSI. To update a record and add SSI, please use the Update a cashflow to include SSI endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization), if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. If any validation fails, an exception will be thrown. (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_update_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Cashflow to update (required)
        :type body: V1Cashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1Cashflow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'validate_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cashflow_api_update_cashflow" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('validate_only') is not None:  # noqa: E501
            _query_params.append(('validateOnly', _params['validate_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1Cashflow",
            '400': "CashflowAPICreateCashflow400Response",
            '401': "CashflowAPICreateCashflow400Response",
            '403': "CashflowAPICreateCashflow400Response",
            '404': "CashflowAPICreateCashflow400Response",
        }

        return self.api_client.call_api(
            '/cashflows:updateCashflow', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def cashflow_api_update_cashflow_and_send_transmission(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1Cashflow, Field(..., description="Cashflow to update")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> V1UpdateCashflowAndSendTransmissionResponse:  # noqa: E501
        """Update a cashflow to include SSI  # noqa: E501

        This endpoint can be used to add Standard Settlement Instruction (SSI) i.e. brokerId or settlementInstructionId to a record that does not have one attached and sends money out through transmission framework (confirmedBy and reviewedBy parameters are required in order for the transmission to be generated). Note that records that already have SSI attached cannot be updated via this endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) by the combination of (externalId1 + externalIdOrganization), if it has a cashflowExternalId. A valid combination of either these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. If any validation fails an exception will be thrown. (-- api-linter: core::0134::http-body=disabled     aip.dev/not-precedent: The resource updated is a cashflow, not a cashflowAndSendTransmission. --) (-- api-linter: core::0136::http-body=disabled     aip.dev/not-precedent: The resource updated is a cashflow, not a cashflowAndSendTransmission. --) (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: core::0134::response-message-name=disabled     aip.dev/not-precedent: The response should be a cashlow, defined below. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_update_cashflow_and_send_transmission(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Cashflow to update (required)
        :type body: V1Cashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1UpdateCashflowAndSendTransmissionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cashflow_api_update_cashflow_and_send_transmission_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cashflow_api_update_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, **kwargs)  # noqa: E501

    @validate_arguments
    def cashflow_api_update_cashflow_and_send_transmission_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1Cashflow, Field(..., description="Cashflow to update")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a cashflow to include SSI  # noqa: E501

        This endpoint can be used to add Standard Settlement Instruction (SSI) i.e. brokerId or settlementInstructionId to a record that does not have one attached and sends money out through transmission framework (confirmedBy and reviewedBy parameters are required in order for the transmission to be generated). Note that records that already have SSI attached cannot be updated via this endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) by the combination of (externalId1 + externalIdOrganization), if it has a cashflowExternalId. A valid combination of either these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. If any validation fails an exception will be thrown. (-- api-linter: core::0134::http-body=disabled     aip.dev/not-precedent: The resource updated is a cashflow, not a cashflowAndSendTransmission. --) (-- api-linter: core::0136::http-body=disabled     aip.dev/not-precedent: The resource updated is a cashflow, not a cashflowAndSendTransmission. --) (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: core::0134::response-message-name=disabled     aip.dev/not-precedent: The response should be a cashlow, defined below. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cashflow_api_update_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Cashflow to update (required)
        :type body: V1Cashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1UpdateCashflowAndSendTransmissionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'validate_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cashflow_api_update_cashflow_and_send_transmission" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('validate_only') is not None:  # noqa: E501
            _query_params.append(('validateOnly', _params['validate_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1UpdateCashflowAndSendTransmissionResponse",
            '400': "CashflowAPICreateCashflow400Response",
            '401': "CashflowAPICreateCashflow400Response",
            '403': "CashflowAPICreateCashflow400Response",
            '404': "CashflowAPICreateCashflow400Response",
        }

        return self.api_client.call_api(
            '/cashflows:updateCashflowAndSendTransmission', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
