# coding: utf-8

"""
    Miscellaneous Cash

    Allows users to create, update and cancel miscellaneous cash. For full details including permissions required and sample calls, please check out the Release Notes available in the Release Note section on Studio or on your client site homepage.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_miscellaneous_cashflow import V1MiscellaneousCashflow

class V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse(BaseModel):
    """
    V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse
    """
    miscellaneous_cashflow: Optional[V1MiscellaneousCashflow] = Field(None, alias="miscellaneousCashflow")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage")
    __properties = ["miscellaneousCashflow", "errorMessage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse:
        """Create an instance of V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of miscellaneous_cashflow
        if self.miscellaneous_cashflow:
            _dict['miscellaneousCashflow'] = self.miscellaneous_cashflow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse:
        """Create an instance of V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse.parse_obj(obj)

        _obj = V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse.parse_obj({
            "miscellaneous_cashflow": V1MiscellaneousCashflow.from_dict(obj.get("miscellaneousCashflow")) if obj.get("miscellaneousCashflow") is not None else None,
            "error_message": obj.get("errorMessage")
        })
        return _obj

