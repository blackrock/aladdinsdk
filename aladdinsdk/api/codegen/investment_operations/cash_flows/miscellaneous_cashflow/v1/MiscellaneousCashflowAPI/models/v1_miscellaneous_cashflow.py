# coding: utf-8

"""
    Miscellaneous Cash

    Allows users to create, update and cancel miscellaneous cash. For full details including permissions required and sample calls, please check out the Release Notes available in the Release Note section on Studio or on your client site homepage.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conbytes, constr, validator
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_external_cashflow_id import V1ExternalCashflowId

class V1MiscellaneousCashflow(BaseModel):
    """
    V1MiscellaneousCashflow
    """
    id: Optional[StrictStr] = None
    portfolio_id: Optional[StrictStr] = Field(None, alias="portfolioId", description="Represents string value of Portfolio Code as id.")
    investment_number: Optional[StrictInt] = Field(None, alias="investmentNumber")
    series_number: Optional[StrictInt] = Field(None, alias="seriesNumber")
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    broker_id: Optional[StrictStr] = Field(None, alias="brokerId", description="Counterparty code for settlement.")
    principal: Optional[Union[StrictFloat, StrictInt]] = None
    interest: Optional[Union[StrictFloat, StrictInt]] = None
    commission: Optional[Union[StrictFloat, StrictInt]] = None
    other_fee: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="otherFee")
    original_face: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="originalFace")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    trade_date: Optional[date] = Field(None, alias="tradeDate")
    settle_date: Optional[date] = Field(None, alias="settleDate")
    status: Optional[StrictStr] = None
    sub_transaction_type: Optional[StrictStr] = Field(None, alias="subTransactionType")
    entered_by: Optional[StrictStr] = Field(None, alias="enteredBy")
    trader: Optional[StrictStr] = None
    confirmed_by: Optional[StrictStr] = Field(None, alias="confirmedBy")
    reviewed_by: Optional[StrictStr] = Field(None, alias="reviewedBy")
    entry_time: Optional[datetime] = Field(None, alias="entryTime")
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    authorize_time: Optional[datetime] = Field(None, alias="authorizeTime")
    review_time: Optional[datetime] = Field(None, alias="reviewTime")
    strategy_id: Optional[StrictInt] = Field(None, alias="strategyId")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="exchangeRate")
    actual_settle_date: Optional[date] = Field(None, alias="actualSettleDate")
    settled_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="settledAmount")
    settlement_instruction_id: Optional[StrictStr] = Field(None, alias="settlementInstructionId", description="String value Settle Code.")
    client_payment_reference: Optional[StrictStr] = Field(None, alias="clientPaymentReference")
    cashflow_comment_text: Optional[StrictStr] = Field(None, alias="cashflowCommentText")
    cashflow_comment_byte: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(None, alias="cashflowCommentByte")
    cashflow_external_id: Optional[V1ExternalCashflowId] = Field(None, alias="cashflowExternalId")
    factor: Optional[Union[StrictFloat, StrictInt]] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    trade_par: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tradePar")
    short_indicator: Optional[StrictStr] = Field(None, alias="shortIndicator")
    structured_by: Optional[StrictStr] = Field(None, alias="structuredBy")
    settlement_confirmed: Optional[StrictStr] = Field(None, alias="settlementConfirmed")
    duplicate_number: Optional[StrictInt] = Field(None, alias="duplicateNumber")
    source: Optional[StrictStr] = None
    accounting_method: Optional[StrictStr] = Field(None, alias="accountingMethod")
    version: Optional[StrictInt] = None
    portfolio_ticker: Optional[StrictStr] = Field(None, alias="portfolioTicker")
    __properties = ["id", "portfolioId", "investmentNumber", "seriesNumber", "currencyCode", "brokerId", "principal", "interest", "commission", "otherFee", "originalFace", "assetId", "tradeDate", "settleDate", "status", "subTransactionType", "enteredBy", "trader", "confirmedBy", "reviewedBy", "entryTime", "modifyTime", "authorizeTime", "reviewTime", "strategyId", "exchangeRate", "actualSettleDate", "settledAmount", "settlementInstructionId", "clientPaymentReference", "cashflowCommentText", "cashflowCommentByte", "cashflowExternalId", "factor", "price", "tradePar", "shortIndicator", "structuredBy", "settlementConfirmed", "duplicateNumber", "source", "accountingMethod", "version", "portfolioTicker"]

    @validator('cashflow_comment_byte')
    def cashflow_comment_byte_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1MiscellaneousCashflow:
        """Create an instance of V1MiscellaneousCashflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cashflow_external_id
        if self.cashflow_external_id:
            _dict['cashflowExternalId'] = self.cashflow_external_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1MiscellaneousCashflow:
        """Create an instance of V1MiscellaneousCashflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1MiscellaneousCashflow.parse_obj(obj)

        _obj = V1MiscellaneousCashflow.parse_obj({
            "id": obj.get("id"),
            "portfolio_id": obj.get("portfolioId"),
            "investment_number": obj.get("investmentNumber"),
            "series_number": obj.get("seriesNumber"),
            "currency_code": obj.get("currencyCode"),
            "broker_id": obj.get("brokerId"),
            "principal": obj.get("principal"),
            "interest": obj.get("interest"),
            "commission": obj.get("commission"),
            "other_fee": obj.get("otherFee"),
            "original_face": obj.get("originalFace"),
            "asset_id": obj.get("assetId"),
            "trade_date": obj.get("tradeDate"),
            "settle_date": obj.get("settleDate"),
            "status": obj.get("status"),
            "sub_transaction_type": obj.get("subTransactionType"),
            "entered_by": obj.get("enteredBy"),
            "trader": obj.get("trader"),
            "confirmed_by": obj.get("confirmedBy"),
            "reviewed_by": obj.get("reviewedBy"),
            "entry_time": obj.get("entryTime"),
            "modify_time": obj.get("modifyTime"),
            "authorize_time": obj.get("authorizeTime"),
            "review_time": obj.get("reviewTime"),
            "strategy_id": obj.get("strategyId"),
            "exchange_rate": obj.get("exchangeRate"),
            "actual_settle_date": obj.get("actualSettleDate"),
            "settled_amount": obj.get("settledAmount"),
            "settlement_instruction_id": obj.get("settlementInstructionId"),
            "client_payment_reference": obj.get("clientPaymentReference"),
            "cashflow_comment_text": obj.get("cashflowCommentText"),
            "cashflow_comment_byte": obj.get("cashflowCommentByte"),
            "cashflow_external_id": V1ExternalCashflowId.from_dict(obj.get("cashflowExternalId")) if obj.get("cashflowExternalId") is not None else None,
            "factor": obj.get("factor"),
            "price": obj.get("price"),
            "trade_par": obj.get("tradePar"),
            "short_indicator": obj.get("shortIndicator"),
            "structured_by": obj.get("structuredBy"),
            "settlement_confirmed": obj.get("settlementConfirmed"),
            "duplicate_number": obj.get("duplicateNumber"),
            "source": obj.get("source"),
            "accounting_method": obj.get("accountingMethod"),
            "version": obj.get("version"),
            "portfolio_ticker": obj.get("portfolioTicker")
        })
        return _obj

