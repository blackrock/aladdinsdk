# coding: utf-8

"""
    Miscellaneous Cash

    Allows users to create, update and cancel miscellaneous cash. For full details including permissions required and sample calls, please check out the Release Notes available in the Release Note section on Studio or on your client site homepage.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictStr

from typing import Optional

from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_cancel_miscellaneous_cashflow_and_send_transmission_request import V1CancelMiscellaneousCashflowAndSendTransmissionRequest
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_cancel_miscellaneous_cashflow_and_send_transmission_response import V1CancelMiscellaneousCashflowAndSendTransmissionResponse
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_cancel_miscellaneous_cashflow_request import V1CancelMiscellaneousCashflowRequest
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_create_miscellaneous_cashflow_and_default_settlement_instruction_request import V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionRequest
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_create_miscellaneous_cashflow_and_default_settlement_instruction_response import V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_create_miscellaneous_cashflow_and_send_transmission_request import V1CreateMiscellaneousCashflowAndSendTransmissionRequest
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_create_miscellaneous_cashflow_and_send_transmission_response import V1CreateMiscellaneousCashflowAndSendTransmissionResponse
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_miscellaneous_cashflow import V1MiscellaneousCashflow
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_update_miscellaneous_cashflow_and_default_settlement_instruction_response import V1UpdateMiscellaneousCashflowAndDefaultSettlementInstructionResponse
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.models.v1_update_miscellaneous_cashflow_and_send_transmission_response import V1UpdateMiscellaneousCashflowAndSendTransmissionResponse

from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.api_client import ApiClient
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.investment_operations.cash_flows.miscellaneous_cashflow.v1.MiscellaneousCashflowAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultMiscellaneousCashflowAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def miscellaneous_cashflow_api_cancel_miscellaneous_cashflow(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelMiscellaneousCashflowRequest, **kwargs) -> V1MiscellaneousCashflow:  # noqa: E501
        """Cancel a miscellaneous cash  # noqa: E501

        This endpoint can be used to cancel a miscellaneous cash without SSI by setting the status to 'C'. Note, to cancel cashflows with SSI, use the Cancel a cashflow with SSI endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization) if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. Once a cashflow has been marked as cancelled no further updates will be allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_cancel_miscellaneous_cashflow(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelMiscellaneousCashflowRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1MiscellaneousCashflow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelMiscellaneousCashflowRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel a miscellaneous cash  # noqa: E501

        This endpoint can be used to cancel a miscellaneous cash without SSI by setting the status to 'C'. Note, to cancel cashflows with SSI, use the Cancel a cashflow with SSI endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization) if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. Once a cashflow has been marked as cancelled no further updates will be allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelMiscellaneousCashflowRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1MiscellaneousCashflow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method miscellaneous_cashflow_api_cancel_miscellaneous_cashflow" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1MiscellaneousCashflow",
            '400': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '401': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '403': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '404': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
        }

        return self.api_client.call_api(
            '/miscellaneousCashflows:cancelMiscellaneousCashflow', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_and_send_transmission(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelMiscellaneousCashflowAndSendTransmissionRequest, **kwargs) -> V1CancelMiscellaneousCashflowAndSendTransmissionResponse:  # noqa: E501
        """Cancel a miscellaneous cash and send transmission  # noqa: E501

        This endpoint can be used to cancel miscellaneous cash with SSI by setting the status to 'C'. Note, to cancel cashflows without SSI, use the Cancel a cashflow endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization) if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. Once a cashflow has been marked as cancelled no further updates will be allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_and_send_transmission(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelMiscellaneousCashflowAndSendTransmissionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CancelMiscellaneousCashflowAndSendTransmissionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_and_send_transmission_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_and_send_transmission_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelMiscellaneousCashflowAndSendTransmissionRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel a miscellaneous cash and send transmission  # noqa: E501

        This endpoint can be used to cancel miscellaneous cash with SSI by setting the status to 'C'. Note, to cancel cashflows without SSI, use the Cancel a cashflow endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization) if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. Once a cashflow has been marked as cancelled no further updates will be allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelMiscellaneousCashflowAndSendTransmissionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CancelMiscellaneousCashflowAndSendTransmissionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method miscellaneous_cashflow_api_cancel_miscellaneous_cashflow_and_send_transmission" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CancelMiscellaneousCashflowAndSendTransmissionResponse",
            '400': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '401': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '403': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '404': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
        }

        return self.api_client.call_api(
            '/miscellaneousCashflows:cancelMiscellaneousCashflowAndSendTransmission', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def miscellaneous_cashflow_api_create_miscellaneous_cashflow(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1MiscellaneousCashflow, Field(..., description="Miscellaneous cash to post")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> V1MiscellaneousCashflow:  # noqa: E501
        """Create a miscellaneous cash  # noqa: E501

        This endpoint allows for the creation of a miscellaneous cash (transaction_type = MISC) without a Standard Settlement Instruction (SSI) attached. Note, to create a cashflow with SSI, please use the Create a cashflow and default settlementInstruction or Create a cashflow and send transmission endpoints. Before posting a miscellaneous cashflow, you may use the validateOnly parameter to confirm if it passes all validations. When set to true, only validations will run, cashflow will not be posted.  The request will be validated based on the cashflowSubTransactionType.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_create_miscellaneous_cashflow(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Miscellaneous cash to post (required)
        :type body: V1MiscellaneousCashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1MiscellaneousCashflow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the miscellaneous_cashflow_api_create_miscellaneous_cashflow_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.miscellaneous_cashflow_api_create_miscellaneous_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, **kwargs)  # noqa: E501

    @validate_arguments
    def miscellaneous_cashflow_api_create_miscellaneous_cashflow_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1MiscellaneousCashflow, Field(..., description="Miscellaneous cash to post")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a miscellaneous cash  # noqa: E501

        This endpoint allows for the creation of a miscellaneous cash (transaction_type = MISC) without a Standard Settlement Instruction (SSI) attached. Note, to create a cashflow with SSI, please use the Create a cashflow and default settlementInstruction or Create a cashflow and send transmission endpoints. Before posting a miscellaneous cashflow, you may use the validateOnly parameter to confirm if it passes all validations. When set to true, only validations will run, cashflow will not be posted.  The request will be validated based on the cashflowSubTransactionType.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_create_miscellaneous_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Miscellaneous cash to post (required)
        :type body: V1MiscellaneousCashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1MiscellaneousCashflow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'validate_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method miscellaneous_cashflow_api_create_miscellaneous_cashflow" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('validate_only') is not None:  # noqa: E501
            _query_params.append(('validateOnly', _params['validate_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1MiscellaneousCashflow",
            '400': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '401': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '403': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '404': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
        }

        return self.api_client.call_api(
            '/miscellaneousCashflows', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_default_settlement_instruction(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionRequest, **kwargs) -> V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse:  # noqa: E501
        """Creates a miscellaneous cash and defaults SSI  # noqa: E501

        This endpoint allows creating a miscellaneous cashflow and defaulting a Standard Settlement Instruction (SSI).  SSI can be specified using the brokerId and settlementInstructionId parameters. If not provided settlementInstructionId will be defaulted based on brokerId and cashflow information. Before posting a cashflow, you may use the validateOnly parameter to confirm whether the cashflow passes validations or not. When set to true, only validations will run, cashflow will not be posted. The request will be validated based on the subTransactionType. (-- api-linter: core::0133::response-message-name=disabled  aip.dev/not-precedent: In the future we might want to return some info specific to the ssi defaulting (-- api-linter: core::0133::http-body=disabled     aip.dev/not-precedent: MiscellaneousCashflow is a specific type of Cashflow that does not support all fields, we want to return the entire Cashflow --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: This is a custom create method --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_default_settlement_instruction(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_default_settlement_instruction_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_default_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_default_settlement_instruction_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Creates a miscellaneous cash and defaults SSI  # noqa: E501

        This endpoint allows creating a miscellaneous cashflow and defaulting a Standard Settlement Instruction (SSI).  SSI can be specified using the brokerId and settlementInstructionId parameters. If not provided settlementInstructionId will be defaulted based on brokerId and cashflow information. Before posting a cashflow, you may use the validateOnly parameter to confirm whether the cashflow passes validations or not. When set to true, only validations will run, cashflow will not be posted. The request will be validated based on the subTransactionType. (-- api-linter: core::0133::response-message-name=disabled  aip.dev/not-precedent: In the future we might want to return some info specific to the ssi defaulting (-- api-linter: core::0133::http-body=disabled     aip.dev/not-precedent: MiscellaneousCashflow is a specific type of Cashflow that does not support all fields, we want to return the entire Cashflow --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: This is a custom create method --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_default_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_default_settlement_instruction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CreateMiscellaneousCashflowAndDefaultSettlementInstructionResponse",
            '400': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '401': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '403': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '404': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
        }

        return self.api_client.call_api(
            '/miscellaneousCashflows:createMiscellaneousCashflowAndDefaultSettlementInstruction', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_send_transmission(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CreateMiscellaneousCashflowAndSendTransmissionRequest, **kwargs) -> V1CreateMiscellaneousCashflowAndSendTransmissionResponse:  # noqa: E501
        """Create a miscellaneous cash and send transmission  # noqa: E501

        This endpoint allows for the creation of miscellaneous cash with a Standard Settlement Instruction (SSI) attached and sends money out through the transmission framework (confirmedBy and reviewedBy parameters are required in order for the transmission to be generated). SSI can be specified using the brokerId and settlementInstructionId parameters. If not provided settlementInstructionId will be defaulted based on brokerId and cashflow information. Before posting a cashflow, you may use the validateOnly parameter to confirm whether the cashflow passes validations or not. When set to true, only validations will run, cashflow will not be posted. The request will be validated based on the cashflowTransactionType and cashflowSubTransactionType. (-- api-linter: core::0133::response-message-name=disabled  aip.dev/not-precedent: In the future we might want to return some info specific to the transmission (-- api-linter: core::0133::http-body=disabled     aip.dev/not-precedent: MiscellaneousCashflow is a specific type of Cashflow that does not support all fields, we want to return the entire Cashflow --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: This is a custom create method --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_send_transmission(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CreateMiscellaneousCashflowAndSendTransmissionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CreateMiscellaneousCashflowAndSendTransmissionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_send_transmission_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_send_transmission_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CreateMiscellaneousCashflowAndSendTransmissionRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a miscellaneous cash and send transmission  # noqa: E501

        This endpoint allows for the creation of miscellaneous cash with a Standard Settlement Instruction (SSI) attached and sends money out through the transmission framework (confirmedBy and reviewedBy parameters are required in order for the transmission to be generated). SSI can be specified using the brokerId and settlementInstructionId parameters. If not provided settlementInstructionId will be defaulted based on brokerId and cashflow information. Before posting a cashflow, you may use the validateOnly parameter to confirm whether the cashflow passes validations or not. When set to true, only validations will run, cashflow will not be posted. The request will be validated based on the cashflowTransactionType and cashflowSubTransactionType. (-- api-linter: core::0133::response-message-name=disabled  aip.dev/not-precedent: In the future we might want to return some info specific to the transmission (-- api-linter: core::0133::http-body=disabled     aip.dev/not-precedent: MiscellaneousCashflow is a specific type of Cashflow that does not support all fields, we want to return the entire Cashflow --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: This is a custom create method --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CreateMiscellaneousCashflowAndSendTransmissionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CreateMiscellaneousCashflowAndSendTransmissionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method miscellaneous_cashflow_api_create_miscellaneous_cashflow_and_send_transmission" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CreateMiscellaneousCashflowAndSendTransmissionResponse",
            '400': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '401': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '403': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '404': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
        }

        return self.api_client.call_api(
            '/miscellaneousCashflows:createMiscellaneousCashflowAndSendTransmission', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def miscellaneous_cashflow_api_update_miscellaneous_cashflow(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1MiscellaneousCashflow, Field(..., description="Miscellaneous cash to update")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> V1MiscellaneousCashflow:  # noqa: E501
        """Update a miscellaneous cash  # noqa: E501

        This endpoint can be used to update a miscellaneous cash that does not include SSI. To update a record and add SSI, please use the Update a cashflow and default settlementInstruction or Update a cashflow and send transmission endpoints. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization), if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the status of the cashflow and all validations must pass for the request to be successful.  If any validation fails, an exception will be thrown. (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_update_miscellaneous_cashflow(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Miscellaneous cash to update (required)
        :type body: V1MiscellaneousCashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1MiscellaneousCashflow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the miscellaneous_cashflow_api_update_miscellaneous_cashflow_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.miscellaneous_cashflow_api_update_miscellaneous_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, **kwargs)  # noqa: E501

    @validate_arguments
    def miscellaneous_cashflow_api_update_miscellaneous_cashflow_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1MiscellaneousCashflow, Field(..., description="Miscellaneous cash to update")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a miscellaneous cash  # noqa: E501

        This endpoint can be used to update a miscellaneous cash that does not include SSI. To update a record and add SSI, please use the Update a cashflow and default settlementInstruction or Update a cashflow and send transmission endpoints. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) or by the combination of (externalId1 + externalIdOrganization), if it has a cashflowExternalId. A valid combination of either of these must be provided on the request. The request will be validated based on the status of the cashflow and all validations must pass for the request to be successful.  If any validation fails, an exception will be thrown. (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_update_miscellaneous_cashflow_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Miscellaneous cash to update (required)
        :type body: V1MiscellaneousCashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1MiscellaneousCashflow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'validate_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method miscellaneous_cashflow_api_update_miscellaneous_cashflow" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('validate_only') is not None:  # noqa: E501
            _query_params.append(('validateOnly', _params['validate_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1MiscellaneousCashflow",
            '400': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '401': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '403': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '404': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
        }

        return self.api_client.call_api(
            '/miscellaneousCashflows:updateMiscellaneousCashflow', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_default_settlement_instruction(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1MiscellaneousCashflow, Field(..., description="Miscellaneous cash to create.")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, suppress_defaulting_error : Annotated[Optional[StrictBool], Field(description="If this field is set true and server fails to default settlement instruction error will be returned on the errorMessage field in the response and server will continue with cashflow update If set to false issues during defaulting will cause an exception to be thrown and cashflow won't be updated.")] = None, **kwargs) -> V1UpdateMiscellaneousCashflowAndDefaultSettlementInstructionResponse:  # noqa: E501
        """Updates a miscellaneous cash and defaults SSI  # noqa: E501

        This endpoint allows updating a miscellaneous cash and defaulting Standard Settlement Instruction. SSI can be specified using the brokerId and settlementInstructionId parameters. If not provided settlementInstructionId will be defaulted based on brokerId and cashflow information. A cashflow can be identified in two ways, by the combination of (portfolioId + investmentNumber + seriesNumber) or by the combination of (externalId1 + organization), if it has an externalId. A valid combination of either of these must be provided on the request. The request will be validated based on the status of the cashflow and all  validations must pass for the request to be successful. If any validation fails, an exception will be thrown. (-- api-linter: core::0136::http-method=disabled     aip.dev/not-precedent: Method is update. --) (-- api-linter: core::0136::http-body=disabled     aip.dev/not-precedent: The resource being updated is MiscellaneousCashflow, not a MiscellaneousCashflowAndDefaultSettlementInstruction. --) (-- api-linter: core::0134::response-message-name=disabled     aip.dev/not-precedent: MiscellaneousCashflow is a specific type of Cashflow that does not support all columns, we want to return the entire Cashflow --) (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: core::0134::http-body=disabled     aip.dev/not-precedent: The resource being updated is MiscellaneousCashflow, not a MiscellaneousCashflowAndDefaultSettlementInstruction. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because _cashflow.id is not recognized in the url. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_default_settlement_instruction(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, suppress_defaulting_error, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Miscellaneous cash to create. (required)
        :type body: V1MiscellaneousCashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param suppress_defaulting_error: If this field is set true and server fails to default settlement instruction error will be returned on the errorMessage field in the response and server will continue with cashflow update If set to false issues during defaulting will cause an exception to be thrown and cashflow won't be updated.
        :type suppress_defaulting_error: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1UpdateMiscellaneousCashflowAndDefaultSettlementInstructionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_default_settlement_instruction_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_default_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, suppress_defaulting_error, **kwargs)  # noqa: E501

    @validate_arguments
    def miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_default_settlement_instruction_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1MiscellaneousCashflow, Field(..., description="Miscellaneous cash to create.")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, suppress_defaulting_error : Annotated[Optional[StrictBool], Field(description="If this field is set true and server fails to default settlement instruction error will be returned on the errorMessage field in the response and server will continue with cashflow update If set to false issues during defaulting will cause an exception to be thrown and cashflow won't be updated.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Updates a miscellaneous cash and defaults SSI  # noqa: E501

        This endpoint allows updating a miscellaneous cash and defaulting Standard Settlement Instruction. SSI can be specified using the brokerId and settlementInstructionId parameters. If not provided settlementInstructionId will be defaulted based on brokerId and cashflow information. A cashflow can be identified in two ways, by the combination of (portfolioId + investmentNumber + seriesNumber) or by the combination of (externalId1 + organization), if it has an externalId. A valid combination of either of these must be provided on the request. The request will be validated based on the status of the cashflow and all  validations must pass for the request to be successful. If any validation fails, an exception will be thrown. (-- api-linter: core::0136::http-method=disabled     aip.dev/not-precedent: Method is update. --) (-- api-linter: core::0136::http-body=disabled     aip.dev/not-precedent: The resource being updated is MiscellaneousCashflow, not a MiscellaneousCashflowAndDefaultSettlementInstruction. --) (-- api-linter: core::0134::response-message-name=disabled     aip.dev/not-precedent: MiscellaneousCashflow is a specific type of Cashflow that does not support all columns, we want to return the entire Cashflow --) (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: core::0134::http-body=disabled     aip.dev/not-precedent: The resource being updated is MiscellaneousCashflow, not a MiscellaneousCashflowAndDefaultSettlementInstruction. --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because _cashflow.id is not recognized in the url. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_default_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, suppress_defaulting_error, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Miscellaneous cash to create. (required)
        :type body: V1MiscellaneousCashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param suppress_defaulting_error: If this field is set true and server fails to default settlement instruction error will be returned on the errorMessage field in the response and server will continue with cashflow update If set to false issues during defaulting will cause an exception to be thrown and cashflow won't be updated.
        :type suppress_defaulting_error: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1UpdateMiscellaneousCashflowAndDefaultSettlementInstructionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'validate_only',
            'suppress_defaulting_error'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_default_settlement_instruction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('validate_only') is not None:  # noqa: E501
            _query_params.append(('validateOnly', _params['validate_only']))

        if _params.get('suppress_defaulting_error') is not None:  # noqa: E501
            _query_params.append(('suppressDefaultingError', _params['suppress_defaulting_error']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1UpdateMiscellaneousCashflowAndDefaultSettlementInstructionResponse",
            '400': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '401': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '403': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '404': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
        }

        return self.api_client.call_api(
            '/miscellaneousCashflows:updateMiscellaneousCashflowAndDefaultSettlementInstruction', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_send_transmission(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1MiscellaneousCashflow, Field(..., description="Miscellaneous cash to update")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> V1UpdateMiscellaneousCashflowAndSendTransmissionResponse:  # noqa: E501
        """Update a miscellaneous cash and send transmission  # noqa: E501

        This endpoint can be used to add Standard Settlement Instruction (SSI) i.e. brokerId or settlementInstructionId to a record that does not have one attached and sends money out through transmission framework (confirmedBy and reviewedBy parameters are required in order for the transmission to be generated). Note that records that already have SSI attached cannot be updated via this endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) by the combination of (externalId1 + externalIdOrganization), if it has a cashflowExternalId. A valid combination of either these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. If any validation fails an exception will be thrown. (-- api-linter: core::0134::http-body=disabled     aip.dev/not-precedent: The resource being updated is MiscellaneousCashflow, not a MiscellaneousCashflowAndDefaultSettlementInstruction. --) (-- api-linter: core::0136::http-body=disabled     aip.dev/not-precedent: The resource being updated is MiscellaneousCashflow, not a MiscellaneousCashflowAndDefaultSettlementInstruction. --) (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: core::0134::response-message-name=disabled     aip.dev/not-precedent: MiscellaneousCashflow is a specific type of Cashflow that does not support all columns, we want to return the entire Cashflow --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_send_transmission(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Miscellaneous cash to update (required)
        :type body: V1MiscellaneousCashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1UpdateMiscellaneousCashflowAndSendTransmissionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_send_transmission_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, **kwargs)  # noqa: E501

    @validate_arguments
    def miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_send_transmission_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1MiscellaneousCashflow, Field(..., description="Miscellaneous cash to update")], validate_only : Annotated[Optional[StrictBool], Field(description="If this field is set to true, the server will only perform validation without executing any side effects.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a miscellaneous cash and send transmission  # noqa: E501

        This endpoint can be used to add Standard Settlement Instruction (SSI) i.e. brokerId or settlementInstructionId to a record that does not have one attached and sends money out through transmission framework (confirmedBy and reviewedBy parameters are required in order for the transmission to be generated). Note that records that already have SSI attached cannot be updated via this endpoint. A cashflow can be identified in two ways, by the combination of (portfolioId + cashflowInvestmentNumber + seriesNumber) by the combination of (externalId1 + externalIdOrganization), if it has a cashflowExternalId. A valid combination of either these must be provided on the request. The request will be validated based on the cashflowTransactionType and status of the cashflow and all validations must pass for the request to be successful. If any validation fails an exception will be thrown. (-- api-linter: core::0134::http-body=disabled     aip.dev/not-precedent: The resource being updated is MiscellaneousCashflow, not a MiscellaneousCashflowAndDefaultSettlementInstruction. --) (-- api-linter: core::0136::http-body=disabled     aip.dev/not-precedent: The resource being updated is MiscellaneousCashflow, not a MiscellaneousCashflowAndDefaultSettlementInstruction. --) (-- api-linter: core::0134::http-uri-id=disabled     aip.dev/not-precedent: The id is derived from multiple cashflow attributes. --) (-- api-linter: core::0134::response-message-name=disabled     aip.dev/not-precedent: MiscellaneousCashflow is a specific type of Cashflow that does not support all columns, we want to return the entire Cashflow --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled     aip.dev/not-precedent: Method is update, but it is not recognized because there is no id in the uri. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_send_transmission_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, validate_only, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: Miscellaneous cash to update (required)
        :type body: V1MiscellaneousCashflow
        :param validate_only: If this field is set to true, the server will only perform validation without executing any side effects.
        :type validate_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1UpdateMiscellaneousCashflowAndSendTransmissionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'validate_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method miscellaneous_cashflow_api_update_miscellaneous_cashflow_and_send_transmission" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('validate_only') is not None:  # noqa: E501
            _query_params.append(('validateOnly', _params['validate_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1UpdateMiscellaneousCashflowAndSendTransmissionResponse",
            '400': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '401': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '403': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
            '404': "MiscellaneousCashflowAPICreateMiscellaneousCashflow400Response",
        }

        return self.api_client.call_api(
            '/miscellaneousCashflows:updateMiscellaneousCashflowAndSendTransmission', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
