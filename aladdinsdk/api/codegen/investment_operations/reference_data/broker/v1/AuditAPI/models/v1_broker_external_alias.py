# coding: utf-8

"""
    Broker Entities - Audit

    Operations to retrieve audit data for broker entities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1BrokerExternalAlias(BaseModel):
    """
    It is used to map an Aladdin broker to the aliases by which the broker is known outside of AladdinÂ®.
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have a 'id' field. Name describes the computer or human assigned resource identifier. Represents Aladdin Broker Identifier (Numeric), commonly referred to as broker code.")
    broker_desk_id: Optional[StrictStr] = Field(None, alias="brokerDeskId", description="Broker desk id.")
    broker_external_organisation_id: Optional[StrictStr] = Field(None, alias="brokerExternalOrganisationId")
    external_alias: Optional[StrictStr] = Field(None, alias="externalAlias", description="Extern id value.")
    alternate_info1: Optional[StrictStr] = Field(None, alias="alternateInfo1", description="Additional data point to provide data in addition to extern id.")
    alternate_info2: Optional[StrictStr] = Field(None, alias="alternateInfo2", description="Additional data point to provide data in addition to extern id.")
    __properties = ["id", "brokerDeskId", "brokerExternalOrganisationId", "externalAlias", "alternateInfo1", "alternateInfo2"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BrokerExternalAlias:
        """Create an instance of V1BrokerExternalAlias from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BrokerExternalAlias:
        """Create an instance of V1BrokerExternalAlias from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BrokerExternalAlias.parse_obj(obj)

        _obj = V1BrokerExternalAlias.parse_obj({
            "id": obj.get("id"),
            "broker_desk_id": obj.get("brokerDeskId"),
            "broker_external_organisation_id": obj.get("brokerExternalOrganisationId"),
            "external_alias": obj.get("externalAlias"),
            "alternate_info1": obj.get("alternateInfo1"),
            "alternate_info2": obj.get("alternateInfo2")
        })
        return _obj

