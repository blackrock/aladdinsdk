# coding: utf-8

"""
    Broker Entities - Audit

    Operations to retrieve audit data for broker entities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class V1Broker(BaseModel):
    """
    A trade executed through Aladdin is a transaction that occurred between a portfolio and 'other' party.  Broker represents the 'other' participant in a trade.
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have a 'id' field. Name describes the computer or human assigned resource identifier. Broker code.")
    broker_ticker: Optional[StrictStr] = Field(None, alias="brokerTicker", description="Broker short name.")
    broker_name: Optional[StrictStr] = Field(None, alias="brokerName", description="Broker name.")
    broker_type: Optional[StrictStr] = Field(None, alias="brokerType", description="Broker type.")
    broker_issuer_id: Optional[StrictStr] = Field(None, alias="brokerIssuerId", description="Issuer id.")
    broker_external_organisation_id: Optional[StrictStr] = Field(None, alias="brokerExternalOrganisationId")
    broker_portfolio_id: Optional[StrictStr] = Field(None, alias="brokerPortfolioId", description="Broker portfolio code.")
    legal_entity_id: Optional[StrictStr] = Field(None, alias="legalEntityId", description="LEI - Legal Entity Identifier.  Refers to ticker from issuer table - Value is mapped and returned , not to be entered by the user.")
    business_purpose: Optional[StrictStr] = Field(None, alias="businessPurpose", description="Business Purpose.")
    active: Optional[StrictBool] = Field(None, description="active- Flag that indicates whether the counterparty is in active/defunct state.")
    __properties = ["id", "brokerTicker", "brokerName", "brokerType", "brokerIssuerId", "brokerExternalOrganisationId", "brokerPortfolioId", "legalEntityId", "businessPurpose", "active"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Broker:
        """Create an instance of V1Broker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Broker:
        """Create an instance of V1Broker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Broker.parse_obj(obj)

        _obj = V1Broker.parse_obj({
            "id": obj.get("id"),
            "broker_ticker": obj.get("brokerTicker"),
            "broker_name": obj.get("brokerName"),
            "broker_type": obj.get("brokerType"),
            "broker_issuer_id": obj.get("brokerIssuerId"),
            "broker_external_organisation_id": obj.get("brokerExternalOrganisationId"),
            "broker_portfolio_id": obj.get("brokerPortfolioId"),
            "legal_entity_id": obj.get("legalEntityId"),
            "business_purpose": obj.get("businessPurpose"),
            "active": obj.get("active")
        })
        return _obj

