# coding: utf-8

"""
    Broker Entities - Audit

    Operations to retrieve audit data for broker entities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.type_date_time import TypeDateTime
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_broker import V1Broker
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_broker_confirm_routing import V1BrokerConfirmRouting
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_broker_desk import V1BrokerDesk
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_broker_external_alias import V1BrokerExternalAlias
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_counter_party_settlement_instruction import V1CounterPartySettlementInstruction

class V1EntityRevision(BaseModel):
    """
    An audit entity represents a specific entity of the broker resource.
    """
    broker: Optional[V1Broker] = None
    broker_desk: Optional[V1BrokerDesk] = Field(None, alias="brokerDesk")
    broker_external_alias: Optional[V1BrokerExternalAlias] = Field(None, alias="brokerExternalAlias")
    broker_confirm_routing: Optional[V1BrokerConfirmRouting] = Field(None, alias="brokerConfirmRouting")
    counter_party_settlement_instruction: Optional[V1CounterPartySettlementInstruction] = Field(None, alias="counterPartySettlementInstruction")
    broker_ticker: Optional[StrictStr] = Field(None, alias="brokerTicker", description="Represents ticker of the entity for which audit data is being retrieved.")
    modifier: Optional[StrictStr] = Field(None, description="Represents username of the user who made changes to the record.")
    changed_time: Optional[TypeDateTime] = Field(None, alias="changedTime")
    operation: Optional[StrictStr] = Field(None, description="Represents the operation performed on the record.")
    __properties = ["broker", "brokerDesk", "brokerExternalAlias", "brokerConfirmRouting", "counterPartySettlementInstruction", "brokerTicker", "modifier", "changedTime", "operation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1EntityRevision:
        """Create an instance of V1EntityRevision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of broker
        if self.broker:
            _dict['broker'] = self.broker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broker_desk
        if self.broker_desk:
            _dict['brokerDesk'] = self.broker_desk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broker_external_alias
        if self.broker_external_alias:
            _dict['brokerExternalAlias'] = self.broker_external_alias.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broker_confirm_routing
        if self.broker_confirm_routing:
            _dict['brokerConfirmRouting'] = self.broker_confirm_routing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of counter_party_settlement_instruction
        if self.counter_party_settlement_instruction:
            _dict['counterPartySettlementInstruction'] = self.counter_party_settlement_instruction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of changed_time
        if self.changed_time:
            _dict['changedTime'] = self.changed_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1EntityRevision:
        """Create an instance of V1EntityRevision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1EntityRevision.parse_obj(obj)

        _obj = V1EntityRevision.parse_obj({
            "broker": V1Broker.from_dict(obj.get("broker")) if obj.get("broker") is not None else None,
            "broker_desk": V1BrokerDesk.from_dict(obj.get("brokerDesk")) if obj.get("brokerDesk") is not None else None,
            "broker_external_alias": V1BrokerExternalAlias.from_dict(obj.get("brokerExternalAlias")) if obj.get("brokerExternalAlias") is not None else None,
            "broker_confirm_routing": V1BrokerConfirmRouting.from_dict(obj.get("brokerConfirmRouting")) if obj.get("brokerConfirmRouting") is not None else None,
            "counter_party_settlement_instruction": V1CounterPartySettlementInstruction.from_dict(obj.get("counterPartySettlementInstruction")) if obj.get("counterPartySettlementInstruction") is not None else None,
            "broker_ticker": obj.get("brokerTicker"),
            "modifier": obj.get("modifier"),
            "changed_time": TypeDateTime.from_dict(obj.get("changedTime")) if obj.get("changedTime") is not None else None,
            "operation": obj.get("operation")
        })
        return _obj

