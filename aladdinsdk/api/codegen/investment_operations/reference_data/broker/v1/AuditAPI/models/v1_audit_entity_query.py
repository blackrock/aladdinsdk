# coding: utf-8

"""
    Broker Entities - Audit

    Operations to retrieve audit data for broker entities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_audit_entity_definition import V1AuditEntityDefinition
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_broker_audit_criterion import V1BrokerAuditCriterion
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_broker_confirm_routing_audit_criterion import V1BrokerConfirmRoutingAuditCriterion
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_broker_desk_audit_criterion import V1BrokerDeskAuditCriterion
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_broker_external_alias_audit_criterion import V1BrokerExternalAliasAuditCriterion
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.AuditAPI.models.v1_counterparty_settlement_instruction_audit_criterion import V1CounterpartySettlementInstructionAuditCriterion

class V1AuditEntityQuery(BaseModel):
    """
    Query to filter audit records.
    """
    broker_audit_criterion: Optional[V1BrokerAuditCriterion] = Field(None, alias="brokerAuditCriterion")
    broker_desk_audit_criterion: Optional[V1BrokerDeskAuditCriterion] = Field(None, alias="brokerDeskAuditCriterion")
    broker_external_alias_audit_criterion: Optional[V1BrokerExternalAliasAuditCriterion] = Field(None, alias="brokerExternalAliasAuditCriterion")
    broker_confirm_routing_audit_criterion: Optional[V1BrokerConfirmRoutingAuditCriterion] = Field(None, alias="brokerConfirmRoutingAuditCriterion")
    counter_party_settlement_instruction_audit_criterion: Optional[V1CounterpartySettlementInstructionAuditCriterion] = Field(None, alias="counterPartySettlementInstructionAuditCriterion")
    entity_definition: Optional[V1AuditEntityDefinition] = Field(None, alias="entityDefinition")
    start_date: Optional[date] = Field(None, alias="startDate", description="Start of date range within which audit records need to be retrieved.")
    end_date: Optional[date] = Field(None, alias="endDate", description="End of date range within which audit records need to be retrieved.")
    defunct: Optional[StrictBool] = Field(None, description="Defunct flag - to load only defunct counterparties and associated data.")
    __properties = ["brokerAuditCriterion", "brokerDeskAuditCriterion", "brokerExternalAliasAuditCriterion", "brokerConfirmRoutingAuditCriterion", "counterPartySettlementInstructionAuditCriterion", "entityDefinition", "startDate", "endDate", "defunct"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AuditEntityQuery:
        """Create an instance of V1AuditEntityQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of broker_audit_criterion
        if self.broker_audit_criterion:
            _dict['brokerAuditCriterion'] = self.broker_audit_criterion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broker_desk_audit_criterion
        if self.broker_desk_audit_criterion:
            _dict['brokerDeskAuditCriterion'] = self.broker_desk_audit_criterion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broker_external_alias_audit_criterion
        if self.broker_external_alias_audit_criterion:
            _dict['brokerExternalAliasAuditCriterion'] = self.broker_external_alias_audit_criterion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broker_confirm_routing_audit_criterion
        if self.broker_confirm_routing_audit_criterion:
            _dict['brokerConfirmRoutingAuditCriterion'] = self.broker_confirm_routing_audit_criterion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of counter_party_settlement_instruction_audit_criterion
        if self.counter_party_settlement_instruction_audit_criterion:
            _dict['counterPartySettlementInstructionAuditCriterion'] = self.counter_party_settlement_instruction_audit_criterion.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AuditEntityQuery:
        """Create an instance of V1AuditEntityQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AuditEntityQuery.parse_obj(obj)

        _obj = V1AuditEntityQuery.parse_obj({
            "broker_audit_criterion": V1BrokerAuditCriterion.from_dict(obj.get("brokerAuditCriterion")) if obj.get("brokerAuditCriterion") is not None else None,
            "broker_desk_audit_criterion": V1BrokerDeskAuditCriterion.from_dict(obj.get("brokerDeskAuditCriterion")) if obj.get("brokerDeskAuditCriterion") is not None else None,
            "broker_external_alias_audit_criterion": V1BrokerExternalAliasAuditCriterion.from_dict(obj.get("brokerExternalAliasAuditCriterion")) if obj.get("brokerExternalAliasAuditCriterion") is not None else None,
            "broker_confirm_routing_audit_criterion": V1BrokerConfirmRoutingAuditCriterion.from_dict(obj.get("brokerConfirmRoutingAuditCriterion")) if obj.get("brokerConfirmRoutingAuditCriterion") is not None else None,
            "counter_party_settlement_instruction_audit_criterion": V1CounterpartySettlementInstructionAuditCriterion.from_dict(obj.get("counterPartySettlementInstructionAuditCriterion")) if obj.get("counterPartySettlementInstructionAuditCriterion") is not None else None,
            "entity_definition": obj.get("entityDefinition"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "defunct": obj.get("defunct")
        })
        return _obj

