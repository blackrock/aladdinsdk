# coding: utf-8

"""
    Counter Party Settlement Instruction Template

    API contains operations on Counter Party Settlement Instruction Template resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class V1CounterPartySettlementInstructionTemplate(BaseModel):
    """
    CounterPartySettlementInstructionTemplate describes information about settlement instruction templates for a broker or account.
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have a 'id' field.  Name describes the computer or human assigned resource identifier. Represents Delivery method.")
    template_name: Optional[StrictStr] = Field(None, alias="templateName", description="Template Name.")
    template_order: Optional[StrictStr] = Field(None, alias="templateOrder", description="Template Order.")
    template_group: Optional[StrictStr] = Field(None, alias="templateGroup", description="Template Group.")
    template_type: Optional[StrictStr] = Field(None, alias="templateType", description="Template Type.")
    template_definition_maps: Optional[Dict[str, StrictStr]] = Field(None, alias="templateDefinitionMaps", description="Template definition Map.")
    __properties = ["id", "templateName", "templateOrder", "templateGroup", "templateType", "templateDefinitionMaps"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CounterPartySettlementInstructionTemplate:
        """Create an instance of V1CounterPartySettlementInstructionTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CounterPartySettlementInstructionTemplate:
        """Create an instance of V1CounterPartySettlementInstructionTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CounterPartySettlementInstructionTemplate.parse_obj(obj)

        _obj = V1CounterPartySettlementInstructionTemplate.parse_obj({
            "id": obj.get("id"),
            "template_name": obj.get("templateName"),
            "template_order": obj.get("templateOrder"),
            "template_group": obj.get("templateGroup"),
            "template_type": obj.get("templateType"),
            "template_definition_maps": obj.get("templateDefinitionMaps")
        })
        return _obj

