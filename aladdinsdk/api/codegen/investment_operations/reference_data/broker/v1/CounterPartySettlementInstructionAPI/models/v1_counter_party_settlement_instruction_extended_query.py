# coding: utf-8

"""
    Counter Party Settlement Instruction

    API contains operations on Counter Party Settlement Instruction resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_settlement_instruction_state import V1SettlementInstructionState

class V1CounterPartySettlementInstructionExtendedQuery(BaseModel):
    """
    The query required to perform a filter query.
    """
    broker_tickers: Optional[conlist(StrictStr)] = Field(None, alias="brokerTickers", description="Broker ticker for which broker desk data is to be retrieved.")
    broker_type: Optional[StrictStr] = Field(None, alias="brokerType", description="Broker Type.")
    delivery_name: Optional[StrictStr] = Field(None, alias="deliveryName", description="Represents delivery name for the settlement instruction.")
    settlement_instruction_entity: Optional[StrictStr] = Field(None, alias="settlementInstructionEntity", description="Entity.")
    settlement_instruction_state: Optional[V1SettlementInstructionState] = Field(None, alias="settlementInstructionState")
    ids: Optional[conlist(StrictStr)] = Field(None, description="List of Ids of the Counterparty Settlement instruction.")
    __properties = ["brokerTickers", "brokerType", "deliveryName", "settlementInstructionEntity", "settlementInstructionState", "ids"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CounterPartySettlementInstructionExtendedQuery:
        """Create an instance of V1CounterPartySettlementInstructionExtendedQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CounterPartySettlementInstructionExtendedQuery:
        """Create an instance of V1CounterPartySettlementInstructionExtendedQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CounterPartySettlementInstructionExtendedQuery.parse_obj(obj)

        _obj = V1CounterPartySettlementInstructionExtendedQuery.parse_obj({
            "broker_tickers": obj.get("brokerTickers"),
            "broker_type": obj.get("brokerType"),
            "delivery_name": obj.get("deliveryName"),
            "settlement_instruction_entity": obj.get("settlementInstructionEntity"),
            "settlement_instruction_state": obj.get("settlementInstructionState"),
            "ids": obj.get("ids")
        })
        return _obj

