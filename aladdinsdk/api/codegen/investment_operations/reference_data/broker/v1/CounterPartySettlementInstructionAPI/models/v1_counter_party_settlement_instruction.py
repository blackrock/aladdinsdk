# coding: utf-8

"""
    Counter Party Settlement Instruction

    API contains operations on Counter Party Settlement Instruction resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_settlement_instruction_state import V1SettlementInstructionState

class V1CounterPartySettlementInstruction(BaseModel):
    """
    CounterPartySettlementInstruction describes information about settlement instructions for a broker or account.
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have a 'id' field.  Name describes the computer or human assigned resource identifier. Represents Settle Code.")
    broker_id: Optional[StrictStr] = Field(None, alias="brokerId", description="Represents Aladdin Broker Identifier (Numeric), commonly referred to as broker code.")
    account_name: Optional[StrictStr] = Field(None, alias="accountName", description="Represents account name of the settlement instruction.")
    delivery_name: Optional[StrictStr] = Field(None, alias="deliveryName", description="Represents delivery name for the settlement instruction.")
    settlement_instruction_rule: Optional[StrictStr] = Field(None, alias="settlementInstructionRule", description="Represents rule like bql, which if evaluated to true, selects given instruction.")
    settlement_instruction_state: Optional[V1SettlementInstructionState] = Field(None, alias="settlementInstructionState")
    settlement_instruction_modifier: Optional[StrictStr] = Field(None, alias="settlementInstructionModifier", description="Represents modifier of the settlement instruction record.")
    settlement_instruction_modify_date: Optional[date] = Field(None, alias="settlementInstructionModifyDate", description="Represents modified date of the settlement instruction record.")
    settlement_instruction_reviewer: Optional[StrictStr] = Field(None, alias="settlementInstructionReviewer", description="Represents reviewer of the settlement instruction record.")
    settlement_instruction_review_date: Optional[date] = Field(None, alias="settlementInstructionReviewDate", description="Represents reviewed date of the settlement instruction record.")
    settlement_parties: Optional[Dict[str, StrictStr]] = Field(None, alias="settlementParties", description="Represents the settlement parties associated with settlement instruction record.")
    settlement_instruction_entity: Optional[StrictStr] = Field(None, alias="settlementInstructionEntity", description="Represents broker entity based on the decode BROKER_ENTITY.")
    template_definition_maps: Optional[Dict[str, StrictStr]] = Field(None, alias="templateDefinitionMaps", description="Template definition Map.")
    __properties = ["id", "brokerId", "accountName", "deliveryName", "settlementInstructionRule", "settlementInstructionState", "settlementInstructionModifier", "settlementInstructionModifyDate", "settlementInstructionReviewer", "settlementInstructionReviewDate", "settlementParties", "settlementInstructionEntity", "templateDefinitionMaps"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CounterPartySettlementInstruction:
        """Create an instance of V1CounterPartySettlementInstruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CounterPartySettlementInstruction:
        """Create an instance of V1CounterPartySettlementInstruction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CounterPartySettlementInstruction.parse_obj(obj)

        _obj = V1CounterPartySettlementInstruction.parse_obj({
            "id": obj.get("id"),
            "broker_id": obj.get("brokerId"),
            "account_name": obj.get("accountName"),
            "delivery_name": obj.get("deliveryName"),
            "settlement_instruction_rule": obj.get("settlementInstructionRule"),
            "settlement_instruction_state": obj.get("settlementInstructionState"),
            "settlement_instruction_modifier": obj.get("settlementInstructionModifier"),
            "settlement_instruction_modify_date": obj.get("settlementInstructionModifyDate"),
            "settlement_instruction_reviewer": obj.get("settlementInstructionReviewer"),
            "settlement_instruction_review_date": obj.get("settlementInstructionReviewDate"),
            "settlement_parties": obj.get("settlementParties"),
            "settlement_instruction_entity": obj.get("settlementInstructionEntity"),
            "template_definition_maps": obj.get("templateDefinitionMaps")
        })
        return _obj

