# coding: utf-8

"""
    Counter Party Settlement Instruction

    API contains operations on Counter Party Settlement Instruction resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictInt, StrictStr

from typing import Any, Dict, Optional

from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_batch_create_counter_party_settlement_instructions_request import V1BatchCreateCounterPartySettlementInstructionsRequest
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_batch_create_counter_party_settlement_instructions_response import V1BatchCreateCounterPartySettlementInstructionsResponse
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_batch_update_counter_party_settlement_instructions_request import V1BatchUpdateCounterPartySettlementInstructionsRequest
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_batch_update_counter_party_settlement_instructions_response import V1BatchUpdateCounterPartySettlementInstructionsResponse
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_batch_update_counter_party_settlement_instructions_statuses_request import V1BatchUpdateCounterPartySettlementInstructionsStatusesRequest
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_batch_update_counter_party_settlement_instructions_statuses_response import V1BatchUpdateCounterPartySettlementInstructionsStatusesResponse
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_batch_validate_counter_party_settlement_instructions_request import V1BatchValidateCounterPartySettlementInstructionsRequest
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_batch_validate_counter_party_settlement_instructions_response import V1BatchValidateCounterPartySettlementInstructionsResponse
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_counter_party_settlement_instruction import V1CounterPartySettlementInstruction
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_filter_counter_party_settlement_instructions_request import V1FilterCounterPartySettlementInstructionsRequest
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_filter_counter_party_settlement_instructions_response import V1FilterCounterPartySettlementInstructionsResponse
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_search_counter_party_settlement_instructions_response import V1SearchCounterPartySettlementInstructionsResponse
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_undelete_counter_party_settlement_instruction_request import V1UndeleteCounterPartySettlementInstructionRequest

from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.api_client import ApiClient
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultCounterPartySettlementInstructionAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def counter_party_settlement_instruction_api_batch_create_counter_party_settlement_instructions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateCounterPartySettlementInstructionsRequest, **kwargs) -> V1BatchCreateCounterPartySettlementInstructionsResponse:  # noqa: E501
        """Batch Create Counter Party Settlement Instructions  # noqa: E501

        Create one or more Counter Party Settlement Instructions to a maximum of 100 per request. Required fields:- brokerTicker,deliveryName,settlementParties.  Users needs to have permissions under permType='brkrSettlm' for using this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_batch_create_counter_party_settlement_instructions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateCounterPartySettlementInstructionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchCreateCounterPartySettlementInstructionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_batch_create_counter_party_settlement_instructions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_batch_create_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_batch_create_counter_party_settlement_instructions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateCounterPartySettlementInstructionsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Create Counter Party Settlement Instructions  # noqa: E501

        Create one or more Counter Party Settlement Instructions to a maximum of 100 per request. Required fields:- brokerTicker,deliveryName,settlementParties.  Users needs to have permissions under permType='brkrSettlm' for using this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_batch_create_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateCounterPartySettlementInstructionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchCreateCounterPartySettlementInstructionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_batch_create_counter_party_settlement_instructions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchCreateCounterPartySettlementInstructionsResponse",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions:batchCreate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateCounterPartySettlementInstructionsRequest, **kwargs) -> V1BatchUpdateCounterPartySettlementInstructionsResponse:  # noqa: E501
        """Batch Update Counter Party Settlement Instructions  # noqa: E501

        Batch Update Counter Party Settlement Instructions. Required fields:- id,brokerTicker,deliveryName,settlementParties. Users needs to have permissions under permType='brkrSettlm' for using this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateCounterPartySettlementInstructionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchUpdateCounterPartySettlementInstructionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateCounterPartySettlementInstructionsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Update Counter Party Settlement Instructions  # noqa: E501

        Batch Update Counter Party Settlement Instructions. Required fields:- id,brokerTicker,deliveryName,settlementParties. Users needs to have permissions under permType='brkrSettlm' for using this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateCounterPartySettlementInstructionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchUpdateCounterPartySettlementInstructionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchUpdateCounterPartySettlementInstructionsResponse",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions:batchUpdate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_statuses(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateCounterPartySettlementInstructionsStatusesRequest, **kwargs) -> V1BatchUpdateCounterPartySettlementInstructionsStatusesResponse:  # noqa: E501
        """Batch Update Counter Party Settlement Instructions Status  # noqa: E501

        Updates status for multiple Counter Party Settlement Instructions. (-- api-linter: core::0136::http-uri-suffix=disabled  aip.dev/not-precedent: We need to do this because we are updating a particular column across counterparty settlement instructions, and not the entire object --) (-- api-linter: aladdin::9048::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are updating a particular column across counterparty settlement instructions, and not the entire object --) (-- api-linter: core::0234::http-uri-suffix=disabled  aip.dev/not-precedent: We need to do this because this api only updates status for a given list of settle codes, and is not a standard batch update API -)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_statuses(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateCounterPartySettlementInstructionsStatusesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchUpdateCounterPartySettlementInstructionsStatusesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_statuses_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_statuses_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_statuses_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateCounterPartySettlementInstructionsStatusesRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Update Counter Party Settlement Instructions Status  # noqa: E501

        Updates status for multiple Counter Party Settlement Instructions. (-- api-linter: core::0136::http-uri-suffix=disabled  aip.dev/not-precedent: We need to do this because we are updating a particular column across counterparty settlement instructions, and not the entire object --) (-- api-linter: aladdin::9048::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are updating a particular column across counterparty settlement instructions, and not the entire object --) (-- api-linter: core::0234::http-uri-suffix=disabled  aip.dev/not-precedent: We need to do this because this api only updates status for a given list of settle codes, and is not a standard batch update API -)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_statuses_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateCounterPartySettlementInstructionsStatusesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchUpdateCounterPartySettlementInstructionsStatusesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_batch_update_counter_party_settlement_instructions_statuses" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchUpdateCounterPartySettlementInstructionsStatusesResponse",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions:batchUpdateStatuses', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def counter_party_settlement_instruction_api_batch_validate_counter_party_settlement_instructions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchValidateCounterPartySettlementInstructionsRequest, **kwargs) -> V1BatchValidateCounterPartySettlementInstructionsResponse:  # noqa: E501
        """Batch Validate Counter Party Settlement Instructions  # noqa: E501

        Validates multiple Counter Party Settlement Instruction Requests for create and update API calls.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_batch_validate_counter_party_settlement_instructions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchValidateCounterPartySettlementInstructionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchValidateCounterPartySettlementInstructionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_batch_validate_counter_party_settlement_instructions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_batch_validate_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_batch_validate_counter_party_settlement_instructions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchValidateCounterPartySettlementInstructionsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Validate Counter Party Settlement Instructions  # noqa: E501

        Validates multiple Counter Party Settlement Instruction Requests for create and update API calls.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_batch_validate_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchValidateCounterPartySettlementInstructionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchValidateCounterPartySettlementInstructionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_batch_validate_counter_party_settlement_instructions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchValidateCounterPartySettlementInstructionsResponse",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions:batchValidate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def counter_party_settlement_instruction_api_delete_counter_party_settlement_instruction(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the counter party settlement instruction to be soft deleted.")], broker_id : Annotated[Optional[StrictStr], Field(description="Aladdin Broker Identifier (Numeric) (Not supported currently). (-- api-linter: core::0135::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because this refers to id of parent ... --).")] = None, broker_ticker : Annotated[Optional[StrictStr], Field(description="Broker ticker. (-- api-linter: core::0135::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because ticker is a part of the parent... --).")] = None, **kwargs) -> object:  # noqa: E501
        """Deletes a Counter Party Settlement Instruction  # noqa: E501

        It is a soft delete by setting settlement instruction entity value to -9999.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_delete_counter_party_settlement_instruction(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, broker_id, broker_ticker, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the counter party settlement instruction to be soft deleted. (required)
        :type id: str
        :param broker_id: Aladdin Broker Identifier (Numeric) (Not supported currently). (-- api-linter: core::0135::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because this refers to id of parent ... --).
        :type broker_id: str
        :param broker_ticker: Broker ticker. (-- api-linter: core::0135::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because ticker is a part of the parent... --).
        :type broker_ticker: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_delete_counter_party_settlement_instruction_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_delete_counter_party_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, broker_id, broker_ticker, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_delete_counter_party_settlement_instruction_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the counter party settlement instruction to be soft deleted.")], broker_id : Annotated[Optional[StrictStr], Field(description="Aladdin Broker Identifier (Numeric) (Not supported currently). (-- api-linter: core::0135::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because this refers to id of parent ... --).")] = None, broker_ticker : Annotated[Optional[StrictStr], Field(description="Broker ticker. (-- api-linter: core::0135::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because ticker is a part of the parent... --).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Deletes a Counter Party Settlement Instruction  # noqa: E501

        It is a soft delete by setting settlement instruction entity value to -9999.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_delete_counter_party_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, broker_id, broker_ticker, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the counter party settlement instruction to be soft deleted. (required)
        :type id: str
        :param broker_id: Aladdin Broker Identifier (Numeric) (Not supported currently). (-- api-linter: core::0135::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because this refers to id of parent ... --).
        :type broker_id: str
        :param broker_ticker: Broker ticker. (-- api-linter: core::0135::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because ticker is a part of the parent... --).
        :type broker_ticker: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id',
            'broker_id',
            'broker_ticker'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_delete_counter_party_settlement_instruction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('broker_id') is not None:  # noqa: E501
            _query_params.append(('brokerId', _params['broker_id']))

        if _params.get('broker_ticker') is not None:  # noqa: E501
            _query_params.append(('brokerTicker', _params['broker_ticker']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def counter_party_settlement_instruction_api_filter_counter_party_settlement_instructions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterCounterPartySettlementInstructionsRequest, **kwargs) -> V1FilterCounterPartySettlementInstructionsResponse:  # noqa: E501
        """Filter Counter Party Settlement Instructions  # noqa: E501

        Filters Counter Party Settlement Instructions based on a single broker ticker(for basic filtering) or any combination of the following filters :  List of broker tickers, broker type, delivery name, settlement instruction state and settlement instruction entity (for advance filtering).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_filter_counter_party_settlement_instructions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterCounterPartySettlementInstructionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterCounterPartySettlementInstructionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_filter_counter_party_settlement_instructions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_filter_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_filter_counter_party_settlement_instructions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterCounterPartySettlementInstructionsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Counter Party Settlement Instructions  # noqa: E501

        Filters Counter Party Settlement Instructions based on a single broker ticker(for basic filtering) or any combination of the following filters :  List of broker tickers, broker type, delivery name, settlement instruction state and settlement instruction entity (for advance filtering).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_filter_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterCounterPartySettlementInstructionsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterCounterPartySettlementInstructionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_filter_counter_party_settlement_instructions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterCounterPartySettlementInstructionsResponse",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def counter_party_settlement_instruction_api_get_counter_party_settlement_instruction(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the Counterparty Settlement instruction.")], **kwargs) -> V1CounterPartySettlementInstruction:  # noqa: E501
        """Get Counter Party Settlement Instruction  # noqa: E501

        Gets a Counter Party Settlement Instructions by settle code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_get_counter_party_settlement_instruction(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the Counterparty Settlement instruction. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CounterPartySettlementInstruction
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_get_counter_party_settlement_instruction_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_get_counter_party_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_get_counter_party_settlement_instruction_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the Counterparty Settlement instruction.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Counter Party Settlement Instruction  # noqa: E501

        Gets a Counter Party Settlement Instructions by settle code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_get_counter_party_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the Counterparty Settlement instruction. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CounterPartySettlementInstruction, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_get_counter_party_settlement_instruction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CounterPartySettlementInstruction",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def counter_party_settlement_instruction_api_search_counter_party_settlement_instructions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], search : Annotated[StrictStr, Field(..., description="Search string (atleast two characters).")], counter_party_settlement_instructions_search_type : Annotated[Optional[StrictStr], Field(description="Represents search type.   - COUNTER_PARTY_SETTLEMENT_INSTRUCTIONS_SEARCH_TYPE_UNSPECIFIED: The API will default to the BIC type  - COUNTER_PARTY_SETTLEMENT_INSTRUCTIONS_SEARCH_TYPE_BIC: This is the default value Fields searched - BIC.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum value is 100; values above 100 will be coerced to 100 If unspecified, the default value to return is 100 The maximum number of CounterPartySettlementInstructions to return(Pagination is not supported currently).")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous call(Pagination is not supported currently).")] = None, **kwargs) -> V1SearchCounterPartySettlementInstructionsResponse:  # noqa: E501
        """Search Counter Party Settlement Instructions  # noqa: E501

        Searches Counter Party Settlement Instructions based on the input query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_search_counter_party_settlement_instructions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, search, counter_party_settlement_instructions_search_type, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param search: Search string (atleast two characters). (required)
        :type search: str
        :param counter_party_settlement_instructions_search_type: Represents search type.   - COUNTER_PARTY_SETTLEMENT_INSTRUCTIONS_SEARCH_TYPE_UNSPECIFIED: The API will default to the BIC type  - COUNTER_PARTY_SETTLEMENT_INSTRUCTIONS_SEARCH_TYPE_BIC: This is the default value Fields searched - BIC.
        :type counter_party_settlement_instructions_search_type: str
        :param page_size: The maximum value is 100; values above 100 will be coerced to 100 If unspecified, the default value to return is 100 The maximum number of CounterPartySettlementInstructions to return(Pagination is not supported currently).
        :type page_size: int
        :param page_token: A page token, received from a previous call(Pagination is not supported currently).
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1SearchCounterPartySettlementInstructionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_search_counter_party_settlement_instructions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_search_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, search, counter_party_settlement_instructions_search_type, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_search_counter_party_settlement_instructions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], search : Annotated[StrictStr, Field(..., description="Search string (atleast two characters).")], counter_party_settlement_instructions_search_type : Annotated[Optional[StrictStr], Field(description="Represents search type.   - COUNTER_PARTY_SETTLEMENT_INSTRUCTIONS_SEARCH_TYPE_UNSPECIFIED: The API will default to the BIC type  - COUNTER_PARTY_SETTLEMENT_INSTRUCTIONS_SEARCH_TYPE_BIC: This is the default value Fields searched - BIC.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum value is 100; values above 100 will be coerced to 100 If unspecified, the default value to return is 100 The maximum number of CounterPartySettlementInstructions to return(Pagination is not supported currently).")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous call(Pagination is not supported currently).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search Counter Party Settlement Instructions  # noqa: E501

        Searches Counter Party Settlement Instructions based on the input query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_search_counter_party_settlement_instructions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, search, counter_party_settlement_instructions_search_type, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param search: Search string (atleast two characters). (required)
        :type search: str
        :param counter_party_settlement_instructions_search_type: Represents search type.   - COUNTER_PARTY_SETTLEMENT_INSTRUCTIONS_SEARCH_TYPE_UNSPECIFIED: The API will default to the BIC type  - COUNTER_PARTY_SETTLEMENT_INSTRUCTIONS_SEARCH_TYPE_BIC: This is the default value Fields searched - BIC.
        :type counter_party_settlement_instructions_search_type: str
        :param page_size: The maximum value is 100; values above 100 will be coerced to 100 If unspecified, the default value to return is 100 The maximum number of CounterPartySettlementInstructions to return(Pagination is not supported currently).
        :type page_size: int
        :param page_token: A page token, received from a previous call(Pagination is not supported currently).
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1SearchCounterPartySettlementInstructionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'search',
            'counter_party_settlement_instructions_search_type',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_search_counter_party_settlement_instructions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('counter_party_settlement_instructions_search_type') is not None:  # noqa: E501
            _query_params.append(('counterPartySettlementInstructionsSearchType', _params['counter_party_settlement_instructions_search_type'].value))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1SearchCounterPartySettlementInstructionsResponse",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions:search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def counter_party_settlement_instruction_api_undelete_counter_party_settlement_instruction(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1UndeleteCounterPartySettlementInstructionRequest, **kwargs) -> V1CounterPartySettlementInstruction:  # noqa: E501
        """Undeletes a Counter Party Settlement Instruction  # noqa: E501

        It reverses the soft delete by setting settlement instruction entity value to 9999.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_undelete_counter_party_settlement_instruction(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1UndeleteCounterPartySettlementInstructionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CounterPartySettlementInstruction
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the counter_party_settlement_instruction_api_undelete_counter_party_settlement_instruction_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.counter_party_settlement_instruction_api_undelete_counter_party_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def counter_party_settlement_instruction_api_undelete_counter_party_settlement_instruction_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1UndeleteCounterPartySettlementInstructionRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Undeletes a Counter Party Settlement Instruction  # noqa: E501

        It reverses the soft delete by setting settlement instruction entity value to 9999.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counter_party_settlement_instruction_api_undelete_counter_party_settlement_instruction_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1UndeleteCounterPartySettlementInstructionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CounterPartySettlementInstruction, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method counter_party_settlement_instruction_api_undelete_counter_party_settlement_instruction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CounterPartySettlementInstruction",
            '400': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '401': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '403': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
            '404': "CounterPartySettlementInstructionAPIGetCounterPartySettlementInstruction400Response",
        }

        return self.api_client.call_api(
            '/counterPartySettlementInstructions:undelete', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
