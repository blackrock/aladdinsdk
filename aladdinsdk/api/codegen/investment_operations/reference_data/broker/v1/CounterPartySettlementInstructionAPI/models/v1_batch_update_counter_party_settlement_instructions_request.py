# coding: utf-8

"""
    Counter Party Settlement Instruction

    API contains operations on Counter Party Settlement Instruction resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.v1_update_counter_party_settlement_instruction_request import V1UpdateCounterPartySettlementInstructionRequest

class V1BatchUpdateCounterPartySettlementInstructionsRequest(BaseModel):
    """
    The request message for CounterPartySettlementInstructionAPI.BatchUpdateCounterPartySettlementInstructions.
    """
    broker_id: Optional[StrictStr] = Field(None, alias="brokerId", description="Aladdin Broker Identifier (Numeric) (Not supported currently).")
    broker_ticker: Optional[StrictStr] = Field(None, alias="brokerTicker", description="Broker ticker.")
    requests: conlist(V1UpdateCounterPartySettlementInstructionRequest) = Field(..., description="A maximum of 100 Counter party settlement instructions can be updated in a batch. Id, Broker Id, Delivery Instruction and  Settlement Instructions are mandatory fields.")
    skip_bql_validation: Optional[StrictBool] = Field(None, alias="skipBqlValidation")
    is_generic_template: Optional[StrictBool] = Field(None, alias="isGenericTemplate", description="This is a flag which should only be set as true if you want to update settlement instructions without passing the actual template definitions in the settlement parties map, i.e. If you wish to pass settlement parties as  [VALUE1, VALUE2,... VALUE30]. (-- api-linter: core::0234::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because this flag is common to all POST request objects which determines the format in which settlement parties will be considered --)")
    __properties = ["brokerId", "brokerTicker", "requests", "skipBqlValidation", "isGenericTemplate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BatchUpdateCounterPartySettlementInstructionsRequest:
        """Create an instance of V1BatchUpdateCounterPartySettlementInstructionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in requests (list)
        _items = []
        if self.requests:
            for _item in self.requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['requests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BatchUpdateCounterPartySettlementInstructionsRequest:
        """Create an instance of V1BatchUpdateCounterPartySettlementInstructionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BatchUpdateCounterPartySettlementInstructionsRequest.parse_obj(obj)

        _obj = V1BatchUpdateCounterPartySettlementInstructionsRequest.parse_obj({
            "broker_id": obj.get("brokerId"),
            "broker_ticker": obj.get("brokerTicker"),
            "requests": [V1UpdateCounterPartySettlementInstructionRequest.from_dict(_item) for _item in obj.get("requests")] if obj.get("requests") is not None else None,
            "skip_bql_validation": obj.get("skipBqlValidation"),
            "is_generic_template": obj.get("isGenericTemplate")
        })
        return _obj

