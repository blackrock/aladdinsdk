# coding: utf-8

"""
    Counter Party Settlement Instruction

    API contains operations on Counter Party Settlement Instruction resource.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.investment_operations.reference_data.broker.v1.CounterPartySettlementInstructionAPI.models.rpc_status import RpcStatus

class V1BatchValidateCounterPartySettlementInstructionsResponse(BaseModel):
    """
    The response message for BatchValidateCounterPartySettlementInstructions.
    """
    status: Optional[RpcStatus] = None
    counterparty_settlement_instruction_validation: Optional[StrictStr] = Field(None, alias="counterpartySettlementInstructionValidation", description="Represents the validation associated with the counterparty settlement instruction records.")
    __properties = ["status", "counterpartySettlementInstructionValidation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BatchValidateCounterPartySettlementInstructionsResponse:
        """Create an instance of V1BatchValidateCounterPartySettlementInstructionsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BatchValidateCounterPartySettlementInstructionsResponse:
        """Create an instance of V1BatchValidateCounterPartySettlementInstructionsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BatchValidateCounterPartySettlementInstructionsResponse.parse_obj(obj)

        _obj = V1BatchValidateCounterPartySettlementInstructionsResponse.parse_obj({
            "status": RpcStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "counterparty_settlement_instruction_validation": obj.get("counterpartySettlementInstructionValidation")
        })
        return _obj

