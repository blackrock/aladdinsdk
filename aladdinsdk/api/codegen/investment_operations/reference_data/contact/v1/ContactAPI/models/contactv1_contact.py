# coding: utf-8

"""
    Aladdin Broker Contact

    Contact defines the Recipient details to which we want to communicate with external parties like Custodians/Brokers  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Contactv1Contact(BaseModel):
    """
    Contactv1Contact
    """
    id: Optional[StrictStr] = Field(None, description="Every contact resource will have a unique contact code.  'id' field stores the contact code.")
    last_name: Optional[StrictStr] = Field(None, alias="lastName", description="Last name.")
    first_name: Optional[StrictStr] = Field(None, alias="firstName", description="First name .")
    external_account_id: Optional[StrictStr] = Field(None, alias="externalAccountId", description="external_account_id refers to the id of organization.")
    title: Optional[StrictStr] = Field(None, description="Title.")
    email_address: Optional[StrictStr] = Field(None, alias="emailAddress", description="Email address.")
    ftp_address: Optional[StrictStr] = Field(None, alias="ftpAddress", description="FTP address.")
    printer: Optional[StrictStr] = Field(None, description="Printer.")
    voice_phone: Optional[StrictStr] = Field(None, alias="voicePhone", description="Phone number.")
    fax_phone: Optional[StrictStr] = Field(None, alias="faxPhone", description="Fax number.")
    street_address1: Optional[StrictStr] = Field(None, alias="streetAddress1", description="Address.")
    street_address2: Optional[StrictStr] = Field(None, alias="streetAddress2", description="Address(continued).")
    city: Optional[StrictStr] = Field(None, description="City.")
    contact_state: Optional[StrictStr] = Field(None, alias="contactState", description="State .")
    country_code: Optional[StrictStr] = Field(None, alias="countryCode", description="Country.")
    zip: Optional[StrictStr] = Field(None, description="Zip code.")
    web_type: Optional[StrictStr] = Field(None, alias="webType", description="Web type.")
    remote_directory: Optional[StrictStr] = Field(None, alias="remoteDirectory", description="FTP remote directory.")
    login: Optional[StrictStr] = Field(None, description="FTP login token name .")
    port: Optional[StrictInt] = Field(None, description="FTP host port number.")
    __properties = ["id", "lastName", "firstName", "externalAccountId", "title", "emailAddress", "ftpAddress", "printer", "voicePhone", "faxPhone", "streetAddress1", "streetAddress2", "city", "contactState", "countryCode", "zip", "webType", "remoteDirectory", "login", "port"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Contactv1Contact:
        """Create an instance of Contactv1Contact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Contactv1Contact:
        """Create an instance of Contactv1Contact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Contactv1Contact.parse_obj(obj)

        _obj = Contactv1Contact.parse_obj({
            "id": obj.get("id"),
            "last_name": obj.get("lastName"),
            "first_name": obj.get("firstName"),
            "external_account_id": obj.get("externalAccountId"),
            "title": obj.get("title"),
            "email_address": obj.get("emailAddress"),
            "ftp_address": obj.get("ftpAddress"),
            "printer": obj.get("printer"),
            "voice_phone": obj.get("voicePhone"),
            "fax_phone": obj.get("faxPhone"),
            "street_address1": obj.get("streetAddress1"),
            "street_address2": obj.get("streetAddress2"),
            "city": obj.get("city"),
            "contact_state": obj.get("contactState"),
            "country_code": obj.get("countryCode"),
            "zip": obj.get("zip"),
            "web_type": obj.get("webType"),
            "remote_directory": obj.get("remoteDirectory"),
            "login": obj.get("login"),
            "port": obj.get("port")
        })
        return _obj

