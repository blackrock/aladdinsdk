# coding: utf-8

"""
    Aladdin Broker Contact

    Contact defines the Recipient details to which we want to communicate with external parties like Custodians/Brokers  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class V1ContactsQuery(BaseModel):
    """
    V1ContactsQuery
    """
    contacts_codes: Optional[conlist(StrictStr)] = Field(None, alias="contactsCodes", description="List of Contact codes.")
    external_account_id: Optional[StrictStr] = Field(None, alias="externalAccountId", description="Represents external acct id to search contact for.")
    first_name: Optional[StrictStr] = Field(None, alias="firstName", description="Represents first name to search contact for.")
    last_name: Optional[StrictStr] = Field(None, alias="lastName", description="Represents last name to search contact for.")
    __properties = ["contactsCodes", "externalAccountId", "firstName", "lastName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ContactsQuery:
        """Create an instance of V1ContactsQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ContactsQuery:
        """Create an instance of V1ContactsQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ContactsQuery.parse_obj(obj)

        _obj = V1ContactsQuery.parse_obj({
            "contacts_codes": obj.get("contactsCodes"),
            "external_account_id": obj.get("externalAccountId"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName")
        })
        return _obj

