# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_return_response import EnumsReturnResponse

class V1CreateSecurityResponse(BaseModel):
    """
    V1CreateSecurityResponse
    """
    return_code: Optional[EnumsReturnResponse] = Field(None, alias="returnCode")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    __properties = ["returnCode", "assetId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateSecurityResponse:
        """Create an instance of V1CreateSecurityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of return_code
        if self.return_code:
            _dict['returnCode'] = self.return_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateSecurityResponse:
        """Create an instance of V1CreateSecurityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateSecurityResponse.parse_obj(obj)

        _obj = V1CreateSecurityResponse.parse_obj({
            "return_code": EnumsReturnResponse.from_dict(obj.get("returnCode")) if obj.get("returnCode") is not None else None,
            "asset_id": obj.get("assetId")
        })
        return _obj

