# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_accrual_base import EnumsAccrualBase
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_delay_type import EnumsDelayType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_independent_amount_type import EnumsIndependentAmountType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_payment_type import EnumsPaymentType

class V1IncomeFee(BaseModel):
    """
    V1IncomeFee
    """
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    payment_type: Optional[EnumsPaymentType] = Field(None, alias="paymentType")
    dividend_delay_type: Optional[EnumsDelayType] = Field(None, alias="dividendDelayType")
    dividend_delay_value: Optional[StrictInt] = Field(None, alias="dividendDelayValue")
    payout: Optional[Union[StrictFloat, StrictInt]] = None
    management_fee_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="managementFeeRate", description="management fee that can be paid or received along with the performance payments.")
    management_fee_accrual_base: Optional[EnumsAccrualBase] = Field(None, alias="managementFeeAccrualBase")
    management_fee_start_date: Optional[date] = Field(None, alias="managementFeeStartDate")
    independent_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="independentAmount")
    independent_amount_type: Optional[EnumsIndependentAmountType] = Field(None, alias="independentAmountType")
    independent_amount_start_date: Optional[date] = Field(None, alias="independentAmountStartDate")
    __properties = ["currencyCode", "paymentType", "dividendDelayType", "dividendDelayValue", "payout", "managementFeeRate", "managementFeeAccrualBase", "managementFeeStartDate", "independentAmount", "independentAmountType", "independentAmountStartDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1IncomeFee:
        """Create an instance of V1IncomeFee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1IncomeFee:
        """Create an instance of V1IncomeFee from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1IncomeFee.parse_obj(obj)

        _obj = V1IncomeFee.parse_obj({
            "currency_code": obj.get("currencyCode"),
            "payment_type": obj.get("paymentType"),
            "dividend_delay_type": obj.get("dividendDelayType"),
            "dividend_delay_value": obj.get("dividendDelayValue"),
            "payout": obj.get("payout"),
            "management_fee_rate": obj.get("managementFeeRate"),
            "management_fee_accrual_base": obj.get("managementFeeAccrualBase"),
            "management_fee_start_date": obj.get("managementFeeStartDate"),
            "independent_amount": obj.get("independentAmount"),
            "independent_amount_type": obj.get("independentAmountType"),
            "independent_amount_start_date": obj.get("independentAmountStartDate")
        })
        return _obj

