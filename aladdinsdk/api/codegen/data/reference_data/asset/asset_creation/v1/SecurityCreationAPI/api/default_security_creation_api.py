# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictStr

from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_arm_tba_security import AssetassetCreationv1ArmTbaSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_cash_repo_security import AssetassetCreationv1CashRepoSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_cash_time_deposit_security import AssetassetCreationv1CashTimeDepositSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_cds_security import AssetassetCreationv1CdsSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_cdx_security import AssetassetCreationv1CdxSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_equity_equity_security import AssetassetCreationv1EquityEquitySecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_equity_option_security import AssetassetCreationv1EquityOptionSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_futures_security import AssetassetCreationv1FuturesSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_fx_option_security import AssetassetCreationv1FxOptionSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_fx_security import AssetassetCreationv1FxSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_fxndf_security import AssetassetCreationv1FxndfSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_interest_rate_swap_security import AssetassetCreationv1InterestRateSwapSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_mbs_tba_security import AssetassetCreationv1MbsTbaSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_swaption_security import AssetassetCreationv1SwaptionSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.assetasset_creationv1_total_return_swap_security import AssetassetCreationv1TotalReturnSwapSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_arm_tba_security import ReferenceDataassetv1ArmTbaSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_cash_repo_security import ReferenceDataassetv1CashRepoSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_cash_time_deposit_security import ReferenceDataassetv1CashTimeDepositSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_cds_security import ReferenceDataassetv1CdsSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_cdx_security import ReferenceDataassetv1CdxSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_equity_equity_security import ReferenceDataassetv1EquityEquitySecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_equity_option_security import ReferenceDataassetv1EquityOptionSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_futures_security import ReferenceDataassetv1FuturesSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_fx_option_security import ReferenceDataassetv1FxOptionSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_fx_security import ReferenceDataassetv1FxSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_fxndf_security import ReferenceDataassetv1FxndfSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_interest_rate_swap_security import ReferenceDataassetv1InterestRateSwapSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_mbs_tba_security import ReferenceDataassetv1MbsTbaSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_swaption_security import ReferenceDataassetv1SwaptionSecurity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.reference_dataassetv1_total_return_swap_security import ReferenceDataassetv1TotalReturnSwapSecurity

from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.api_client import ApiClient
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultSecurityCreationAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def security_creation_api_create_arm_tba_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1ArmTbaSecurity, Field(..., description="arm_tba_security_request")], **kwargs) -> AssetassetCreationv1ArmTbaSecurity:  # noqa: E501
        """Create ARM/TBA Securities  # noqa: E501

        Create ARM/TBA Securities based upon inputs provided by user  When creating ARM/TBA security, required fields are     - agency           - ex: GNMAII     - term             - ex: 10       - initialCoupon           - ex: 1.0       - wac             - ex: 20.0     - wam             - ex: 56     - wala             - ex: 100  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: We need to do this way only --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_arm_tba_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: arm_tba_security_request (required)
        :type body: ReferenceDataassetv1ArmTbaSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1ArmTbaSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_arm_tba_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_arm_tba_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_arm_tba_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1ArmTbaSecurity, Field(..., description="arm_tba_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create ARM/TBA Securities  # noqa: E501

        Create ARM/TBA Securities based upon inputs provided by user  When creating ARM/TBA security, required fields are     - agency           - ex: GNMAII     - term             - ex: 10       - initialCoupon           - ex: 1.0       - wac             - ex: 20.0     - wam             - ex: 56     - wala             - ex: 100  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: We need to do this way only --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_arm_tba_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: arm_tba_security_request (required)
        :type body: ReferenceDataassetv1ArmTbaSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1ArmTbaSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_arm_tba_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1ArmTbaSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/armTbaSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_cash_repo_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1CashRepoSecurity, Field(..., description="cash_repo_security_request")], **kwargs) -> AssetassetCreationv1CashRepoSecurity:  # noqa: E501
        """Create CASH/REPO Securities  # noqa: E501

        Create CASH/REPO Securities based upon inputs provided by user  When creating CASH/REPO security, all fields are optional  When variableRate is TRUE, required fields are      - resetIndex        - ex: PREVRATE  You MAY provide all other fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_cash_repo_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: cash_repo_security_request (required)
        :type body: ReferenceDataassetv1CashRepoSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1CashRepoSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_cash_repo_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_cash_repo_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_cash_repo_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1CashRepoSecurity, Field(..., description="cash_repo_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create CASH/REPO Securities  # noqa: E501

        Create CASH/REPO Securities based upon inputs provided by user  When creating CASH/REPO security, all fields are optional  When variableRate is TRUE, required fields are      - resetIndex        - ex: PREVRATE  You MAY provide all other fields  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_cash_repo_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: cash_repo_security_request (required)
        :type body: ReferenceDataassetv1CashRepoSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1CashRepoSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_cash_repo_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1CashRepoSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/cashRepoSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_cash_time_deposit_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1CashTimeDepositSecurity, Field(..., description="cash_time_deposit_security_request")], **kwargs) -> AssetassetCreationv1CashTimeDepositSecurity:  # noqa: E501
        """Create CASH/TD Securities  # noqa: E501

        Create CASH/TD Securities based upon inputs provided by user  When creating CASH/TD security, required fields are:     - rateType             - ex: MAT  When rateType is FIXED, required fields are     - paymentFrequency        - ex: DAILY     - rate           - ex: 1  When rateType is FLOAT, required fields are     - paymentFrequency        - ex: DAILY     - resetIndex            - ex: PREVRATE  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: We need to do this way only --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_cash_time_deposit_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: cash_time_deposit_security_request (required)
        :type body: ReferenceDataassetv1CashTimeDepositSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1CashTimeDepositSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_cash_time_deposit_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_cash_time_deposit_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_cash_time_deposit_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1CashTimeDepositSecurity, Field(..., description="cash_time_deposit_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create CASH/TD Securities  # noqa: E501

        Create CASH/TD Securities based upon inputs provided by user  When creating CASH/TD security, required fields are:     - rateType             - ex: MAT  When rateType is FIXED, required fields are     - paymentFrequency        - ex: DAILY     - rate           - ex: 1  When rateType is FLOAT, required fields are     - paymentFrequency        - ex: DAILY     - resetIndex            - ex: PREVRATE  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: We need to do this way only --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_cash_time_deposit_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: cash_time_deposit_security_request (required)
        :type body: ReferenceDataassetv1CashTimeDepositSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1CashTimeDepositSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_cash_time_deposit_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1CashTimeDepositSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/cashTimeDepositSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_cds_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1CdsSecurity, Field(..., description="cds_security_request")], **kwargs) -> AssetassetCreationv1CdsSecurity:  # noqa: E501
        """Create CDS Securities  # noqa: E501

        Create CDS Securities based upon inputs provided by user  When creating a CDS security, required fields are:     - dealSpread           - ex: DEAL_SPREAD_100     - maturityDate         - ex: 2026-06-01     - referenceEntity      - ex: F67209     - restructureType      - ex: RESTRUCTURE_TYPE_2014_MOD_MOD  You MAY provide all other fields (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_cds_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: cds_security_request (required)
        :type body: ReferenceDataassetv1CdsSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1CdsSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_cds_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_cds_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_cds_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1CdsSecurity, Field(..., description="cds_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create CDS Securities  # noqa: E501

        Create CDS Securities based upon inputs provided by user  When creating a CDS security, required fields are:     - dealSpread           - ex: DEAL_SPREAD_100     - maturityDate         - ex: 2026-06-01     - referenceEntity      - ex: F67209     - restructureType      - ex: RESTRUCTURE_TYPE_2014_MOD_MOD  You MAY provide all other fields (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_cds_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: cds_security_request (required)
        :type body: ReferenceDataassetv1CdsSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1CdsSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_cds_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1CdsSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/cdsSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_cdx_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1CdxSecurity, Field(..., description="cdx_security_request")], **kwargs) -> AssetassetCreationv1CdxSecurity:  # noqa: E501
        """Create CDX Securities  # noqa: E501

        Create CDX Securities based upon inputs provided by user  When creating a CDX security, required fields are:     - exchange          - Check out the decodes table CDS_EXCHANGE for corresponding cde value to be used. For example, use \"BILATERAL\" for BILATERAL.  cdxInfo:     - basketTypeRating  - ex: BASKET_TYPE_RATING_INVESTMENT_GRADE     - indexType         - ex: INDEX_GROUP_CDX     - series         - ex: 29     - term              - ex: 7  You MAY provide all other fields (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_cdx_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: cdx_security_request (required)
        :type body: ReferenceDataassetv1CdxSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1CdxSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_cdx_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_cdx_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_cdx_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1CdxSecurity, Field(..., description="cdx_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create CDX Securities  # noqa: E501

        Create CDX Securities based upon inputs provided by user  When creating a CDX security, required fields are:     - exchange          - Check out the decodes table CDS_EXCHANGE for corresponding cde value to be used. For example, use \"BILATERAL\" for BILATERAL.  cdxInfo:     - basketTypeRating  - ex: BASKET_TYPE_RATING_INVESTMENT_GRADE     - indexType         - ex: INDEX_GROUP_CDX     - series         - ex: 29     - term              - ex: 7  You MAY provide all other fields (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_cdx_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: cdx_security_request (required)
        :type body: ReferenceDataassetv1CdxSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1CdxSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_cdx_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1CdxSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/cdxSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_equity_equity_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1EquityEquitySecurity, Field(..., description="equity_equity_security_request")], **kwargs) -> AssetassetCreationv1EquityEquitySecurity:  # noqa: E501
        """Create EQUITY/EQUITY Securities  # noqa: E501

        Create EQUITY/EQUITY Securities based upon inputs provided by user  When creating a EQUITY EQUITY security, required fields are:     - ticker             - ex: SPRGR     - name               - ex: AXEL SPRINGER SE NPV     - currencyCode       - ex: EUR     - countryCode        - ex: DE     - lotSize         - ex: 1.00  You MAY provide all other fields (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: We need to do this way only --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_equity_equity_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: equity_equity_security_request (required)
        :type body: ReferenceDataassetv1EquityEquitySecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1EquityEquitySecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_equity_equity_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_equity_equity_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_equity_equity_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1EquityEquitySecurity, Field(..., description="equity_equity_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create EQUITY/EQUITY Securities  # noqa: E501

        Create EQUITY/EQUITY Securities based upon inputs provided by user  When creating a EQUITY EQUITY security, required fields are:     - ticker             - ex: SPRGR     - name               - ex: AXEL SPRINGER SE NPV     - currencyCode       - ex: EUR     - countryCode        - ex: DE     - lotSize         - ex: 1.00  You MAY provide all other fields (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: We need to do this way only --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_equity_equity_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: equity_equity_security_request (required)
        :type body: ReferenceDataassetv1EquityEquitySecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1EquityEquitySecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_equity_equity_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1EquityEquitySecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/equityEquitySecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_equity_option_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1EquityOptionSecurity, Field(..., description="equity_option_security_request")], **kwargs) -> AssetassetCreationv1EquityOptionSecurity:  # noqa: E501
        """Create Equity Option Securities  # noqa: E501

        Create Equity Option Securities based upon inputs provided by user  When creating an Equity Option security, required fields are:     - equityOptionType        - ex: EQUITY_OPTION_TYPE_OTC     - expirationDate          - ex: 2022-08-24     - strikePrice         - ex: 13     - underlyingAssetId       - ex: 037833100     - callPutType          - ex: CALL_PUT_TYPE_CALL  You MAY provide all other fields when Equity Option type is OTC  You MAY provide all other fields except fxRate and expiryTime when Equity Option type is FLEX  You should not provide all other fields except exchange when Equity Option type is LISTED (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_equity_option_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: equity_option_security_request (required)
        :type body: ReferenceDataassetv1EquityOptionSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1EquityOptionSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_equity_option_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_equity_option_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_equity_option_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1EquityOptionSecurity, Field(..., description="equity_option_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Equity Option Securities  # noqa: E501

        Create Equity Option Securities based upon inputs provided by user  When creating an Equity Option security, required fields are:     - equityOptionType        - ex: EQUITY_OPTION_TYPE_OTC     - expirationDate          - ex: 2022-08-24     - strikePrice         - ex: 13     - underlyingAssetId       - ex: 037833100     - callPutType          - ex: CALL_PUT_TYPE_CALL  You MAY provide all other fields when Equity Option type is OTC  You MAY provide all other fields except fxRate and expiryTime when Equity Option type is FLEX  You should not provide all other fields except exchange when Equity Option type is LISTED (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_equity_option_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: equity_option_security_request (required)
        :type body: ReferenceDataassetv1EquityOptionSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1EquityOptionSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_equity_option_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1EquityOptionSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/equityOptionSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_futures_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1FuturesSecurity, Field(..., description="futures_security_request")], **kwargs) -> AssetassetCreationv1FuturesSecurity:  # noqa: E501
        """Create Futures Securities  # noqa: E501

        Create Futures Securities based upon inputs provided by user  When creating a Futures security, required fields may vary:  Case 1: If RIC is provided, no other fields are needed:     - ric            - ex: PFDH1  Case 2: If no RIC is provided, required fields are:     - contractMonth         - ex: MARCH     - contractName         - ex: COTTON     - contractYear          - ex: 23  You MAY provide all other fields except RIC (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_futures_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: futures_security_request (required)
        :type body: ReferenceDataassetv1FuturesSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1FuturesSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_futures_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_futures_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_futures_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1FuturesSecurity, Field(..., description="futures_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Futures Securities  # noqa: E501

        Create Futures Securities based upon inputs provided by user  When creating a Futures security, required fields may vary:  Case 1: If RIC is provided, no other fields are needed:     - ric            - ex: PFDH1  Case 2: If no RIC is provided, required fields are:     - contractMonth         - ex: MARCH     - contractName         - ex: COTTON     - contractYear          - ex: 23  You MAY provide all other fields except RIC (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_futures_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: futures_security_request (required)
        :type body: ReferenceDataassetv1FuturesSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1FuturesSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_futures_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1FuturesSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/futuresSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_fx_option_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1FxOptionSecurity, Field(..., description="fx_option_security_request")], **kwargs) -> AssetassetCreationv1FxOptionSecurity:  # noqa: E501
        """Create FX Option Securities  # noqa: E501

        Create FX Option Securities based upon inputs provided by user  When creating a FX Option security, required fields may vary based upon Option Style  Case 1. When Option Style is American or European or FVA, required fields are:     - optionStyle           - ex: OPTION_STYLE_AMERICAN     - callPutType           - ex: CALL_PUT_TYPE_CALL     - strike             - ex: 1     - expirationDate        - ex: 2026-06-20     - currencyPair          - ex: USDCAD  You MAY provide all other fields except barrier information as it is not needed when option style is American or European or FVA  Case 2. When Option Style is Double Knock In or Double Knock Out, required fields are:     - optionStyle           - ex: OPTION_STYLE_DOUBLE_KNOCK_IN     - callPutType           - ex: CALL_PUT_TYPE_CALL     - strike             - ex: 1     - expirationDate        - ex: 2026-06-20     - currencyPair          - ex: USDCAD     - lowerBarrier         - ex: 1     - upperBarrier         - ex: 2  You MAY provide other fields  Case 3. When Option Style is Up and In or Up and Out, required fields are:     - optionStyle           - ex: OPTION_STYLE_UP_AND_IN     - callPutType           - ex: CALL_PUT_TYPE_CALL     - strike             - ex: 1     - expirationDate        - ex: 2026-06-20     - currencyPair          - ex: USDCAD     - upperBarrier         - ex: 2  You MAY provide all other fields except lowerBarrier as it is not needed when option style is Up and In or Up and Out  Case 4. When Option Style is Down and In or Down and Out, required fields are:     - optionStyle           - ex: OPTION_STYLE_DOWN_AND_IN     - callPutType           - ex: CALL_PUT_TYPE_CALL     - strike             - ex: 1     - expirationDate        - ex: 2026-06-20     - currencyPair          - ex: USDCAD     - lowerBarrier         - ex: 2  You MAY provide all other fields except upperBarrier as it is not needed when option style is Down and In or Down and Out  Case 5. When Option Style is One Touch or Instant One Touch or No Touch, required fields are:     - optionStyle                 - ex: OPTION_STYLE_ONE_TOUCH     - expirationDate              - ex: 2026-06-20     - currencyPair                - ex: USDCAD     - lowerBarrier or upperBarrier         - ex: 2  You MAY provide all other fields except callPutType, nonDeliverable and strike as they are not needed when option style is One Touch or Instant One Touch or No Touch  Case 6. When Option Style is Double Touch or Double No Touch, required fields are:     - optionStyle                 - ex: OPTION_STYLE_DOUBLE_TOUCH     - expirationDate              - ex: 2026-06-20     - currencyPair                - ex: USDCAD     - lowerBarrier               - ex: 1     - upperBarrier              - ex: 2  You MAY provide all other fields except callPutType, nonDeliverable and strike as they are not needed when option style is Double Touch or Double No Touch (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_fx_option_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: fx_option_security_request (required)
        :type body: ReferenceDataassetv1FxOptionSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1FxOptionSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_fx_option_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_fx_option_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_fx_option_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1FxOptionSecurity, Field(..., description="fx_option_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create FX Option Securities  # noqa: E501

        Create FX Option Securities based upon inputs provided by user  When creating a FX Option security, required fields may vary based upon Option Style  Case 1. When Option Style is American or European or FVA, required fields are:     - optionStyle           - ex: OPTION_STYLE_AMERICAN     - callPutType           - ex: CALL_PUT_TYPE_CALL     - strike             - ex: 1     - expirationDate        - ex: 2026-06-20     - currencyPair          - ex: USDCAD  You MAY provide all other fields except barrier information as it is not needed when option style is American or European or FVA  Case 2. When Option Style is Double Knock In or Double Knock Out, required fields are:     - optionStyle           - ex: OPTION_STYLE_DOUBLE_KNOCK_IN     - callPutType           - ex: CALL_PUT_TYPE_CALL     - strike             - ex: 1     - expirationDate        - ex: 2026-06-20     - currencyPair          - ex: USDCAD     - lowerBarrier         - ex: 1     - upperBarrier         - ex: 2  You MAY provide other fields  Case 3. When Option Style is Up and In or Up and Out, required fields are:     - optionStyle           - ex: OPTION_STYLE_UP_AND_IN     - callPutType           - ex: CALL_PUT_TYPE_CALL     - strike             - ex: 1     - expirationDate        - ex: 2026-06-20     - currencyPair          - ex: USDCAD     - upperBarrier         - ex: 2  You MAY provide all other fields except lowerBarrier as it is not needed when option style is Up and In or Up and Out  Case 4. When Option Style is Down and In or Down and Out, required fields are:     - optionStyle           - ex: OPTION_STYLE_DOWN_AND_IN     - callPutType           - ex: CALL_PUT_TYPE_CALL     - strike             - ex: 1     - expirationDate        - ex: 2026-06-20     - currencyPair          - ex: USDCAD     - lowerBarrier         - ex: 2  You MAY provide all other fields except upperBarrier as it is not needed when option style is Down and In or Down and Out  Case 5. When Option Style is One Touch or Instant One Touch or No Touch, required fields are:     - optionStyle                 - ex: OPTION_STYLE_ONE_TOUCH     - expirationDate              - ex: 2026-06-20     - currencyPair                - ex: USDCAD     - lowerBarrier or upperBarrier         - ex: 2  You MAY provide all other fields except callPutType, nonDeliverable and strike as they are not needed when option style is One Touch or Instant One Touch or No Touch  Case 6. When Option Style is Double Touch or Double No Touch, required fields are:     - optionStyle                 - ex: OPTION_STYLE_DOUBLE_TOUCH     - expirationDate              - ex: 2026-06-20     - currencyPair                - ex: USDCAD     - lowerBarrier               - ex: 1     - upperBarrier              - ex: 2  You MAY provide all other fields except callPutType, nonDeliverable and strike as they are not needed when option style is Double Touch or Double No Touch (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_fx_option_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: fx_option_security_request (required)
        :type body: ReferenceDataassetv1FxOptionSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1FxOptionSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_fx_option_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1FxOptionSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/fxOptionSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_fx_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1FxSecurity, Field(..., description="fx_security_request")], **kwargs) -> AssetassetCreationv1FxSecurity:  # noqa: E501
        """Create FX SPOT, FX FWRD, FX CSWAP Securities  # noqa: E501

        Create FX SPOT, FX FWRD, FX CSWAP Securities based upon inputs provided by user  When creating a FX security, required fields are:     - currencyPair      - ex: USDCAD  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --) (-- api-linter: aladdin::9105::method-comment-summary=disabled  aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_fx_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: fx_security_request (required)
        :type body: ReferenceDataassetv1FxSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1FxSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_fx_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_fx_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_fx_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1FxSecurity, Field(..., description="fx_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create FX SPOT, FX FWRD, FX CSWAP Securities  # noqa: E501

        Create FX SPOT, FX FWRD, FX CSWAP Securities based upon inputs provided by user  When creating a FX security, required fields are:     - currencyPair      - ex: USDCAD  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --) (-- api-linter: aladdin::9105::method-comment-summary=disabled  aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_fx_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: fx_security_request (required)
        :type body: ReferenceDataassetv1FxSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1FxSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_fx_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1FxSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/fxSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_fxndf_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1FxndfSecurity, Field(..., description="fxndf_security_request")], **kwargs) -> AssetassetCreationv1FxndfSecurity:  # noqa: E501
        """Create FX NDF Securities  # noqa: E501

        Create FX NDF Securities based upon inputs provided by user  When creating a FX NDF security, required fields are:     - currencyPair      - ex: USDCAD     - valueDate         - ex: 2022-08-11  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_fxndf_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: fxndf_security_request (required)
        :type body: ReferenceDataassetv1FxndfSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1FxndfSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_fxndf_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_fxndf_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_fxndf_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1FxndfSecurity, Field(..., description="fxndf_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create FX NDF Securities  # noqa: E501

        Create FX NDF Securities based upon inputs provided by user  When creating a FX NDF security, required fields are:     - currencyPair      - ex: USDCAD     - valueDate         - ex: 2022-08-11  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_fxndf_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: fxndf_security_request (required)
        :type body: ReferenceDataassetv1FxndfSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1FxndfSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_fxndf_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1FxndfSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/fxndfSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_interest_rate_swap_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1InterestRateSwapSecurity, Field(..., description="interest_rate_swap_security_request")], **kwargs) -> AssetassetCreationv1InterestRateSwapSecurity:  # noqa: E501
        """Create Interest Rate Swap Securities  # noqa: E501

        Create Interest Rate Swap Securities based upon inputs provided by user  When creating an Interest Rate Swap security, required fields may vary based upon Swap type  By default, Pay Leg Swap type is FLOAT and Rec Leg Swap type is FIXED  Case 1. When Swap type is not provided by user, it will take default values for Swap type, and required fields are:     - maturityDate        - ex: 2022-12-24  swapInfo -> recLeg     - rate               - ex: 1  Case 2. When both Leg are of FLOAT type, required fields are:     - maturityDate        - ex: 2022-12-24  swapInfo -> recLeg     - type            - ex: SWAP_LEG_FLOAT     - resetIndex          - ex: US3MLIB  swapInfo -> payLeg     - type            - ex: SWAP_LEG_FLOAT     - resetIndex          - ex: US3MLIB  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_interest_rate_swap_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: interest_rate_swap_security_request (required)
        :type body: ReferenceDataassetv1InterestRateSwapSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1InterestRateSwapSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_interest_rate_swap_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_interest_rate_swap_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_interest_rate_swap_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1InterestRateSwapSecurity, Field(..., description="interest_rate_swap_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Interest Rate Swap Securities  # noqa: E501

        Create Interest Rate Swap Securities based upon inputs provided by user  When creating an Interest Rate Swap security, required fields may vary based upon Swap type  By default, Pay Leg Swap type is FLOAT and Rec Leg Swap type is FIXED  Case 1. When Swap type is not provided by user, it will take default values for Swap type, and required fields are:     - maturityDate        - ex: 2022-12-24  swapInfo -> recLeg     - rate               - ex: 1  Case 2. When both Leg are of FLOAT type, required fields are:     - maturityDate        - ex: 2022-12-24  swapInfo -> recLeg     - type            - ex: SWAP_LEG_FLOAT     - resetIndex          - ex: US3MLIB  swapInfo -> payLeg     - type            - ex: SWAP_LEG_FLOAT     - resetIndex          - ex: US3MLIB  You MAY provide all other fields  (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_interest_rate_swap_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: interest_rate_swap_security_request (required)
        :type body: ReferenceDataassetv1InterestRateSwapSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1InterestRateSwapSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_interest_rate_swap_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1InterestRateSwapSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/interestRateSwapSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_mbs_tba_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1MbsTbaSecurity, Field(..., description="ambs_tba_security_request")], **kwargs) -> AssetassetCreationv1MbsTbaSecurity:  # noqa: E501
        """Create MBS/TBA Securities  # noqa: E501

        Create MBS/TBA Securities based upon inputs provided by user  When creating MBS/TBA security, required fields are     - agency           - ex: GNMAII     - term             - ex: 10       - coupon            - ex: 1.0    You MAY provide all other fields (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: We need to do this way only --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_mbs_tba_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: ambs_tba_security_request (required)
        :type body: ReferenceDataassetv1MbsTbaSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1MbsTbaSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_mbs_tba_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_mbs_tba_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_mbs_tba_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1MbsTbaSecurity, Field(..., description="ambs_tba_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create MBS/TBA Securities  # noqa: E501

        Create MBS/TBA Securities based upon inputs provided by user  When creating MBS/TBA security, required fields are     - agency           - ex: GNMAII     - term             - ex: 10       - coupon            - ex: 1.0    You MAY provide all other fields (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: We need to do this way only --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_mbs_tba_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: ambs_tba_security_request (required)
        :type body: ReferenceDataassetv1MbsTbaSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1MbsTbaSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_mbs_tba_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1MbsTbaSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/mbsTbaSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_swaption_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1SwaptionSecurity, Field(..., description="swaption_security_request")], **kwargs) -> AssetassetCreationv1SwaptionSecurity:  # noqa: E501
        """Create Swaption Securities  # noqa: E501

        Create Swaption Securities based upon inputs provided by user  When creating a Swaption security, required fields may vary based upon Swaption type  By default, Swaption type is Plain Vanilla  Case 1. When Swaption type is Plain Vanilla, required fields are:     - swaptionType           - ex: SWAPTION_TYPE_PLAIN_VANILLA     - expirationDate         - ex: 2026-06-20     - callPutType          - ex: CALL_PUT_TYPE_PUT     - underlyingTerm         - ex: 1  You MAY provide all other fields except underlyingStart  Case 2. When Swaption type is Mid Curve, required fields are:     - swaptionType           - ex: SWAPTION_TYPE_MID_CURVE     - expirationDate         - ex: 2026-06-20     - callPutType          - ex: CALL_PUT_TYPE_PUT     - underlyingTerm         - ex: 1     - underlyingStart     - ex: 1  You MAY provide all other fields   Case 3. When Swaption type is CDX, required fields are:     - swaptionType           - ex: SWAPTION_TYPE_CDX     - expirationDate         - ex: 2026-06-20     - callPutType          - ex: CALL_PUT_TYPE_PUT  underlyingCdxInfo:     - basketTypeRating       - ex: BASKET_TYPE_RATING_INVESTMENT_GRADE     - indexType              - ex: INDEX_GROUP_CDX     - series              - ex: 29     - term                   - ex: 7  You MAY provide all other fields except underlyingTerm and underlyingStart (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_swaption_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: swaption_security_request (required)
        :type body: ReferenceDataassetv1SwaptionSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1SwaptionSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_swaption_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_swaption_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_swaption_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1SwaptionSecurity, Field(..., description="swaption_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Swaption Securities  # noqa: E501

        Create Swaption Securities based upon inputs provided by user  When creating a Swaption security, required fields may vary based upon Swaption type  By default, Swaption type is Plain Vanilla  Case 1. When Swaption type is Plain Vanilla, required fields are:     - swaptionType           - ex: SWAPTION_TYPE_PLAIN_VANILLA     - expirationDate         - ex: 2026-06-20     - callPutType          - ex: CALL_PUT_TYPE_PUT     - underlyingTerm         - ex: 1  You MAY provide all other fields except underlyingStart  Case 2. When Swaption type is Mid Curve, required fields are:     - swaptionType           - ex: SWAPTION_TYPE_MID_CURVE     - expirationDate         - ex: 2026-06-20     - callPutType          - ex: CALL_PUT_TYPE_PUT     - underlyingTerm         - ex: 1     - underlyingStart     - ex: 1  You MAY provide all other fields   Case 3. When Swaption type is CDX, required fields are:     - swaptionType           - ex: SWAPTION_TYPE_CDX     - expirationDate         - ex: 2026-06-20     - callPutType          - ex: CALL_PUT_TYPE_PUT  underlyingCdxInfo:     - basketTypeRating       - ex: BASKET_TYPE_RATING_INVESTMENT_GRADE     - indexType              - ex: INDEX_GROUP_CDX     - series              - ex: 29     - term                   - ex: 7  You MAY provide all other fields except underlyingTerm and underlyingStart (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_swaption_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: swaption_security_request (required)
        :type body: ReferenceDataassetv1SwaptionSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1SwaptionSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_swaption_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1SwaptionSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/swaptionSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def security_creation_api_create_total_return_swap_security(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1TotalReturnSwapSecurity, Field(..., description="total_return_swap_security_request")], **kwargs) -> AssetassetCreationv1TotalReturnSwapSecurity:  # noqa: E501
        """Create Total Return Swap Securities  # noqa: E501

        Create Total Return Swap Securities based upon inputs provided by user  When creating a Total Return Swap security, required fields may vary based upon Swap type  Rec Leg Swap type is always FLOAT  By default, Pay Leg Swap type is FlOAT  Case 1. When Pay Leg Swap type is not provided by user, it will take default value for Swap type, and required fields are:  swapInfo -> payLeg     - endDate               - ex: 2022-12-24  swapInfo -> recLeg     - endDate             - ex: 2022-12-24     - underlyingAssetId          - ex: BRSQRCT63  You may provide all other fields except rate as it is not needed when Pay Leg is of FLOAT type  Case 2. When Pay Leg Swap type is provided by user, required fields will be same as in Case 1  You may provide all other fields except initialRate, spread and resetIndex as it is not needed when Pay Leg is of FIXED type (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_total_return_swap_security(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: total_return_swap_security_request (required)
        :type body: ReferenceDataassetv1TotalReturnSwapSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetassetCreationv1TotalReturnSwapSecurity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the security_creation_api_create_total_return_swap_security_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.security_creation_api_create_total_return_swap_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def security_creation_api_create_total_return_swap_security_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[ReferenceDataassetv1TotalReturnSwapSecurity, Field(..., description="total_return_swap_security_request")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Total Return Swap Securities  # noqa: E501

        Create Total Return Swap Securities based upon inputs provided by user  When creating a Total Return Swap security, required fields may vary based upon Swap type  Rec Leg Swap type is always FLOAT  By default, Pay Leg Swap type is FlOAT  Case 1. When Pay Leg Swap type is not provided by user, it will take default value for Swap type, and required fields are:  swapInfo -> payLeg     - endDate               - ex: 2022-12-24  swapInfo -> recLeg     - endDate             - ex: 2022-12-24     - underlyingAssetId          - ex: BRSQRCT63  You may provide all other fields except rate as it is not needed when Pay Leg is of FLOAT type  Case 2. When Pay Leg Swap type is provided by user, required fields will be same as in Case 1  You may provide all other fields except initialRate, spread and resetIndex as it is not needed when Pay Leg is of FIXED type (-- api-linter: aladdin::9105::method-comment-description=disabled aip.dev/not-precedent: This description was present before this change. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.security_creation_api_create_total_return_swap_security_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: total_return_swap_security_request (required)
        :type body: ReferenceDataassetv1TotalReturnSwapSecurity
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetassetCreationv1TotalReturnSwapSecurity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_creation_api_create_total_return_swap_security" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "AssetassetCreationv1TotalReturnSwapSecurity",
            '400': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '401': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '403': "SecurityCreationAPICreateArmTbaSecurity400Response",
            '404': "SecurityCreationAPICreateArmTbaSecurity400Response",
        }

        return self.api_client.call_api(
            '/totalReturnSwapSecurity', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
