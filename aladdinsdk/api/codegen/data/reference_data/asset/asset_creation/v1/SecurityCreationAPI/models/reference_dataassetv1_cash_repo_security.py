# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_accrual_base import EnumsAccrualBase
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_collateral_type import EnumsCollateralType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_coupon_calc_method import EnumsCouponCalcMethod
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_lookback_type import EnumsLookbackType

class ReferenceDataassetv1CashRepoSecurity(BaseModel):
    """
    ReferenceDataassetv1CashRepoSecurity
    """
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    accrual_base: Optional[EnumsAccrualBase] = Field(None, alias="accrualBase")
    accrual_date: Optional[date] = Field(None, alias="accrualDate")
    maturity_date: Optional[date] = Field(None, alias="maturityDate")
    collateral_type: Optional[EnumsCollateralType] = Field(None, alias="collateralType")
    fee: Optional[Union[StrictFloat, StrictInt]] = None
    callable: Optional[StrictBool] = None
    call_delay_day_count: Optional[StrictInt] = Field(None, alias="callDelayDayCount")
    rate: Optional[Union[StrictFloat, StrictInt]] = None
    variable_rate: Optional[StrictBool] = Field(None, alias="variableRate")
    spread: Optional[Union[StrictFloat, StrictInt]] = None
    lookback_calendar_codes: Optional[conlist(StrictStr)] = Field(None, alias="lookbackCalendarCodes", description="Lookback calendar to calculate lookback Represents AUCK, BG, Brazil, CA etc If multiple calendars are chosen, they represents OR relation ship, meaning if it's a business on any of the chosen calendars, it's considered a business day.")
    lookback_type: Optional[EnumsLookbackType] = Field(None, alias="lookbackType")
    look_back_day_count: Optional[StrictInt] = Field(None, alias="lookBackDayCount", description="Lookback days used to describe the lag in days between the determination date of the index rate and the actual date the index was reset Lookback is in terms of Business days.")
    lockout_day_count: Optional[StrictInt] = Field(None, alias="lockoutDayCount")
    coupon_calculation_method: Optional[EnumsCouponCalcMethod] = Field(None, alias="couponCalculationMethod")
    reset_index: Optional[StrictStr] = Field(None, alias="resetIndex")
    counterparty: Optional[StrictStr] = None
    __properties = ["currencyCode", "accrualBase", "accrualDate", "maturityDate", "collateralType", "fee", "callable", "callDelayDayCount", "rate", "variableRate", "spread", "lookbackCalendarCodes", "lookbackType", "lookBackDayCount", "lockoutDayCount", "couponCalculationMethod", "resetIndex", "counterparty"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReferenceDataassetv1CashRepoSecurity:
        """Create an instance of ReferenceDataassetv1CashRepoSecurity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReferenceDataassetv1CashRepoSecurity:
        """Create an instance of ReferenceDataassetv1CashRepoSecurity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReferenceDataassetv1CashRepoSecurity.parse_obj(obj)

        _obj = ReferenceDataassetv1CashRepoSecurity.parse_obj({
            "currency_code": obj.get("currencyCode"),
            "accrual_base": obj.get("accrualBase"),
            "accrual_date": obj.get("accrualDate"),
            "maturity_date": obj.get("maturityDate"),
            "collateral_type": obj.get("collateralType"),
            "fee": obj.get("fee"),
            "callable": obj.get("callable"),
            "call_delay_day_count": obj.get("callDelayDayCount"),
            "rate": obj.get("rate"),
            "variable_rate": obj.get("variableRate"),
            "spread": obj.get("spread"),
            "lookback_calendar_codes": obj.get("lookbackCalendarCodes"),
            "lookback_type": obj.get("lookbackType"),
            "look_back_day_count": obj.get("lookBackDayCount"),
            "lockout_day_count": obj.get("lockoutDayCount"),
            "coupon_calculation_method": obj.get("couponCalculationMethod"),
            "reset_index": obj.get("resetIndex"),
            "counterparty": obj.get("counterparty")
        })
        return _obj

