# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_call_put_type import EnumsCallPutType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_equity_option_type import EnumsEquityOptionType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_expiry_time import EnumsExpiryTime
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_option_style import EnumsOptionStyle
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_periodicity import EnumsPeriodicity
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_settlement_method import EnumsSettlementMethod

class ReferenceDataassetv1EquityOptionSecurity(BaseModel):
    """
    ReferenceDataassetv1EquityOptionSecurity
    """
    equity_option_type: Optional[EnumsEquityOptionType] = Field(None, alias="equityOptionType")
    underlying_asset_id: StrictStr = Field(..., alias="underlyingAssetId")
    underlying_exchange: Optional[StrictStr] = Field(None, alias="underlyingExchange", description="represents KIA, XADS etc Check out the decodes EXCHANGE_CODES for corresponding cde value to be used.")
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    call_put_type: Optional[EnumsCallPutType] = Field(None, alias="callPutType")
    expiration_date: date = Field(..., alias="expirationDate")
    strike_price: Union[StrictFloat, StrictInt] = Field(..., alias="strikePrice", description="the price of the underlying at which the option can be exercised.")
    notional_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="notionalAmount", description="how many underlying shares the option itself gives the holder control over as opposed to the pure value of what is owned from one option.  Listed options have a typical notional face (or multiplier) of 100 OTCs typically have notional face of 1 while index options differ depending on the index itself.")
    settlement_method: Optional[EnumsSettlementMethod] = Field(None, alias="settlementMethod")
    option_style: Optional[EnumsOptionStyle] = Field(None, alias="optionStyle")
    option_ticker: Optional[StrictStr] = Field(None, alias="optionTicker", description="ticker on equity options for classifying and reporting purposes and it is how traders identify options.")
    fx_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fxRate", description="applicable to Quanto options, which are options in which the exchange rate is fixed at the outset of a trade and is denominated in a currency differing from that of the underlying equity.")
    expiry_time: Optional[EnumsExpiryTime] = Field(None, alias="expiryTime")
    barrier_event: Optional[EnumsOptionStyle] = Field(None, alias="barrierEvent")
    lower_barrier: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lowerBarrier", description="certain barrier events will need a lower barrier specified due to the event relating to a lower price dictating if the option can be exercised or not. It represents a price and will be used in relation to the underlying equity to determine if the barrier event is void or valid.")
    upper_barrier: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="upperBarrier", description="the upper barrier will need to be defined and populated if the option needs to either hit a certain barrier or avoid crossing that upper barrier. It represents a price and will be used in relation to the underlying equity to determine if the barrier event is void or valid.")
    barrier_start_date: Optional[date] = Field(None, alias="barrierStartDate", description="date that the barrier starts this will be the start date of the option and the start of the barrier event applicable if the time constraint for the barrier happens to differ from that full life of the option.")
    barrier_end_date: Optional[date] = Field(None, alias="barrierEndDate", description="date that the barrier ends this will be the maturity date of the option or the end of the barrier event applicable if the time constraint for the barrier happens to differ from that full life of the option.")
    barrier_source: Optional[StrictStr] = Field(None, alias="barrierSource")
    periodicity: Optional[EnumsPeriodicity] = None
    __properties = ["equityOptionType", "underlyingAssetId", "underlyingExchange", "currencyCode", "callPutType", "expirationDate", "strikePrice", "notionalAmount", "settlementMethod", "optionStyle", "optionTicker", "fxRate", "expiryTime", "barrierEvent", "lowerBarrier", "upperBarrier", "barrierStartDate", "barrierEndDate", "barrierSource", "periodicity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReferenceDataassetv1EquityOptionSecurity:
        """Create an instance of ReferenceDataassetv1EquityOptionSecurity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReferenceDataassetv1EquityOptionSecurity:
        """Create an instance of ReferenceDataassetv1EquityOptionSecurity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReferenceDataassetv1EquityOptionSecurity.parse_obj(obj)

        _obj = ReferenceDataassetv1EquityOptionSecurity.parse_obj({
            "equity_option_type": obj.get("equityOptionType"),
            "underlying_asset_id": obj.get("underlyingAssetId"),
            "underlying_exchange": obj.get("underlyingExchange"),
            "currency_code": obj.get("currencyCode"),
            "call_put_type": obj.get("callPutType"),
            "expiration_date": obj.get("expirationDate"),
            "strike_price": obj.get("strikePrice"),
            "notional_amount": obj.get("notionalAmount"),
            "settlement_method": obj.get("settlementMethod"),
            "option_style": obj.get("optionStyle"),
            "option_ticker": obj.get("optionTicker"),
            "fx_rate": obj.get("fxRate"),
            "expiry_time": obj.get("expiryTime"),
            "barrier_event": obj.get("barrierEvent"),
            "lower_barrier": obj.get("lowerBarrier"),
            "upper_barrier": obj.get("upperBarrier"),
            "barrier_start_date": obj.get("barrierStartDate"),
            "barrier_end_date": obj.get("barrierEndDate"),
            "barrier_source": obj.get("barrierSource"),
            "periodicity": obj.get("periodicity")
        })
        return _obj

