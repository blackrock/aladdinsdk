# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_accrual_base import EnumsAccrualBase
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_amort_timing import EnumsAmortTiming
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_notional_type import EnumsNotionalType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_quote_type import EnumsQuoteType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_swap_type import EnumsSwapType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_swap_unit import EnumsSwapUnit

class V1SwapLeg(BaseModel):
    """
    V1SwapLeg
    """
    type: Optional[EnumsSwapType] = None
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    underlying_asset_id: Optional[StrictStr] = Field(None, alias="underlyingAssetId")
    accrual_base: Optional[EnumsAccrualBase] = Field(None, alias="accrualBase")
    start_date: Optional[date] = Field(None, alias="startDate")
    end_date: Optional[date] = Field(None, alias="endDate")
    initial_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="initialRate")
    rate: Optional[Union[StrictFloat, StrictInt]] = None
    spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="extra percentage points to be added (or subtracted) to/from the floating index at each reset date.")
    reset_index: Optional[StrictStr] = Field(None, alias="resetIndex")
    notional_type: Optional[EnumsNotionalType] = Field(None, alias="notionalType")
    notional_reset: Optional[EnumsAmortTiming] = Field(None, alias="notionalReset")
    multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="used to adjust for terms that may specify the paying of a pre-determined percentage of the given index.")
    early_termination: Optional[StrictBool] = Field(None, alias="earlyTermination")
    units: Optional[EnumsSwapUnit] = None
    index_level: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="indexLevel")
    quote_type: Optional[EnumsQuoteType] = Field(None, alias="quoteType")
    underlying_settlement_date: Optional[date] = Field(None, alias="underlyingSettlementDate")
    __properties = ["type", "currencyCode", "underlyingAssetId", "accrualBase", "startDate", "endDate", "initialRate", "rate", "spread", "resetIndex", "notionalType", "notionalReset", "multiplier", "earlyTermination", "units", "indexLevel", "quoteType", "underlyingSettlementDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SwapLeg:
        """Create an instance of V1SwapLeg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SwapLeg:
        """Create an instance of V1SwapLeg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SwapLeg.parse_obj(obj)

        _obj = V1SwapLeg.parse_obj({
            "type": obj.get("type"),
            "currency_code": obj.get("currencyCode"),
            "underlying_asset_id": obj.get("underlyingAssetId"),
            "accrual_base": obj.get("accrualBase"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "initial_rate": obj.get("initialRate"),
            "rate": obj.get("rate"),
            "spread": obj.get("spread"),
            "reset_index": obj.get("resetIndex"),
            "notional_type": obj.get("notionalType"),
            "notional_reset": obj.get("notionalReset"),
            "multiplier": obj.get("multiplier"),
            "early_termination": obj.get("earlyTermination"),
            "units": obj.get("units"),
            "index_level": obj.get("indexLevel"),
            "quote_type": obj.get("quoteType"),
            "underlying_settlement_date": obj.get("underlyingSettlementDate")
        })
        return _obj

