# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_agreed_discount_rate import EnumsAgreedDiscountRate
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_call_put_type import EnumsCallPutType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_option_style import EnumsOptionStyle
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_settlement_method import EnumsSettlementMethod
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_swaption_type import EnumsSwaptionType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.v1_cdx_info import V1CdxInfo

class ReferenceDataassetv1SwaptionSecurity(BaseModel):
    """
    ReferenceDataassetv1SwaptionSecurity
    """
    swaption_type: Optional[EnumsSwaptionType] = Field(None, alias="swaptionType")
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    call_put_type: Optional[EnumsCallPutType] = Field(None, alias="callPutType")
    expiration_date: Optional[date] = Field(None, alias="expirationDate")
    strike_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="strikePrice", description="the price of the underlying at which the option can be exercised.")
    option_style: Optional[EnumsOptionStyle] = Field(None, alias="optionStyle")
    final_settlement_method: Optional[EnumsSettlementMethod] = Field(None, alias="finalSettlementMethod")
    premium_in_percent: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="premiumInPercent")
    premium_date: Optional[date] = Field(None, alias="premiumDate", description="the date when the premium is paid.")
    clearing_party: Optional[StrictStr] = Field(None, alias="clearingParty", description="represents BILATERAL, CMD etc Check out the decodes CDS_EXCHANGE for corresponding cde value to be used.")
    underlying_term: Optional[StrictInt] = Field(None, alias="underlyingTerm")
    underlying_start: Optional[StrictInt] = Field(None, alias="underlyingStart")
    underlying_clearing_party: Optional[StrictStr] = Field(None, alias="underlyingClearingParty", description="represents BILATERAL, CMD etc Check out the decodes CDS_EXCHANGE for corresponding cde value to be used.")
    underlying_cdx_info: Optional[V1CdxInfo] = Field(None, alias="underlyingCdxInfo")
    agreed_discount_rate: Optional[EnumsAgreedDiscountRate] = Field(None, alias="agreedDiscountRate")
    underlying_reset_index: Optional[StrictStr] = Field(None, alias="underlyingResetIndex")
    counterparty: Optional[StrictStr] = None
    __properties = ["swaptionType", "currencyCode", "callPutType", "expirationDate", "strikePrice", "optionStyle", "finalSettlementMethod", "premiumInPercent", "premiumDate", "clearingParty", "underlyingTerm", "underlyingStart", "underlyingClearingParty", "underlyingCdxInfo", "agreedDiscountRate", "underlyingResetIndex", "counterparty"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReferenceDataassetv1SwaptionSecurity:
        """Create an instance of ReferenceDataassetv1SwaptionSecurity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of underlying_cdx_info
        if self.underlying_cdx_info:
            _dict['underlyingCdxInfo'] = self.underlying_cdx_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReferenceDataassetv1SwaptionSecurity:
        """Create an instance of ReferenceDataassetv1SwaptionSecurity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReferenceDataassetv1SwaptionSecurity.parse_obj(obj)

        _obj = ReferenceDataassetv1SwaptionSecurity.parse_obj({
            "swaption_type": obj.get("swaptionType"),
            "currency_code": obj.get("currencyCode"),
            "call_put_type": obj.get("callPutType"),
            "expiration_date": obj.get("expirationDate"),
            "strike_price": obj.get("strikePrice"),
            "option_style": obj.get("optionStyle"),
            "final_settlement_method": obj.get("finalSettlementMethod"),
            "premium_in_percent": obj.get("premiumInPercent"),
            "premium_date": obj.get("premiumDate"),
            "clearing_party": obj.get("clearingParty"),
            "underlying_term": obj.get("underlyingTerm"),
            "underlying_start": obj.get("underlyingStart"),
            "underlying_clearing_party": obj.get("underlyingClearingParty"),
            "underlying_cdx_info": V1CdxInfo.from_dict(obj.get("underlyingCdxInfo")) if obj.get("underlyingCdxInfo") is not None else None,
            "agreed_discount_rate": obj.get("agreedDiscountRate"),
            "underlying_reset_index": obj.get("underlyingResetIndex"),
            "counterparty": obj.get("counterparty")
        })
        return _obj

