# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, conlist
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.type_date_time import TypeDateTime
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.v1_syndicate_data import V1SyndicateData

class V1OfferingData(BaseModel):
    """
    V1OfferingData
    """
    announce_date: date = Field(..., alias="announceDate", description="Announce Date - Start of new issue period.")
    pricing_date: date = Field(..., alias="pricingDate")
    subscription_deadline: Optional[TypeDateTime] = Field(None, alias="subscriptionDeadline")
    issue_size: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="issueSize", description="Issue Size - Total offering amount on issuance.")
    gross_spread: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="grossSpread", description="Gross Spread - Fee underwriters receive for underwriting a deal in spread terms.")
    concession_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="concessionRate", description="Concession Rate - Percent of the total trade value that entire syndicate will receive as a fee.")
    second_offering: Optional[StrictBool] = Field(None, alias="secondOffering")
    firm_commitment: Optional[StrictBool] = Field(None, alias="firmCommitment")
    syndicate_infos: Optional[conlist(V1SyndicateData)] = Field(None, alias="syndicateInfos", description="Syndicate Data - Track which dealers helped to distribute the deal and what role they played.")
    __properties = ["announceDate", "pricingDate", "subscriptionDeadline", "issueSize", "grossSpread", "concessionRate", "secondOffering", "firmCommitment", "syndicateInfos"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1OfferingData:
        """Create an instance of V1OfferingData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of subscription_deadline
        if self.subscription_deadline:
            _dict['subscriptionDeadline'] = self.subscription_deadline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in syndicate_infos (list)
        _items = []
        if self.syndicate_infos:
            for _item in self.syndicate_infos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['syndicateInfos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1OfferingData:
        """Create an instance of V1OfferingData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1OfferingData.parse_obj(obj)

        _obj = V1OfferingData.parse_obj({
            "announce_date": obj.get("announceDate"),
            "pricing_date": obj.get("pricingDate"),
            "subscription_deadline": TypeDateTime.from_dict(obj.get("subscriptionDeadline")) if obj.get("subscriptionDeadline") is not None else None,
            "issue_size": obj.get("issueSize"),
            "gross_spread": obj.get("grossSpread"),
            "concession_rate": obj.get("concessionRate"),
            "second_offering": obj.get("secondOffering"),
            "firm_commitment": obj.get("firmCommitment"),
            "syndicate_infos": [V1SyndicateData.from_dict(_item) for _item in obj.get("syndicateInfos")] if obj.get("syndicateInfos") is not None else None
        })
        return _obj

