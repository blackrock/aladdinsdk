# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ReferenceDataassetv1FxndfSecurity(BaseModel):
    """
    ReferenceDataassetv1FxndfSecurity
    """
    currency_pair: StrictStr = Field(..., alias="currencyPair")
    value_date: date = Field(..., alias="valueDate")
    fixing_date: Optional[date] = Field(None, alias="fixingDate")
    exchange: Optional[StrictStr] = Field(None, description="represents LCH, CME etc Check out the decodes FX_EXCHANGE for corresponding cde value to be used.")
    fx_rate_reference: Optional[StrictStr] = Field(None, alias="fxRateReference")
    settle_location: Optional[StrictBool] = Field(None, alias="settleLocation", description="represents N for NDF and O for OHA.")
    settlement_currency_code: Optional[StrictStr] = Field(None, alias="settlementCurrencyCode")
    __properties = ["currencyPair", "valueDate", "fixingDate", "exchange", "fxRateReference", "settleLocation", "settlementCurrencyCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReferenceDataassetv1FxndfSecurity:
        """Create an instance of ReferenceDataassetv1FxndfSecurity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReferenceDataassetv1FxndfSecurity:
        """Create an instance of ReferenceDataassetv1FxndfSecurity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReferenceDataassetv1FxndfSecurity.parse_obj(obj)

        _obj = ReferenceDataassetv1FxndfSecurity.parse_obj({
            "currency_pair": obj.get("currencyPair"),
            "value_date": obj.get("valueDate"),
            "fixing_date": obj.get("fixingDate"),
            "exchange": obj.get("exchange"),
            "fx_rate_reference": obj.get("fxRateReference"),
            "settle_location": obj.get("settleLocation"),
            "settlement_currency_code": obj.get("settlementCurrencyCode")
        })
        return _obj

