# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_accrual_base import EnumsAccrualBase
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_agency import EnumsAgency
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_lien_position import EnumsLienPosition
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_prepayment_penalty_type import EnumsPrepaymentPenaltyType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_tba_property_type import EnumsTbaPropertyType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_tba_term import EnumsTbaTerm

class V1TbaData(BaseModel):
    """
    V1TbaData
    """
    agency: Optional[EnumsAgency] = None
    term: Optional[EnumsTbaTerm] = None
    settlement_date: Optional[date] = Field(None, alias="settlementDate")
    io_term: Optional[StrictInt] = Field(None, alias="ioTerm")
    balloon_term: Optional[StrictInt] = Field(None, alias="balloonTerm")
    weighted_average_coupon: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="weightedAverageCoupon")
    weighted_average_maturity: Optional[StrictInt] = Field(None, alias="weightedAverageMaturity")
    weighted_average_loan_age: Optional[StrictInt] = Field(None, alias="weightedAverageLoanAge")
    lien_position: Optional[EnumsLienPosition] = Field(None, alias="lienPosition")
    loan_to_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="loanToValue")
    debt_service_coverage_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="debtServiceCoverageRatio")
    tier: Optional[StrictStr] = None
    fixed_principal_payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fixedPrincipalPaymentAmount")
    accrual_base: Optional[EnumsAccrualBase] = Field(None, alias="accrualBase")
    prepayment_penalty_type: Optional[EnumsPrepaymentPenaltyType] = Field(None, alias="prepaymentPenaltyType")
    prepayment_penalty_term: Optional[StrictInt] = Field(None, alias="prepaymentPenaltyTerm")
    lockout_term: Optional[StrictInt] = Field(None, alias="lockoutTerm")
    declining_premium_formula: Optional[StrictStr] = Field(None, alias="decliningPremiumFormula")
    defeasance_lockout_term: Optional[StrictInt] = Field(None, alias="defeasanceLockoutTerm")
    yield_maintainence_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="yieldMaintainenceRate")
    prepayment_penalty_description: Optional[StrictStr] = Field(None, alias="prepaymentPenaltyDescription")
    property_type: Optional[EnumsTbaPropertyType] = Field(None, alias="propertyType")
    property_name: Optional[StrictStr] = Field(None, alias="propertyName")
    property_address: Optional[StrictStr] = Field(None, alias="propertyAddress")
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    zip_code: Optional[StrictStr] = Field(None, alias="zipCode")
    counterparty: Optional[StrictStr] = None
    __properties = ["agency", "term", "settlementDate", "ioTerm", "balloonTerm", "weightedAverageCoupon", "weightedAverageMaturity", "weightedAverageLoanAge", "lienPosition", "loanToValue", "debtServiceCoverageRatio", "tier", "fixedPrincipalPaymentAmount", "accrualBase", "prepaymentPenaltyType", "prepaymentPenaltyTerm", "lockoutTerm", "decliningPremiumFormula", "defeasanceLockoutTerm", "yieldMaintainenceRate", "prepaymentPenaltyDescription", "propertyType", "propertyName", "propertyAddress", "city", "state", "zipCode", "counterparty"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TbaData:
        """Create an instance of V1TbaData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TbaData:
        """Create an instance of V1TbaData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TbaData.parse_obj(obj)

        _obj = V1TbaData.parse_obj({
            "agency": obj.get("agency"),
            "term": obj.get("term"),
            "settlement_date": obj.get("settlementDate"),
            "io_term": obj.get("ioTerm"),
            "balloon_term": obj.get("balloonTerm"),
            "weighted_average_coupon": obj.get("weightedAverageCoupon"),
            "weighted_average_maturity": obj.get("weightedAverageMaturity"),
            "weighted_average_loan_age": obj.get("weightedAverageLoanAge"),
            "lien_position": obj.get("lienPosition"),
            "loan_to_value": obj.get("loanToValue"),
            "debt_service_coverage_ratio": obj.get("debtServiceCoverageRatio"),
            "tier": obj.get("tier"),
            "fixed_principal_payment_amount": obj.get("fixedPrincipalPaymentAmount"),
            "accrual_base": obj.get("accrualBase"),
            "prepayment_penalty_type": obj.get("prepaymentPenaltyType"),
            "prepayment_penalty_term": obj.get("prepaymentPenaltyTerm"),
            "lockout_term": obj.get("lockoutTerm"),
            "declining_premium_formula": obj.get("decliningPremiumFormula"),
            "defeasance_lockout_term": obj.get("defeasanceLockoutTerm"),
            "yield_maintainence_rate": obj.get("yieldMaintainenceRate"),
            "prepayment_penalty_description": obj.get("prepaymentPenaltyDescription"),
            "property_type": obj.get("propertyType"),
            "property_name": obj.get("propertyName"),
            "property_address": obj.get("propertyAddress"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zip_code": obj.get("zipCode"),
            "counterparty": obj.get("counterparty")
        })
        return _obj

