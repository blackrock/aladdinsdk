# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_index_group import EnumsIndexGroup
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.v1_basket_type import V1BasketType

class V1CdxInfo(BaseModel):
    """
    V1CdxInfo
    """
    index_type: Optional[EnumsIndexGroup] = Field(None, alias="indexType")
    basket_type: Optional[V1BasketType] = Field(None, alias="basketType")
    term: StrictInt = Field(...)
    series: StrictInt = Field(...)
    attachment: Optional[StrictInt] = None
    detachment: Optional[StrictInt] = None
    spread: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["indexType", "basketType", "term", "series", "attachment", "detachment", "spread"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CdxInfo:
        """Create an instance of V1CdxInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of basket_type
        if self.basket_type:
            _dict['basketType'] = self.basket_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CdxInfo:
        """Create an instance of V1CdxInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CdxInfo.parse_obj(obj)

        _obj = V1CdxInfo.parse_obj({
            "index_type": obj.get("indexType"),
            "basket_type": V1BasketType.from_dict(obj.get("basketType")) if obj.get("basketType") is not None else None,
            "term": obj.get("term"),
            "series": obj.get("series"),
            "attachment": obj.get("attachment"),
            "detachment": obj.get("detachment"),
            "spread": obj.get("spread")
        })
        return _obj

