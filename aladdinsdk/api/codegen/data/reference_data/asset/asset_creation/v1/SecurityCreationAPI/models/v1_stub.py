# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_payment_stub_type import EnumsPaymentStubType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_swap_security_flag import EnumsSwapSecurityFlag

class V1Stub(BaseModel):
    """
    V1Stub
    """
    payment_stub_type: Optional[EnumsPaymentStubType] = Field(None, alias="paymentStubType")
    first_payment_date: Optional[date] = Field(None, alias="firstPaymentDate")
    last_payment_date: Optional[date] = Field(None, alias="lastPaymentDate")
    month_end: Optional[EnumsSwapSecurityFlag] = Field(None, alias="monthEnd")
    first_reg_reset_date: Optional[date] = Field(None, alias="firstRegResetDate")
    final_reset_date: Optional[date] = Field(None, alias="finalResetDate", description="last date at which the Index will reset prior to Maturity.")
    interpolate: Optional[EnumsSwapSecurityFlag] = None
    initial_start_term: Optional[StrictStr] = Field(None, alias="initialStartTerm")
    initial_end_term: Optional[StrictStr] = Field(None, alias="initialEndTerm")
    final_start_term: Optional[StrictStr] = Field(None, alias="finalStartTerm")
    final_end_term: Optional[StrictStr] = Field(None, alias="finalEndTerm")
    risk_country: Optional[StrictStr] = Field(None, alias="riskCountry")
    __properties = ["paymentStubType", "firstPaymentDate", "lastPaymentDate", "monthEnd", "firstRegResetDate", "finalResetDate", "interpolate", "initialStartTerm", "initialEndTerm", "finalStartTerm", "finalEndTerm", "riskCountry"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Stub:
        """Create an instance of V1Stub from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Stub:
        """Create an instance of V1Stub from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Stub.parse_obj(obj)

        _obj = V1Stub.parse_obj({
            "payment_stub_type": obj.get("paymentStubType"),
            "first_payment_date": obj.get("firstPaymentDate"),
            "last_payment_date": obj.get("lastPaymentDate"),
            "month_end": obj.get("monthEnd"),
            "first_reg_reset_date": obj.get("firstRegResetDate"),
            "final_reset_date": obj.get("finalResetDate"),
            "interpolate": obj.get("interpolate"),
            "initial_start_term": obj.get("initialStartTerm"),
            "initial_end_term": obj.get("initialEndTerm"),
            "final_start_term": obj.get("finalStartTerm"),
            "final_end_term": obj.get("finalEndTerm"),
            "risk_country": obj.get("riskCountry")
        })
        return _obj

