# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_arm_structure import EnumsArmStructure
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_cap_structure import EnumsCapStructure
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.v1_tba_data import V1TbaData

class ReferenceDataassetv1ArmTbaSecurity(BaseModel):
    """
    ReferenceDataassetv1ArmTbaSecurity
    """
    tba_info: Optional[V1TbaData] = Field(None, alias="tbaInfo")
    initial_coupon: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="initialCoupon")
    months_to_roll: Optional[StrictInt] = Field(None, alias="monthsToRoll")
    gross_margin: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="grossMargin")
    net_margin: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netMargin")
    cap_structure: Optional[EnumsCapStructure] = Field(None, alias="capStructure")
    index: Optional[StrictStr] = None
    arm_structure: Optional[EnumsArmStructure] = Field(None, alias="armStructure")
    look_back_day_count: Optional[StrictInt] = Field(None, alias="lookBackDayCount", description="Lookback days used to describe the lag in days between the determination date of the index rate and the actual date the index was reset Lookback is in terms of Business days.")
    negative_amortization_cap: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="negativeAmortizationCap")
    convertible: Optional[StrictBool] = None
    __properties = ["tbaInfo", "initialCoupon", "monthsToRoll", "grossMargin", "netMargin", "capStructure", "index", "armStructure", "lookBackDayCount", "negativeAmortizationCap", "convertible"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReferenceDataassetv1ArmTbaSecurity:
        """Create an instance of ReferenceDataassetv1ArmTbaSecurity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tba_info
        if self.tba_info:
            _dict['tbaInfo'] = self.tba_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReferenceDataassetv1ArmTbaSecurity:
        """Create an instance of ReferenceDataassetv1ArmTbaSecurity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReferenceDataassetv1ArmTbaSecurity.parse_obj(obj)

        _obj = ReferenceDataassetv1ArmTbaSecurity.parse_obj({
            "tba_info": V1TbaData.from_dict(obj.get("tbaInfo")) if obj.get("tbaInfo") is not None else None,
            "initial_coupon": obj.get("initialCoupon"),
            "months_to_roll": obj.get("monthsToRoll"),
            "gross_margin": obj.get("grossMargin"),
            "net_margin": obj.get("netMargin"),
            "cap_structure": obj.get("capStructure"),
            "index": obj.get("index"),
            "arm_structure": obj.get("armStructure"),
            "look_back_day_count": obj.get("lookBackDayCount"),
            "negative_amortization_cap": obj.get("negativeAmortizationCap"),
            "convertible": obj.get("convertible")
        })
        return _obj

