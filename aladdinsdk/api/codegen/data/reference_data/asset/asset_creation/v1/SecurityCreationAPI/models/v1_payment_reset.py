# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_accrual_period import EnumsAccrualPeriod
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_adjust_method import EnumsAdjustMethod
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_coupon_calc_method import EnumsCouponCalcMethod
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_delay_type import EnumsDelayType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_lookback_type import EnumsLookbackType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_rounding_type import EnumsRoundingType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.v1_frequency_calendar import V1FrequencyCalendar

class V1PaymentReset(BaseModel):
    """
    V1PaymentReset
    """
    payment_currency_code: Optional[StrictStr] = Field(None, alias="paymentCurrencyCode")
    payment_frequency_calendar: Optional[V1FrequencyCalendar] = Field(None, alias="paymentFrequencyCalendar")
    first_payment_delay_type: Optional[EnumsDelayType] = Field(None, alias="firstPaymentDelayType")
    first_payment_delay_value: Optional[StrictInt] = Field(None, alias="firstPaymentDelayValue", description="Specifies the number of days following the Nominal payment date. The delay can be set in business or calendar days.")
    second_payment_delay_type: Optional[EnumsDelayType] = Field(None, alias="secondPaymentDelayType")
    second_payment_delay_value: Optional[StrictInt] = Field(None, alias="secondPaymentDelayValue", description="the number of days following the date after 1st payment delay is applied. The delay can be set in business or calendar delay.")
    reset_frequency_calendar: Optional[V1FrequencyCalendar] = Field(None, alias="resetFrequencyCalendar")
    reset_delay_type: Optional[EnumsDelayType] = Field(None, alias="resetDelayType")
    reset_delay_value: Optional[StrictInt] = Field(None, alias="resetDelayValue", description="delay in Calendar or Business following the Nominal Reset date based on the reset frequency.")
    accrual_period: Optional[EnumsAccrualPeriod] = Field(None, alias="accrualPeriod")
    end_adjust: Optional[StrictBool] = Field(None, alias="endAdjust", description="whether or not a security adjusts accrual periods to account for adjustments in actual payment days due to weekends or holidays.")
    compounding: Optional[StrictBool] = None
    lookback_type: Optional[EnumsLookbackType] = Field(None, alias="lookbackType")
    lookback: Optional[StrictInt] = None
    lockout_days: Optional[StrictInt] = Field(None, alias="lockoutDays")
    lookback_adjust: Optional[EnumsAdjustMethod] = Field(None, alias="lookbackAdjust")
    coupon_calc_method: Optional[EnumsCouponCalcMethod] = Field(None, alias="couponCalcMethod")
    rounding_type: Optional[EnumsRoundingType] = Field(None, alias="roundingType")
    round_precision: Optional[StrictInt] = Field(None, alias="roundPrecision")
    initial_auto: Optional[StrictBool] = Field(None, alias="initialAuto")
    __properties = ["paymentCurrencyCode", "paymentFrequencyCalendar", "firstPaymentDelayType", "firstPaymentDelayValue", "secondPaymentDelayType", "secondPaymentDelayValue", "resetFrequencyCalendar", "resetDelayType", "resetDelayValue", "accrualPeriod", "endAdjust", "compounding", "lookbackType", "lookback", "lockoutDays", "lookbackAdjust", "couponCalcMethod", "roundingType", "roundPrecision", "initialAuto"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PaymentReset:
        """Create an instance of V1PaymentReset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_frequency_calendar
        if self.payment_frequency_calendar:
            _dict['paymentFrequencyCalendar'] = self.payment_frequency_calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reset_frequency_calendar
        if self.reset_frequency_calendar:
            _dict['resetFrequencyCalendar'] = self.reset_frequency_calendar.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PaymentReset:
        """Create an instance of V1PaymentReset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PaymentReset.parse_obj(obj)

        _obj = V1PaymentReset.parse_obj({
            "payment_currency_code": obj.get("paymentCurrencyCode"),
            "payment_frequency_calendar": V1FrequencyCalendar.from_dict(obj.get("paymentFrequencyCalendar")) if obj.get("paymentFrequencyCalendar") is not None else None,
            "first_payment_delay_type": obj.get("firstPaymentDelayType"),
            "first_payment_delay_value": obj.get("firstPaymentDelayValue"),
            "second_payment_delay_type": obj.get("secondPaymentDelayType"),
            "second_payment_delay_value": obj.get("secondPaymentDelayValue"),
            "reset_frequency_calendar": V1FrequencyCalendar.from_dict(obj.get("resetFrequencyCalendar")) if obj.get("resetFrequencyCalendar") is not None else None,
            "reset_delay_type": obj.get("resetDelayType"),
            "reset_delay_value": obj.get("resetDelayValue"),
            "accrual_period": obj.get("accrualPeriod"),
            "end_adjust": obj.get("endAdjust"),
            "compounding": obj.get("compounding"),
            "lookback_type": obj.get("lookbackType"),
            "lookback": obj.get("lookback"),
            "lockout_days": obj.get("lockoutDays"),
            "lookback_adjust": obj.get("lookbackAdjust"),
            "coupon_calc_method": obj.get("couponCalcMethod"),
            "rounding_type": obj.get("roundingType"),
            "round_precision": obj.get("roundPrecision"),
            "initial_auto": obj.get("initialAuto")
        })
        return _obj

