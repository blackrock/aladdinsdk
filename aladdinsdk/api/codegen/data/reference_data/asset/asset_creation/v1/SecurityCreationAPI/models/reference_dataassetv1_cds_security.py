# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_deal_spread import EnumsDealSpread
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_restructure_type import EnumsRestructureType
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_seniority import EnumsSeniority

class ReferenceDataassetv1CdsSecurity(BaseModel):
    """
    ReferenceDataassetv1CdsSecurity
    """
    reference_entity: StrictStr = Field(..., alias="referenceEntity")
    reference_security_id: Optional[StrictStr] = Field(None, alias="referenceSecurityId")
    red_code: Optional[StrictStr] = Field(None, alias="redCode")
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    start_date: Optional[date] = Field(None, alias="startDate")
    maturity_date: date = Field(..., alias="maturityDate")
    deal_spread: Optional[EnumsDealSpread] = Field(None, alias="dealSpread")
    restructure_type: Optional[EnumsRestructureType] = Field(None, alias="restructureType")
    seniority: Optional[EnumsSeniority] = None
    exchange: Optional[StrictStr] = None
    counterparty: Optional[StrictStr] = None
    __properties = ["referenceEntity", "referenceSecurityId", "redCode", "currencyCode", "startDate", "maturityDate", "dealSpread", "restructureType", "seniority", "exchange", "counterparty"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReferenceDataassetv1CdsSecurity:
        """Create an instance of ReferenceDataassetv1CdsSecurity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReferenceDataassetv1CdsSecurity:
        """Create an instance of ReferenceDataassetv1CdsSecurity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReferenceDataassetv1CdsSecurity.parse_obj(obj)

        _obj = ReferenceDataassetv1CdsSecurity.parse_obj({
            "reference_entity": obj.get("referenceEntity"),
            "reference_security_id": obj.get("referenceSecurityId"),
            "red_code": obj.get("redCode"),
            "currency_code": obj.get("currencyCode"),
            "start_date": obj.get("startDate"),
            "maturity_date": obj.get("maturityDate"),
            "deal_spread": obj.get("dealSpread"),
            "restructure_type": obj.get("restructureType"),
            "seniority": obj.get("seniority"),
            "exchange": obj.get("exchange"),
            "counterparty": obj.get("counterparty")
        })
        return _obj

