# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.v1_payment_reset import V1PaymentReset
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.v1_stub import V1Stub
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.v1_swap_leg import V1SwapLeg

class V1SwapData(BaseModel):
    """
    V1SwapData
    """
    pay_leg: Optional[V1SwapLeg] = Field(None, alias="payLeg")
    pay_leg_payment_reset: Optional[V1PaymentReset] = Field(None, alias="payLegPaymentReset")
    pay_leg_stub: Optional[V1Stub] = Field(None, alias="payLegStub")
    rec_leg: Optional[V1SwapLeg] = Field(None, alias="recLeg")
    rec_leg_payment_reset: Optional[V1PaymentReset] = Field(None, alias="recLegPaymentReset")
    rec_leg_stub: Optional[V1Stub] = Field(None, alias="recLegStub")
    __properties = ["payLeg", "payLegPaymentReset", "payLegStub", "recLeg", "recLegPaymentReset", "recLegStub"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SwapData:
        """Create an instance of V1SwapData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pay_leg
        if self.pay_leg:
            _dict['payLeg'] = self.pay_leg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_leg_payment_reset
        if self.pay_leg_payment_reset:
            _dict['payLegPaymentReset'] = self.pay_leg_payment_reset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_leg_stub
        if self.pay_leg_stub:
            _dict['payLegStub'] = self.pay_leg_stub.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rec_leg
        if self.rec_leg:
            _dict['recLeg'] = self.rec_leg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rec_leg_payment_reset
        if self.rec_leg_payment_reset:
            _dict['recLegPaymentReset'] = self.rec_leg_payment_reset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rec_leg_stub
        if self.rec_leg_stub:
            _dict['recLegStub'] = self.rec_leg_stub.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SwapData:
        """Create an instance of V1SwapData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SwapData.parse_obj(obj)

        _obj = V1SwapData.parse_obj({
            "pay_leg": V1SwapLeg.from_dict(obj.get("payLeg")) if obj.get("payLeg") is not None else None,
            "pay_leg_payment_reset": V1PaymentReset.from_dict(obj.get("payLegPaymentReset")) if obj.get("payLegPaymentReset") is not None else None,
            "pay_leg_stub": V1Stub.from_dict(obj.get("payLegStub")) if obj.get("payLegStub") is not None else None,
            "rec_leg": V1SwapLeg.from_dict(obj.get("recLeg")) if obj.get("recLeg") is not None else None,
            "rec_leg_payment_reset": V1PaymentReset.from_dict(obj.get("recLegPaymentReset")) if obj.get("recLegPaymentReset") is not None else None,
            "rec_leg_stub": V1Stub.from_dict(obj.get("recLegStub")) if obj.get("recLegStub") is not None else None
        })
        return _obj

