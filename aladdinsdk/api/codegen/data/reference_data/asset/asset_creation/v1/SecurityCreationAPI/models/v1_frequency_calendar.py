# coding: utf-8

"""
    Security Creation

    This service is used to create CDS, CDX, Equity Equity, Equity Option, Futures, FX NDF, FX SPOT, FX FWRD, FX CSWAP, FX Option, Swap, Swaption, CASH/TD, CASH/REPO, ARM/TBA and MBS/TBA securities.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_adjust_method import EnumsAdjustMethod
from aladdinsdk.api.codegen.data.reference_data.asset.asset_creation.v1.SecurityCreationAPI.models.enums_frequency_type import EnumsFrequencyType

class V1FrequencyCalendar(BaseModel):
    """
    V1FrequencyCalendar
    """
    frequency_type: Optional[EnumsFrequencyType] = Field(None, alias="frequencyType")
    frequency_value: Optional[StrictInt] = Field(None, alias="frequencyValue")
    calendar_codes: Optional[conlist(StrictStr)] = Field(None, alias="calendarCodes")
    adjust_method: Optional[EnumsAdjustMethod] = Field(None, alias="adjustMethod")
    __properties = ["frequencyType", "frequencyValue", "calendarCodes", "adjustMethod"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FrequencyCalendar:
        """Create an instance of V1FrequencyCalendar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FrequencyCalendar:
        """Create an instance of V1FrequencyCalendar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FrequencyCalendar.parse_obj(obj)

        _obj = V1FrequencyCalendar.parse_obj({
            "frequency_type": obj.get("frequencyType"),
            "frequency_value": obj.get("frequencyValue"),
            "calendar_codes": obj.get("calendarCodes"),
            "adjust_method": obj.get("adjustMethod")
        })
        return _obj

