# coding: utf-8

"""
    Price

    This service offers the ability to retrieve security prices via specifying a price hierarchy or price purpose. This can be used to retrieve a single price for a specific date, time series of prices for a date range, or month-end prices for a date range.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictStr

from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.models.v2_filter_asset_prices_hierarchies_response import V2FilterAssetPricesHierarchiesResponse
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.models.v2_filter_asset_prices_hierarchy_request import V2FilterAssetPricesHierarchyRequest
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.models.v2_filter_asset_prices_purpose_request import V2FilterAssetPricesPurposeRequest
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.models.v2_filter_asset_prices_purposes_response import V2FilterAssetPricesPurposesResponse
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.models.v2_filter_time_series_month_end_prices_hierarchy_request import V2FilterTimeSeriesMonthEndPricesHierarchyRequest
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.models.v2_filter_time_series_month_end_prices_purpose_request import V2FilterTimeSeriesMonthEndPricesPurposeRequest
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.models.v2_filter_time_series_prices_hierarchy_request import V2FilterTimeSeriesPricesHierarchyRequest
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.models.v2_filter_time_series_prices_purpose_request import V2FilterTimeSeriesPricesPurposeRequest

from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.api_client import ApiClient
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.data.market_data.price.v2.PricingAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultPricingAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def pricing_api_filter_asset_prices_hierarchy(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterAssetPricesHierarchyRequest, **kwargs) -> V2FilterAssetPricesHierarchiesResponse:  # noqa: E501
        """Retrieve Prices by Hierarchy  # noqa: E501

        Retrieve prices by price hierarchy for a specific date. Asset ids per request are capped at 12000 for large, one-off requests. The recommended batch size for sustained loads is 2000 asset ids/request. (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_asset_prices_hierarchy(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterAssetPricesHierarchyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2FilterAssetPricesHierarchiesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the pricing_api_filter_asset_prices_hierarchy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.pricing_api_filter_asset_prices_hierarchy_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def pricing_api_filter_asset_prices_hierarchy_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterAssetPricesHierarchyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Prices by Hierarchy  # noqa: E501

        Retrieve prices by price hierarchy for a specific date. Asset ids per request are capped at 12000 for large, one-off requests. The recommended batch size for sustained loads is 2000 asset ids/request. (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_asset_prices_hierarchy_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterAssetPricesHierarchyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2FilterAssetPricesHierarchiesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricing_api_filter_asset_prices_hierarchy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V2FilterAssetPricesHierarchiesResponse",
            '400': "PricingAPIFilterAssetPricesHierarchy400Response",
            '401': "PricingAPIFilterAssetPricesHierarchy400Response",
            '403': "PricingAPIFilterAssetPricesHierarchy400Response",
            '404': "PricingAPIFilterAssetPricesHierarchy400Response",
        }

        return self.api_client.call_api(
            '/price/hierarchy:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pricing_api_filter_asset_prices_purpose(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterAssetPricesPurposeRequest, **kwargs) -> V2FilterAssetPricesPurposesResponse:  # noqa: E501
        """Retrieve Prices by Purpose  # noqa: E501

        Retrieve prices by price purpose for a specific date. Asset ids per request are capped at 12000 for large, one-off requests. The recommended batch size for sustained loads is 2000 asset ids/request.  (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_asset_prices_purpose(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterAssetPricesPurposeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2FilterAssetPricesPurposesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the pricing_api_filter_asset_prices_purpose_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.pricing_api_filter_asset_prices_purpose_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def pricing_api_filter_asset_prices_purpose_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterAssetPricesPurposeRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Prices by Purpose  # noqa: E501

        Retrieve prices by price purpose for a specific date. Asset ids per request are capped at 12000 for large, one-off requests. The recommended batch size for sustained loads is 2000 asset ids/request.  (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_asset_prices_purpose_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterAssetPricesPurposeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2FilterAssetPricesPurposesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricing_api_filter_asset_prices_purpose" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V2FilterAssetPricesPurposesResponse",
            '400': "PricingAPIFilterAssetPricesHierarchy400Response",
            '401': "PricingAPIFilterAssetPricesHierarchy400Response",
            '403': "PricingAPIFilterAssetPricesHierarchy400Response",
            '404': "PricingAPIFilterAssetPricesHierarchy400Response",
        }

        return self.api_client.call_api(
            '/price/purpose:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pricing_api_filter_time_series_month_end_prices_hierarchy(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterTimeSeriesMonthEndPricesHierarchyRequest, **kwargs) -> V2FilterAssetPricesHierarchiesResponse:  # noqa: E501
        """Retrieve Time Series Month-End Prices by Hierarchy  # noqa: E501

        Retrieve time series of month-end prices by price hierarchy for a set date range. The maximum number of entries that could be returned is 12,000. (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response object is same for every rpc --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_time_series_month_end_prices_hierarchy(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterTimeSeriesMonthEndPricesHierarchyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2FilterAssetPricesHierarchiesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the pricing_api_filter_time_series_month_end_prices_hierarchy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.pricing_api_filter_time_series_month_end_prices_hierarchy_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def pricing_api_filter_time_series_month_end_prices_hierarchy_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterTimeSeriesMonthEndPricesHierarchyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Time Series Month-End Prices by Hierarchy  # noqa: E501

        Retrieve time series of month-end prices by price hierarchy for a set date range. The maximum number of entries that could be returned is 12,000. (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response object is same for every rpc --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_time_series_month_end_prices_hierarchy_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterTimeSeriesMonthEndPricesHierarchyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2FilterAssetPricesHierarchiesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricing_api_filter_time_series_month_end_prices_hierarchy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V2FilterAssetPricesHierarchiesResponse",
            '400': "PricingAPIFilterAssetPricesHierarchy400Response",
            '401': "PricingAPIFilterAssetPricesHierarchy400Response",
            '403': "PricingAPIFilterAssetPricesHierarchy400Response",
            '404': "PricingAPIFilterAssetPricesHierarchy400Response",
        }

        return self.api_client.call_api(
            '/timeseriesMonthEnd/hierarchy:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pricing_api_filter_time_series_month_end_prices_purpose(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterTimeSeriesMonthEndPricesPurposeRequest, **kwargs) -> V2FilterAssetPricesPurposesResponse:  # noqa: E501
        """Retrieve Time Series Month-End Prices by Purpose  # noqa: E501

        Retrieve time series of month-end prices by price purpose for a set date range. The maximum number of entries that could be returned is 12,000. (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response object is same for every rpc --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_time_series_month_end_prices_purpose(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterTimeSeriesMonthEndPricesPurposeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2FilterAssetPricesPurposesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the pricing_api_filter_time_series_month_end_prices_purpose_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.pricing_api_filter_time_series_month_end_prices_purpose_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def pricing_api_filter_time_series_month_end_prices_purpose_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterTimeSeriesMonthEndPricesPurposeRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Time Series Month-End Prices by Purpose  # noqa: E501

        Retrieve time series of month-end prices by price purpose for a set date range. The maximum number of entries that could be returned is 12,000. (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response object is same for every rpc --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_time_series_month_end_prices_purpose_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterTimeSeriesMonthEndPricesPurposeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2FilterAssetPricesPurposesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricing_api_filter_time_series_month_end_prices_purpose" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V2FilterAssetPricesPurposesResponse",
            '400': "PricingAPIFilterAssetPricesHierarchy400Response",
            '401': "PricingAPIFilterAssetPricesHierarchy400Response",
            '403': "PricingAPIFilterAssetPricesHierarchy400Response",
            '404': "PricingAPIFilterAssetPricesHierarchy400Response",
        }

        return self.api_client.call_api(
            '/timeseriesMonthEnd/purpose:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pricing_api_filter_time_series_prices_hierarchy(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterTimeSeriesPricesHierarchyRequest, **kwargs) -> V2FilterAssetPricesHierarchiesResponse:  # noqa: E501
        """Retrieve Time Series Price Data by Hierarchy  # noqa: E501

        Retrieve time series of prices by price hierarchy for a set date range. The maximum number of entries that could be returned is 50,000. (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response object is same for every rpc --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_time_series_prices_hierarchy(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterTimeSeriesPricesHierarchyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2FilterAssetPricesHierarchiesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the pricing_api_filter_time_series_prices_hierarchy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.pricing_api_filter_time_series_prices_hierarchy_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def pricing_api_filter_time_series_prices_hierarchy_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterTimeSeriesPricesHierarchyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Time Series Price Data by Hierarchy  # noqa: E501

        Retrieve time series of prices by price hierarchy for a set date range. The maximum number of entries that could be returned is 50,000. (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response object is same for every rpc --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_time_series_prices_hierarchy_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterTimeSeriesPricesHierarchyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2FilterAssetPricesHierarchiesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricing_api_filter_time_series_prices_hierarchy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V2FilterAssetPricesHierarchiesResponse",
            '400': "PricingAPIFilterAssetPricesHierarchy400Response",
            '401': "PricingAPIFilterAssetPricesHierarchy400Response",
            '403': "PricingAPIFilterAssetPricesHierarchy400Response",
            '404': "PricingAPIFilterAssetPricesHierarchy400Response",
        }

        return self.api_client.call_api(
            '/timeseries/hierarchy:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pricing_api_filter_time_series_prices_purpose(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterTimeSeriesPricesPurposeRequest, **kwargs) -> V2FilterAssetPricesPurposesResponse:  # noqa: E501
        """Retrieve Time Series Price Data by Purpose  # noqa: E501

        Retrieve time series of prices by price purpose for a set date range. The maximum number of entries that could be returned is 50,000. (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response object is same for every rpc --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_time_series_prices_purpose(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterTimeSeriesPricesPurposeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2FilterAssetPricesPurposesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the pricing_api_filter_time_series_prices_purpose_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.pricing_api_filter_time_series_prices_purpose_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def pricing_api_filter_time_series_prices_purpose_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterTimeSeriesPricesPurposeRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Time Series Price Data by Purpose  # noqa: E501

        Retrieve time series of prices by price purpose for a set date range. The maximum number of entries that could be returned is 50,000. (-- api-linter: aladdin::9016::rpc-name=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because we are creating another version of an existing API --) (-- api-linter: core::0132::response-message-name=disabled  aip.dev/not-precedent: We need to do this because the response object is same for every rpc --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pricing_api_filter_time_series_prices_purpose_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterTimeSeriesPricesPurposeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2FilterAssetPricesPurposesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricing_api_filter_time_series_prices_purpose" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V2FilterAssetPricesPurposesResponse",
            '400': "PricingAPIFilterAssetPricesHierarchy400Response",
            '401': "PricingAPIFilterAssetPricesHierarchy400Response",
            '403': "PricingAPIFilterAssetPricesHierarchy400Response",
            '404': "PricingAPIFilterAssetPricesHierarchy400Response",
        }

        return self.api_client.call_api(
            '/timeseries/purpose:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
