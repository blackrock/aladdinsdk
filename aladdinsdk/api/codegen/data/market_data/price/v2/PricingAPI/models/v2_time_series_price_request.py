# coding: utf-8

"""
    Price

    This service offers the ability to retrieve security prices via specifying a price hierarchy or price purpose. This can be used to retrieve a single price for a specific date, time series of prices for a date range, or month-end prices for a date range.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class V2TimeSeriesPriceRequest(BaseModel):
    """
    V2TimeSeriesPriceRequest
    """
    asset_ids: Optional[conlist(StrictStr)] = Field(None, alias="assetIds", description="array of string type aladdin id field describes the aladdin security identifier. Multiple assetIds can be passed here. This is a mandatory field.")
    pricing_begin_date: Optional[date] = Field(None, alias="pricingBeginDate", description="BeginDate is a Date type field that specifies the start date from where we want to see the prices.")
    pricing_end_date: Optional[date] = Field(None, alias="pricingEndDate", description="EndDate is a Date type field that specifies the end date till where we want to see the prices. One of the two dates should be present in the request. Either begin or end. Both can be provided as well.")
    __properties = ["assetIds", "pricingBeginDate", "pricingEndDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2TimeSeriesPriceRequest:
        """Create an instance of V2TimeSeriesPriceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2TimeSeriesPriceRequest:
        """Create an instance of V2TimeSeriesPriceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2TimeSeriesPriceRequest.parse_obj(obj)

        _obj = V2TimeSeriesPriceRequest.parse_obj({
            "asset_ids": obj.get("assetIds"),
            "pricing_begin_date": obj.get("pricingBeginDate"),
            "pricing_end_date": obj.get("pricingEndDate")
        })
        return _obj

