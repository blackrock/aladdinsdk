# coding: utf-8

"""
    Price

    This service offers the ability to retrieve security prices via specifying a price hierarchy or price purpose. This can be used to retrieve a single price for a specific date, time series of prices for a date range, or month-end prices for a date range.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class V2AssetPrice(BaseModel):
    """
    V2AssetPrice
    """
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    pricing_date: Optional[date] = Field(None, alias="pricingDate")
    purpose: Optional[StrictStr] = None
    source: Optional[StrictStr] = None
    close_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="closePrice")
    open_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="openPrice")
    high_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="highPrice")
    mid_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="midPrice")
    low_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lowPrice")
    high_price_twelve_month: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="highPriceTwelveMonth")
    low_price_twelve_month: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lowPriceTwelveMonth")
    bid_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="bidPrice")
    ask_price: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="askPrice")
    dirty_price_indicator: Optional[StrictBool] = Field(None, alias="dirtyPriceIndicator")
    settle_date: Optional[date] = Field(None, alias="settleDate", description="date type Settlement Date describes the settle date attached to the price and applicable to selective security types.")
    last_trade_date: Optional[date] = Field(None, alias="lastTradeDate")
    __properties = ["assetId", "pricingDate", "purpose", "source", "closePrice", "openPrice", "highPrice", "midPrice", "lowPrice", "highPriceTwelveMonth", "lowPriceTwelveMonth", "bidPrice", "askPrice", "dirtyPriceIndicator", "settleDate", "lastTradeDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2AssetPrice:
        """Create an instance of V2AssetPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2AssetPrice:
        """Create an instance of V2AssetPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2AssetPrice.parse_obj(obj)

        _obj = V2AssetPrice.parse_obj({
            "asset_id": obj.get("assetId"),
            "pricing_date": obj.get("pricingDate"),
            "purpose": obj.get("purpose"),
            "source": obj.get("source"),
            "close_price": obj.get("closePrice"),
            "open_price": obj.get("openPrice"),
            "high_price": obj.get("highPrice"),
            "mid_price": obj.get("midPrice"),
            "low_price": obj.get("lowPrice"),
            "high_price_twelve_month": obj.get("highPriceTwelveMonth"),
            "low_price_twelve_month": obj.get("lowPriceTwelveMonth"),
            "bid_price": obj.get("bidPrice"),
            "ask_price": obj.get("askPrice"),
            "dirty_price_indicator": obj.get("dirtyPriceIndicator"),
            "settle_date": obj.get("settleDate"),
            "last_trade_date": obj.get("lastTradeDate")
        })
        return _obj

