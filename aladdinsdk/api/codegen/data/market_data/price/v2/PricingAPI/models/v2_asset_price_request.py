# coding: utf-8

"""
    Price

    This service offers the ability to retrieve security prices via specifying a price hierarchy or price purpose. This can be used to retrieve a single price for a specific date, time series of prices for a date range, or month-end prices for a date range.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class V2AssetPriceRequest(BaseModel):
    """
    V2AssetPriceRequest
    """
    asset_ids: Optional[conlist(StrictStr)] = Field(None, alias="assetIds", description="array of string type aladdin id field describes the aladdin security identifier. Multiple assetIds can be passed here. This is a mandatory field.")
    pricing_date: Optional[date] = Field(None, alias="pricingDate", description="PricingDate is a Date type field that  describes the date representative of the prices fields. This is a mandatory field.")
    days_lookback: Optional[StrictInt] = Field(None, alias="daysLookback", description="Indicates the range of days to look back to if the price on the specified price_date is not available. The call will return pricing for the most recent date beginning with price_date, and go back in 1 day increments up to  the set number of daysLookback until a price is available. If there is no price available, the API will  return an empty response. Example: If the price_date is 5th November, and dayslookBack is 3, the call will return the 5th of November price, if available. If not, it will go to the previous date, i.e. 4th November, up to 3 days back until a price is available.")
    __properties = ["assetIds", "pricingDate", "daysLookback"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2AssetPriceRequest:
        """Create an instance of V2AssetPriceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2AssetPriceRequest:
        """Create an instance of V2AssetPriceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2AssetPriceRequest.parse_obj(obj)

        _obj = V2AssetPriceRequest.parse_obj({
            "asset_ids": obj.get("assetIds"),
            "pricing_date": obj.get("pricingDate"),
            "days_lookback": obj.get("daysLookback")
        })
        return _obj

