# coding: utf-8

"""
    Restricted Assets

    Restricted assets serve as a safeguard and are used prevent assets from being traded in Aladdin. The Restricted Assets API can be used to list, create, update, upsert, filter and terminated restricted assets.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio.configuration.restricted_asset.v1.RestrictedAssetAPI.models.enums_restricted_asset_state import EnumsRestrictedAssetState

class V1RestrictedAssetQuery(BaseModel):
    """
    V1RestrictedAssetQuery
    """
    portfolio_code: Optional[StrictStr] = Field(None, alias="portfolioCode")
    start_date: Optional[date] = Field(None, alias="startDate", description="Represents the date the security starts being restricted.")
    cusip: Optional[StrictStr] = None
    end_date: Optional[date] = Field(None, alias="endDate", description="Represents the date the security comes off restriction.")
    restricted_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="restrictedAmount", description="Represents the restricted amount of security to be restricted.")
    author: Optional[StrictStr] = None
    entry_date: Optional[date] = Field(None, alias="entryDate")
    purpose: Optional[StrictStr] = None
    state: Optional[EnumsRestrictedAssetState] = None
    restriction_code: Optional[StrictStr] = Field(None, alias="restrictionCode")
    source: Optional[StrictStr] = None
    investment_numbers: Optional[conlist(StrictInt)] = Field(None, alias="investmentNumbers")
    ticker: Optional[StrictStr] = None
    __properties = ["portfolioCode", "startDate", "cusip", "endDate", "restrictedAmount", "author", "entryDate", "purpose", "state", "restrictionCode", "source", "investmentNumbers", "ticker"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RestrictedAssetQuery:
        """Create an instance of V1RestrictedAssetQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RestrictedAssetQuery:
        """Create an instance of V1RestrictedAssetQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RestrictedAssetQuery.parse_obj(obj)

        _obj = V1RestrictedAssetQuery.parse_obj({
            "portfolio_code": obj.get("portfolioCode"),
            "start_date": obj.get("startDate"),
            "cusip": obj.get("cusip"),
            "end_date": obj.get("endDate"),
            "restricted_amount": obj.get("restrictedAmount"),
            "author": obj.get("author"),
            "entry_date": obj.get("entryDate"),
            "purpose": obj.get("purpose"),
            "state": obj.get("state"),
            "restriction_code": obj.get("restrictionCode"),
            "source": obj.get("source"),
            "investment_numbers": obj.get("investmentNumbers"),
            "ticker": obj.get("ticker")
        })
        return _obj

