# coding: utf-8

"""
    Engagement

    Create, modify, delete, retrieve, search and historical engagement search.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.investment_research.content.engagement.v1.EngagementAPI.models.types_data_value import TypesDataValue

class V1TopicsData(BaseModel):
    """
    V1TopicsData
    """
    engagement_topic: Optional[StrictStr] = Field(None, alias="engagementTopic")
    engagement_momentum: Optional[StrictStr] = Field(None, alias="engagementMomentum")
    engagement_kpi: Optional[StrictStr] = Field(None, alias="engagementKpi")
    time_frame: Optional[StrictStr] = Field(None, alias="timeFrame")
    custom_topic_fields: Optional[Dict[str, TypesDataValue]] = Field(None, alias="customTopicFields")
    __properties = ["engagementTopic", "engagementMomentum", "engagementKpi", "timeFrame", "customTopicFields"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TopicsData:
        """Create an instance of V1TopicsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in custom_topic_fields (dict)
        _field_dict = {}
        if self.custom_topic_fields:
            for _key in self.custom_topic_fields:
                if self.custom_topic_fields[_key]:
                    _field_dict[_key] = self.custom_topic_fields[_key].to_dict()
            _dict['customTopicFields'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TopicsData:
        """Create an instance of V1TopicsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TopicsData.parse_obj(obj)

        _obj = V1TopicsData.parse_obj({
            "engagement_topic": obj.get("engagementTopic"),
            "engagement_momentum": obj.get("engagementMomentum"),
            "engagement_kpi": obj.get("engagementKpi"),
            "time_frame": obj.get("timeFrame"),
            "custom_topic_fields": dict(
                (_k, TypesDataValue.from_dict(_v))
                for _k, _v in obj.get("customTopicFields").items()
            )
            if obj.get("customTopicFields") is not None
            else None
        })
        return _obj

