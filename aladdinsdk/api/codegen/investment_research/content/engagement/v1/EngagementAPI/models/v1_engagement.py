# coding: utf-8

"""
    Engagement

    Create, modify, delete, retrieve, search and historical engagement search.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.content.engagement.v1.EngagementAPI.models.types_data_value import TypesDataValue
from aladdinsdk.api.codegen.investment_research.content.engagement.v1.EngagementAPI.models.types_entity_id import TypesEntityId
from aladdinsdk.api.codegen.investment_research.content.engagement.v1.EngagementAPI.models.v1_expiring_permission_group import V1ExpiringPermissionGroup
from aladdinsdk.api.codegen.investment_research.content.engagement.v1.EngagementAPI.models.v1_state import V1State
from aladdinsdk.api.codegen.investment_research.content.engagement.v1.EngagementAPI.models.v1_topics_data import V1TopicsData

class V1Engagement(BaseModel):
    """
    Engagement object is used in engagement API server for persisting engagement data.
    """
    id: Optional[StrictStr] = Field(None, description="ID describes the computer or human assigned resource identifier. The engagement id.")
    publish_time: Optional[datetime] = Field(None, alias="publishTime", description="The publish time.")
    entity: Optional[TypesEntityId] = None
    author: Optional[StrictStr] = Field(None, description="The author of the engagement.")
    creator: Optional[StrictStr] = Field(None, description="The creator of the engagement.")
    subject: Optional[StrictStr] = Field(None, description="The subject (title) of the engagement.")
    selected_permission_groups: Optional[conlist(StrictStr)] = Field(None, alias="selectedPermissionGroups")
    expiring_permission_groups: Optional[conlist(V1ExpiringPermissionGroup)] = Field(None, alias="expiringPermissionGroups")
    tags: Optional[conlist(StrictStr)] = None
    internal_attendees: Optional[conlist(StrictStr)] = Field(None, alias="internalAttendees")
    external_attendees: Optional[conlist(StrictStr)] = Field(None, alias="externalAttendees")
    category: Optional[StrictStr] = None
    engagement_format: Optional[StrictStr] = Field(None, alias="engagementFormat")
    engagement_initiator: Optional[StrictStr] = Field(None, alias="engagementInitiator")
    engagement_types: Optional[conlist(StrictStr)] = Field(None, alias="engagementTypes")
    engagement_momentum: Optional[StrictStr] = Field(None, alias="engagementMomentum")
    engagement_date: Optional[date] = Field(None, alias="engagementDate", description="Engagement date.")
    engagement_topics: Optional[conlist(V1TopicsData)] = Field(None, alias="engagementTopics")
    internal_note: Optional[StrictStr] = Field(None, alias="internalNote")
    client_note: Optional[StrictStr] = Field(None, alias="clientNote")
    state: Optional[V1State] = None
    template_name: Optional[StrictStr] = Field(None, alias="templateName")
    custom_fields: Optional[Dict[str, TypesDataValue]] = Field(None, alias="customFields")
    __properties = ["id", "publishTime", "entity", "author", "creator", "subject", "selectedPermissionGroups", "expiringPermissionGroups", "tags", "internalAttendees", "externalAttendees", "category", "engagementFormat", "engagementInitiator", "engagementTypes", "engagementMomentum", "engagementDate", "engagementTopics", "internalNote", "clientNote", "state", "templateName", "customFields"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Engagement:
        """Create an instance of V1Engagement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in expiring_permission_groups (list)
        _items = []
        if self.expiring_permission_groups:
            for _item in self.expiring_permission_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['expiringPermissionGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in engagement_topics (list)
        _items = []
        if self.engagement_topics:
            for _item in self.engagement_topics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['engagementTopics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in custom_fields (dict)
        _field_dict = {}
        if self.custom_fields:
            for _key in self.custom_fields:
                if self.custom_fields[_key]:
                    _field_dict[_key] = self.custom_fields[_key].to_dict()
            _dict['customFields'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Engagement:
        """Create an instance of V1Engagement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Engagement.parse_obj(obj)

        _obj = V1Engagement.parse_obj({
            "id": obj.get("id"),
            "publish_time": obj.get("publishTime"),
            "entity": TypesEntityId.from_dict(obj.get("entity")) if obj.get("entity") is not None else None,
            "author": obj.get("author"),
            "creator": obj.get("creator"),
            "subject": obj.get("subject"),
            "selected_permission_groups": obj.get("selectedPermissionGroups"),
            "expiring_permission_groups": [V1ExpiringPermissionGroup.from_dict(_item) for _item in obj.get("expiringPermissionGroups")] if obj.get("expiringPermissionGroups") is not None else None,
            "tags": obj.get("tags"),
            "internal_attendees": obj.get("internalAttendees"),
            "external_attendees": obj.get("externalAttendees"),
            "category": obj.get("category"),
            "engagement_format": obj.get("engagementFormat"),
            "engagement_initiator": obj.get("engagementInitiator"),
            "engagement_types": obj.get("engagementTypes"),
            "engagement_momentum": obj.get("engagementMomentum"),
            "engagement_date": obj.get("engagementDate"),
            "engagement_topics": [V1TopicsData.from_dict(_item) for _item in obj.get("engagementTopics")] if obj.get("engagementTopics") is not None else None,
            "internal_note": obj.get("internalNote"),
            "client_note": obj.get("clientNote"),
            "state": obj.get("state"),
            "template_name": obj.get("templateName"),
            "custom_fields": dict(
                (_k, TypesDataValue.from_dict(_v))
                for _k, _v in obj.get("customFields").items()
            )
            if obj.get("customFields") is not None
            else None
        })
        return _obj

