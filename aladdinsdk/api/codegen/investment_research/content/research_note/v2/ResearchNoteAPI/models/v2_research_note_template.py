# coding: utf-8

"""
    Research Note

    Create, modify, delete and retrieve research notes.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.content.research_note.v2.ResearchNoteAPI.models.v2_field_definition import V2FieldDefinition
from aladdinsdk.api.codegen.investment_research.content.research_note.v2.ResearchNoteAPI.models.v2_template_state import V2TemplateState

class V2ResearchNoteTemplate(BaseModel):
    """
    Research Note Template object is used in Research Note API server for relaying Template data.
    """
    id: Optional[StrictStr] = None
    template_name: Optional[StrictStr] = Field(None, alias="templateName")
    template_version: Optional[StrictInt] = Field(None, alias="templateVersion")
    description: Optional[StrictStr] = None
    permission_groups: Optional[conlist(StrictStr)] = Field(None, alias="permissionGroups")
    supported_entity_types: Optional[conlist(StrictStr)] = Field(None, alias="supportedEntityTypes")
    state: Optional[V2TemplateState] = None
    field_definitions: Optional[conlist(V2FieldDefinition)] = Field(None, alias="fieldDefinitions")
    modified_by: Optional[StrictStr] = Field(None, alias="modifiedBy")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy")
    update_time: Optional[datetime] = Field(None, alias="updateTime", description="The update time.")
    create_time: Optional[datetime] = Field(None, alias="createTime", description="The created time.")
    __properties = ["id", "templateName", "templateVersion", "description", "permissionGroups", "supportedEntityTypes", "state", "fieldDefinitions", "modifiedBy", "createdBy", "updateTime", "createTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2ResearchNoteTemplate:
        """Create an instance of V2ResearchNoteTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in field_definitions (list)
        _items = []
        if self.field_definitions:
            for _item in self.field_definitions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fieldDefinitions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2ResearchNoteTemplate:
        """Create an instance of V2ResearchNoteTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2ResearchNoteTemplate.parse_obj(obj)

        _obj = V2ResearchNoteTemplate.parse_obj({
            "id": obj.get("id"),
            "template_name": obj.get("templateName"),
            "template_version": obj.get("templateVersion"),
            "description": obj.get("description"),
            "permission_groups": obj.get("permissionGroups"),
            "supported_entity_types": obj.get("supportedEntityTypes"),
            "state": obj.get("state"),
            "field_definitions": [V2FieldDefinition.from_dict(_item) for _item in obj.get("fieldDefinitions")] if obj.get("fieldDefinitions") is not None else None,
            "modified_by": obj.get("modifiedBy"),
            "created_by": obj.get("createdBy"),
            "update_time": obj.get("updateTime"),
            "create_time": obj.get("createTime")
        })
        return _obj

