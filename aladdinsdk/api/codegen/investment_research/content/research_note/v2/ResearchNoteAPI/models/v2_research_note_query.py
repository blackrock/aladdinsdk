# coding: utf-8

"""
    Research Note

    Create, modify, delete and retrieve research notes.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class V2ResearchNoteQuery(BaseModel):
    """
    ResearchNote Query describes different filter parameters that can be used to filter research notes.
    """
    filter_criteria: Optional[conlist(StrictStr)] = Field(None, alias="filterCriteria", description="Multiple criteria can also be joined by AND and OR logic operator Other supported logic operator includes ! means not equal, IN for a list of value terms, etc. e.g. note.author:\"user\" AND (note.entities.asset_id:\"123456789\" OR note.entities.issuer:\"*ABC*\") , etc. Valid field name could be referered in the ResearchNote message type (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because user can pass multiple criteria to filter results. --)")
    order_by: Optional[StrictStr] = Field(None, alias="orderBy")
    facet_fields: Optional[conlist(StrictStr)] = Field(None, alias="facetFields")
    field_lists: Optional[conlist(StrictStr)] = Field(None, alias="fieldLists", description="When the field list is provided, only retrieve specified fields.")
    template_names: Optional[conlist(StrictStr)] = Field(None, alias="templateNames", description="When the template name list is provided, only retrieve specified templates.")
    __properties = ["filterCriteria", "orderBy", "facetFields", "fieldLists", "templateNames"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2ResearchNoteQuery:
        """Create an instance of V2ResearchNoteQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2ResearchNoteQuery:
        """Create an instance of V2ResearchNoteQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2ResearchNoteQuery.parse_obj(obj)

        _obj = V2ResearchNoteQuery.parse_obj({
            "filter_criteria": obj.get("filterCriteria"),
            "order_by": obj.get("orderBy"),
            "facet_fields": obj.get("facetFields"),
            "field_lists": obj.get("fieldLists"),
            "template_names": obj.get("templateNames")
        })
        return _obj

