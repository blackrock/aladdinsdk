# coding: utf-8

"""
    Research Note

    Create, modify, delete and retrieve research notes.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.content.research_note.v2.ResearchNoteAPI.models.v2_enum_value import V2EnumValue
from aladdinsdk.api.codegen.investment_research.content.research_note.v2.ResearchNoteAPI.models.v2_field_type import V2FieldType

class V2FieldDefinition(BaseModel):
    """
    V2FieldDefinition
    """
    id: Optional[StrictStr] = None
    field_name: Optional[StrictStr] = Field(None, alias="fieldName")
    field_type: Optional[V2FieldType] = Field(None, alias="fieldType")
    field_values: Optional[conlist(V2EnumValue)] = Field(None, alias="fieldValues")
    indexed: Optional[StrictBool] = None
    required: Optional[StrictBool] = None
    reporting_column: Optional[StrictBool] = Field(None, alias="reportingColumn")
    section: Optional[StrictStr] = None
    metadata: Optional[StrictStr] = None
    __properties = ["id", "fieldName", "fieldType", "fieldValues", "indexed", "required", "reportingColumn", "section", "metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2FieldDefinition:
        """Create an instance of V2FieldDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in field_values (list)
        _items = []
        if self.field_values:
            for _item in self.field_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fieldValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2FieldDefinition:
        """Create an instance of V2FieldDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2FieldDefinition.parse_obj(obj)

        _obj = V2FieldDefinition.parse_obj({
            "id": obj.get("id"),
            "field_name": obj.get("fieldName"),
            "field_type": obj.get("fieldType"),
            "field_values": [V2EnumValue.from_dict(_item) for _item in obj.get("fieldValues")] if obj.get("fieldValues") is not None else None,
            "indexed": obj.get("indexed"),
            "required": obj.get("required"),
            "reporting_column": obj.get("reportingColumn"),
            "section": obj.get("section"),
            "metadata": obj.get("metadata")
        })
        return _obj

