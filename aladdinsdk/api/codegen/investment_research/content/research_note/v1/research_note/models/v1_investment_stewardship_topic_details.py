# coding: utf-8

"""
    Research Note

    Create, modify, delete and retrieve research notes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.investment_research.content.research_note.v1.research_note.models.v1_investment_stewardship_assessment import V1InvestmentStewardshipAssessment
from aladdinsdk.api.codegen.investment_research.content.research_note.v1.research_note.models.v1_investment_stewardship_outcome import V1InvestmentStewardshipOutcome
from aladdinsdk.api.codegen.investment_research.content.research_note.v1.research_note.models.v1_investment_stewardship_time_frame import V1InvestmentStewardshipTimeFrame
from aladdinsdk.api.codegen.investment_research.content.research_note.v1.research_note.models.v1_investment_stewardship_topic import V1InvestmentStewardshipTopic

class V1InvestmentStewardshipTopicDetails(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    topic_name: Optional[V1InvestmentStewardshipTopic] = Field(None, alias="topicName")
    outcome: Optional[V1InvestmentStewardshipOutcome] = None
    timeframe: Optional[V1InvestmentStewardshipTimeFrame] = None
    assessment: Optional[V1InvestmentStewardshipAssessment] = None
    __properties = ["topicName", "outcome", "timeframe", "assessment"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1InvestmentStewardshipTopicDetails:
        """Create an instance of V1InvestmentStewardshipTopicDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1InvestmentStewardshipTopicDetails:
        """Create an instance of V1InvestmentStewardshipTopicDetails from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return V1InvestmentStewardshipTopicDetails.parse_obj(obj)

        _obj = V1InvestmentStewardshipTopicDetails.parse_obj({
            "topic_name": obj.get("topicName"),
            "outcome": obj.get("outcome"),
            "timeframe": obj.get("timeframe"),
            "assessment": obj.get("assessment")
        })
        return _obj

