# coding: utf-8

"""
    Research Note

    Create, modify, delete and retrieve research notes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Any, Dict, Optional

from aladdinsdk.api.codegen.investment_research.content.research_note.v1.ResearchNoteAPI.models.v1_research_note import V1ResearchNote
from aladdinsdk.api.codegen.investment_research.content.research_note.v1.ResearchNoteAPI.models.v1_search_research_notes_response import V1SearchResearchNotesResponse
from aladdinsdk.api.codegen.investment_research.content.research_note.v1.ResearchNoteAPI.models.v1_user_preferences import V1UserPreferences

from aladdinsdk.api.codegen.investment_research.content.research_note.v1.ResearchNoteAPI.api_client import ApiClient
from aladdinsdk.api.codegen.investment_research.content.research_note.v1.ResearchNoteAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.investment_research.content.research_note.v1.ResearchNoteAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultResearchNoteAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def research_note_api_create_research_note(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1ResearchNote, Field(..., description="research to create.")], **kwargs) -> V1ResearchNote:  # noqa: E501
        """Creates a research note  # noqa: E501

        Creates a research note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_create_research_note(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: research to create. (required)
        :type body: V1ResearchNote
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ResearchNote
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the research_note_api_create_research_note_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.research_note_api_create_research_note_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def research_note_api_create_research_note_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1ResearchNote, Field(..., description="research to create.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Creates a research note  # noqa: E501

        Creates a research note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_create_research_note_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: research to create. (required)
        :type body: V1ResearchNote
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ResearchNote, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method research_note_api_create_research_note" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1ResearchNote",
            '400': "ResearchNoteAPICreateResearchNote400Response",
            '401': "ResearchNoteAPICreateResearchNote400Response",
            '403': "ResearchNoteAPICreateResearchNote400Response",
            '404': "ResearchNoteAPICreateResearchNote400Response",
        }

        return self.api_client.call_api(
            '/researchNotes', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def research_note_api_delete_research_note(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Name of the Research")], **kwargs) -> object:  # noqa: E501
        """Deletes a research note  # noqa: E501

        Deletes a published research note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_delete_research_note(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Name of the Research (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the research_note_api_delete_research_note_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.research_note_api_delete_research_note_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def research_note_api_delete_research_note_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Name of the Research")], **kwargs) -> ApiResponse:  # noqa: E501
        """Deletes a research note  # noqa: E501

        Deletes a published research note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_delete_research_note_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Name of the Research (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method research_note_api_delete_research_note" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "ResearchNoteAPICreateResearchNote400Response",
            '401': "ResearchNoteAPICreateResearchNote400Response",
            '403': "ResearchNoteAPICreateResearchNote400Response",
            '404': "ResearchNoteAPICreateResearchNote400Response",
        }

        return self.api_client.call_api(
            '/researchNotes/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def research_note_api_get_research_note(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Research Id")], **kwargs) -> V1ResearchNote:  # noqa: E501
        """Gets a research note  # noqa: E501

        Retrieves a published investment research note for a specified note id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_get_research_note(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Research Id (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ResearchNote
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the research_note_api_get_research_note_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.research_note_api_get_research_note_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def research_note_api_get_research_note_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Research Id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Gets a research note  # noqa: E501

        Retrieves a published investment research note for a specified note id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_get_research_note_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Research Id (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ResearchNote, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method research_note_api_get_research_note" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1ResearchNote",
            '400': "ResearchNoteAPICreateResearchNote400Response",
            '401': "ResearchNoteAPICreateResearchNote400Response",
            '403': "ResearchNoteAPICreateResearchNote400Response",
            '404': "ResearchNoteAPICreateResearchNote400Response",
        }

        return self.api_client.call_api(
            '/researchNotes/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def research_note_api_get_user_preferences(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], **kwargs) -> V1UserPreferences:  # noqa: E501
        """Gets a user's preferences  # noqa: E501

        Retrieves user preferences (-- api-linter: core::0131::http-uri-id=disabled     aip.dev/not-precedent: We need to do this passing the user id could open a security gap. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_get_user_preferences(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1UserPreferences
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the research_note_api_get_user_preferences_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.research_note_api_get_user_preferences_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, **kwargs)  # noqa: E501

    @validate_arguments
    def research_note_api_get_user_preferences_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Gets a user's preferences  # noqa: E501

        Retrieves user preferences (-- api-linter: core::0131::http-uri-id=disabled     aip.dev/not-precedent: We need to do this passing the user id could open a security gap. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_get_user_preferences_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1UserPreferences, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method research_note_api_get_user_preferences" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1UserPreferences",
            '400': "ResearchNoteAPICreateResearchNote400Response",
            '401': "ResearchNoteAPICreateResearchNote400Response",
            '403': "ResearchNoteAPICreateResearchNote400Response",
            '404': "ResearchNoteAPICreateResearchNote400Response",
        }

        return self.api_client.call_api(
            '/userPreferences', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def research_note_api_search_research_notes(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], filter_criteria : Annotated[Optional[conlist(StrictStr)], Field(description="Specifies the filter criteria, please refer to ResearchNote message for valid criteria target field name The supported syntax (for now):  note.[target field]:[term] Eg: note.author:\"user\" [term] Eg: Technology (Matches anything containing Technology anywhere). Multiple criteria can also be joined by AND and OR logic operator Other supported logic operator includes ! means not equal, IN for a list of value terms, etc. e.g. note.author:\"user\" AND (note.entities.asset_id:\"123456789\" OR note.entities.issuer:\"*ABC*\") , etc. Valid field name could be referered in the ResearchNote message type (-- aip.dev/beta-blocker: Further refactoring/change is needed when the search/filtering standards are finalized --) (-- api-linter: core::0132::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field because it is already being used in prod. --)")] = None, order_by : Annotated[Optional[StrictStr], Field(description="Sorts the response with ascending or descending order based on specific field. Default as asc. e.g. \"note.publish_time desc, note.author\".")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of research notes to return. The service may return fewer than this value. If unspecified, at most 10 note will be returned.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous 'SearchResearchNotes' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'SearchResearchNotes' must match the call that provided the page token.")] = None, facet_fields : Annotated[Optional[conlist(StrictStr)], Field(description="Used to provide with facet search capabilities by simply specifiying the fields to be used as base and by consequence, returned with an array for each of the specified fields and it's terms and matches for each of the entries.")] = None, field_lists : Annotated[Optional[conlist(StrictStr)], Field(description="When the field list is provided, only retrieve specified fields. (-- api-linter: core::0132::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because field list is required for security reasons --).")] = None, **kwargs) -> V1SearchResearchNotesResponse:  # noqa: E501
        """Search research notes  # noqa: E501

        Retrieves published research notes that match a specified set of research note attribute criteria (author, department, security, issuer, industry sector, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_search_research_notes(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter_criteria, order_by, page_size, page_token, facet_fields, field_lists, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param filter_criteria: Specifies the filter criteria, please refer to ResearchNote message for valid criteria target field name The supported syntax (for now):  note.[target field]:[term] Eg: note.author:\"user\" [term] Eg: Technology (Matches anything containing Technology anywhere). Multiple criteria can also be joined by AND and OR logic operator Other supported logic operator includes ! means not equal, IN for a list of value terms, etc. e.g. note.author:\"user\" AND (note.entities.asset_id:\"123456789\" OR note.entities.issuer:\"*ABC*\") , etc. Valid field name could be referered in the ResearchNote message type (-- aip.dev/beta-blocker: Further refactoring/change is needed when the search/filtering standards are finalized --) (-- api-linter: core::0132::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field because it is already being used in prod. --)
        :type filter_criteria: List[str]
        :param order_by: Sorts the response with ascending or descending order based on specific field. Default as asc. e.g. \"note.publish_time desc, note.author\".
        :type order_by: str
        :param page_size: The maximum number of research notes to return. The service may return fewer than this value. If unspecified, at most 10 note will be returned.
        :type page_size: int
        :param page_token: A page token, received from a previous 'SearchResearchNotes' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'SearchResearchNotes' must match the call that provided the page token.
        :type page_token: str
        :param facet_fields: Used to provide with facet search capabilities by simply specifiying the fields to be used as base and by consequence, returned with an array for each of the specified fields and it's terms and matches for each of the entries.
        :type facet_fields: List[str]
        :param field_lists: When the field list is provided, only retrieve specified fields. (-- api-linter: core::0132::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because field list is required for security reasons --).
        :type field_lists: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1SearchResearchNotesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the research_note_api_search_research_notes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.research_note_api_search_research_notes_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter_criteria, order_by, page_size, page_token, facet_fields, field_lists, **kwargs)  # noqa: E501

    @validate_arguments
    def research_note_api_search_research_notes_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], filter_criteria : Annotated[Optional[conlist(StrictStr)], Field(description="Specifies the filter criteria, please refer to ResearchNote message for valid criteria target field name The supported syntax (for now):  note.[target field]:[term] Eg: note.author:\"user\" [term] Eg: Technology (Matches anything containing Technology anywhere). Multiple criteria can also be joined by AND and OR logic operator Other supported logic operator includes ! means not equal, IN for a list of value terms, etc. e.g. note.author:\"user\" AND (note.entities.asset_id:\"123456789\" OR note.entities.issuer:\"*ABC*\") , etc. Valid field name could be referered in the ResearchNote message type (-- aip.dev/beta-blocker: Further refactoring/change is needed when the search/filtering standards are finalized --) (-- api-linter: core::0132::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field because it is already being used in prod. --)")] = None, order_by : Annotated[Optional[StrictStr], Field(description="Sorts the response with ascending or descending order based on specific field. Default as asc. e.g. \"note.publish_time desc, note.author\".")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of research notes to return. The service may return fewer than this value. If unspecified, at most 10 note will be returned.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous 'SearchResearchNotes' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'SearchResearchNotes' must match the call that provided the page token.")] = None, facet_fields : Annotated[Optional[conlist(StrictStr)], Field(description="Used to provide with facet search capabilities by simply specifiying the fields to be used as base and by consequence, returned with an array for each of the specified fields and it's terms and matches for each of the entries.")] = None, field_lists : Annotated[Optional[conlist(StrictStr)], Field(description="When the field list is provided, only retrieve specified fields. (-- api-linter: core::0132::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because field list is required for security reasons --).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search research notes  # noqa: E501

        Retrieves published research notes that match a specified set of research note attribute criteria (author, department, security, issuer, industry sector, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_search_research_notes_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, filter_criteria, order_by, page_size, page_token, facet_fields, field_lists, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param filter_criteria: Specifies the filter criteria, please refer to ResearchNote message for valid criteria target field name The supported syntax (for now):  note.[target field]:[term] Eg: note.author:\"user\" [term] Eg: Technology (Matches anything containing Technology anywhere). Multiple criteria can also be joined by AND and OR logic operator Other supported logic operator includes ! means not equal, IN for a list of value terms, etc. e.g. note.author:\"user\" AND (note.entities.asset_id:\"123456789\" OR note.entities.issuer:\"*ABC*\") , etc. Valid field name could be referered in the ResearchNote message type (-- aip.dev/beta-blocker: Further refactoring/change is needed when the search/filtering standards are finalized --) (-- api-linter: core::0132::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field because it is already being used in prod. --)
        :type filter_criteria: List[str]
        :param order_by: Sorts the response with ascending or descending order based on specific field. Default as asc. e.g. \"note.publish_time desc, note.author\".
        :type order_by: str
        :param page_size: The maximum number of research notes to return. The service may return fewer than this value. If unspecified, at most 10 note will be returned.
        :type page_size: int
        :param page_token: A page token, received from a previous 'SearchResearchNotes' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'SearchResearchNotes' must match the call that provided the page token.
        :type page_token: str
        :param facet_fields: Used to provide with facet search capabilities by simply specifiying the fields to be used as base and by consequence, returned with an array for each of the specified fields and it's terms and matches for each of the entries.
        :type facet_fields: List[str]
        :param field_lists: When the field list is provided, only retrieve specified fields. (-- api-linter: core::0132::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because field list is required for security reasons --).
        :type field_lists: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1SearchResearchNotesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'filter_criteria',
            'order_by',
            'page_size',
            'page_token',
            'facet_fields',
            'field_lists'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method research_note_api_search_research_notes" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter_criteria') is not None:  # noqa: E501
            _query_params.append(('filterCriteria', _params['filter_criteria']))
            _collection_formats['filterCriteria'] = 'multi'

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('orderBy', _params['order_by']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('facet_fields') is not None:  # noqa: E501
            _query_params.append(('facetFields', _params['facet_fields']))
            _collection_formats['facetFields'] = 'multi'

        if _params.get('field_lists') is not None:  # noqa: E501
            _query_params.append(('fieldLists', _params['field_lists']))
            _collection_formats['fieldLists'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1SearchResearchNotesResponse",
            '400': "ResearchNoteAPICreateResearchNote400Response",
            '401': "ResearchNoteAPICreateResearchNote400Response",
            '403': "ResearchNoteAPICreateResearchNote400Response",
            '404': "ResearchNoteAPICreateResearchNote400Response",
        }

        return self.api_client.call_api(
            '/researchNotes:search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def research_note_api_update_research_note(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], research_note_id : Annotated[StrictStr, Field(..., description="ID describes the computer or human assigned resource identifier. The research note id.")], body : Annotated[V1ResearchNote, Field(..., description="research to update.")], update_mask : Annotated[Optional[StrictStr], Field(description="List of fields to be updated.")] = None, **kwargs) -> V1ResearchNote:  # noqa: E501
        """Updates a research note  # noqa: E501

        Updates a published research note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_update_research_note(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, research_note_id, body, update_mask, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param research_note_id: ID describes the computer or human assigned resource identifier. The research note id. (required)
        :type research_note_id: str
        :param body: research to update. (required)
        :type body: V1ResearchNote
        :param update_mask: List of fields to be updated.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ResearchNote
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the research_note_api_update_research_note_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.research_note_api_update_research_note_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, research_note_id, body, update_mask, **kwargs)  # noqa: E501

    @validate_arguments
    def research_note_api_update_research_note_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], research_note_id : Annotated[StrictStr, Field(..., description="ID describes the computer or human assigned resource identifier. The research note id.")], body : Annotated[V1ResearchNote, Field(..., description="research to update.")], update_mask : Annotated[Optional[StrictStr], Field(description="List of fields to be updated.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Updates a research note  # noqa: E501

        Updates a published research note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.research_note_api_update_research_note_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, research_note_id, body, update_mask, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param research_note_id: ID describes the computer or human assigned resource identifier. The research note id. (required)
        :type research_note_id: str
        :param body: research to update. (required)
        :type body: V1ResearchNote
        :param update_mask: List of fields to be updated.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ResearchNote, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'research_note_id',
            'body',
            'update_mask'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method research_note_api_update_research_note" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['research_note_id']:
            _path_params['researchNote.id'] = _params['research_note_id']


        # process the query parameters
        _query_params = []
        if _params.get('update_mask') is not None:  # noqa: E501
            _query_params.append(('updateMask', _params['update_mask']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1ResearchNote",
            '400': "ResearchNoteAPICreateResearchNote400Response",
            '401': "ResearchNoteAPICreateResearchNote400Response",
            '403': "ResearchNoteAPICreateResearchNote400Response",
            '404': "ResearchNoteAPICreateResearchNote400Response",
        }

        return self.api_client.call_api(
            '/researchNotes/{researchNote.id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
