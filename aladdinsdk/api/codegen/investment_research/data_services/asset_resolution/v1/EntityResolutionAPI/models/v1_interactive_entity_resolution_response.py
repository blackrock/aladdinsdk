# coding: utf-8

"""
    Entity Resolution Service

    Service for entity resolution.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.EntityResolutionAPI.models.v1_link import V1Link

class V1InteractiveEntityResolutionResponse(BaseModel):
    """
    V1InteractiveEntityResolutionResponse
    """
    uid: Optional[StrictStr] = Field(None, description="unique identifier to resolve input request to outout response.")
    entity_value: Optional[StrictStr] = Field(None, alias="entityValue", description="entity to be resolved.")
    link_count: Optional[StrictInt] = Field(None, alias="linkCount", description="num of resolutions for the given entity.")
    links: Optional[conlist(V1Link)] = None
    entity_value_type: Optional[StrictStr] = Field(None, alias="entityValueType", description="type of resolved entity. e.g. name, person, brand etc.")
    exception: Optional[StrictStr] = None
    __properties = ["uid", "entityValue", "linkCount", "links", "entityValueType", "exception"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1InteractiveEntityResolutionResponse:
        """Create an instance of V1InteractiveEntityResolutionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1InteractiveEntityResolutionResponse:
        """Create an instance of V1InteractiveEntityResolutionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1InteractiveEntityResolutionResponse.parse_obj(obj)

        _obj = V1InteractiveEntityResolutionResponse.parse_obj({
            "uid": obj.get("uid"),
            "entity_value": obj.get("entityValue"),
            "link_count": obj.get("linkCount"),
            "links": [V1Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "entity_value_type": obj.get("entityValueType"),
            "exception": obj.get("exception")
        })
        return _obj

