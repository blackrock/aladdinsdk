# coding: utf-8

"""
    Entity Resolution Service

    Service for entity resolution.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.EntityResolutionAPI.models.v1_asset_master import V1AssetMaster
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.EntityResolutionAPI.models.v1_interactive_entity_resolution_request import V1InteractiveEntityResolutionRequest

class V1InteractiveEntityResolutionParam(BaseModel):
    """
    V1InteractiveEntityResolutionParam
    """
    entity_resolution_requests: conlist(V1InteractiveEntityResolutionRequest) = Field(..., alias="entityResolutionRequests")
    top_records_count: Optional[StrictInt] = Field(None, alias="topRecordsCount")
    asset_master: Optional[V1AssetMaster] = Field(None, alias="assetMaster")
    model_name: Optional[StrictStr] = Field(None, alias="modelName")
    model_version: Optional[StrictStr] = Field(None, alias="modelVersion")
    dataset_vendor: Optional[StrictStr] = Field(None, alias="datasetVendor")
    __properties = ["entityResolutionRequests", "topRecordsCount", "assetMaster", "modelName", "modelVersion", "datasetVendor"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1InteractiveEntityResolutionParam:
        """Create an instance of V1InteractiveEntityResolutionParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in entity_resolution_requests (list)
        _items = []
        if self.entity_resolution_requests:
            for _item in self.entity_resolution_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['entityResolutionRequests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1InteractiveEntityResolutionParam:
        """Create an instance of V1InteractiveEntityResolutionParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1InteractiveEntityResolutionParam.parse_obj(obj)

        _obj = V1InteractiveEntityResolutionParam.parse_obj({
            "entity_resolution_requests": [V1InteractiveEntityResolutionRequest.from_dict(_item) for _item in obj.get("entityResolutionRequests")] if obj.get("entityResolutionRequests") is not None else None,
            "top_records_count": obj.get("topRecordsCount"),
            "asset_master": obj.get("assetMaster"),
            "model_name": obj.get("modelName"),
            "model_version": obj.get("modelVersion"),
            "dataset_vendor": obj.get("datasetVendor")
        })
        return _obj

