# coding: utf-8

"""
    Entity Resolution Service

    Service for entity resolution.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.EntityResolutionAPI.models.v1_asset_master import V1AssetMaster

class V1TableEntityResolutionParam(BaseModel):
    """
    TableEntityResolutionParam represents parameters for resolving an entire entity column present inside the src table.
    """
    src_table: StrictStr = Field(..., alias="srcTable")
    entity_col: StrictStr = Field(..., alias="entityCol")
    asof_date_col: StrictStr = Field(..., alias="asofDateCol")
    uri_col: Optional[StrictStr] = Field(None, alias="uriCol")
    year_founded_col: Optional[StrictStr] = Field(None, alias="yearFoundedCol")
    phone_number_col: Optional[StrictStr] = Field(None, alias="phoneNumberCol")
    address_col: Optional[StrictStr] = Field(None, alias="addressCol")
    city_name_col: Optional[StrictStr] = Field(None, alias="cityNameCol")
    zipcode_col: Optional[StrictStr] = Field(None, alias="zipcodeCol")
    state_name_col: Optional[StrictStr] = Field(None, alias="stateNameCol")
    country_name_col: Optional[StrictStr] = Field(None, alias="countryNameCol")
    resolving_key_col: StrictStr = Field(..., alias="resolvingKeyCol")
    top_records_count: Optional[StrictInt] = Field(None, alias="topRecordsCount")
    asset_master: Optional[V1AssetMaster] = Field(None, alias="assetMaster")
    model_name: Optional[StrictStr] = Field(None, alias="modelName")
    model_version: Optional[StrictStr] = Field(None, alias="modelVersion")
    dataset_vendor: Optional[StrictStr] = Field(None, alias="datasetVendor")
    uid: StrictStr = Field(...)
    __properties = ["srcTable", "entityCol", "asofDateCol", "uriCol", "yearFoundedCol", "phoneNumberCol", "addressCol", "cityNameCol", "zipcodeCol", "stateNameCol", "countryNameCol", "resolvingKeyCol", "topRecordsCount", "assetMaster", "modelName", "modelVersion", "datasetVendor", "uid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TableEntityResolutionParam:
        """Create an instance of V1TableEntityResolutionParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TableEntityResolutionParam:
        """Create an instance of V1TableEntityResolutionParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TableEntityResolutionParam.parse_obj(obj)

        _obj = V1TableEntityResolutionParam.parse_obj({
            "src_table": obj.get("srcTable"),
            "entity_col": obj.get("entityCol"),
            "asof_date_col": obj.get("asofDateCol"),
            "uri_col": obj.get("uriCol"),
            "year_founded_col": obj.get("yearFoundedCol"),
            "phone_number_col": obj.get("phoneNumberCol"),
            "address_col": obj.get("addressCol"),
            "city_name_col": obj.get("cityNameCol"),
            "zipcode_col": obj.get("zipcodeCol"),
            "state_name_col": obj.get("stateNameCol"),
            "country_name_col": obj.get("countryNameCol"),
            "resolving_key_col": obj.get("resolvingKeyCol"),
            "top_records_count": obj.get("topRecordsCount"),
            "asset_master": obj.get("assetMaster"),
            "model_name": obj.get("modelName"),
            "model_version": obj.get("modelVersion"),
            "dataset_vendor": obj.get("datasetVendor"),
            "uid": obj.get("uid")
        })
        return _obj

