# coding: utf-8

"""
    Security Resolution Service

    Service for security resolution.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.SecurityResolutionAPI.models.v1_asset_master import V1AssetMaster
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.SecurityResolutionAPI.models.v1_resolution_type import V1ResolutionType
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.SecurityResolutionAPI.models.v1_security_resolution_request import V1SecurityResolutionRequest

class V1InteractiveSecurityResolutionParam(BaseModel):
    """
    V1InteractiveSecurityResolutionParam
    """
    security_resolution_requests: conlist(V1SecurityResolutionRequest) = Field(..., alias="securityResolutionRequests")
    resolution_type: Optional[V1ResolutionType] = Field(None, alias="resolutionType")
    asset_master: Optional[V1AssetMaster] = Field(None, alias="assetMaster")
    __properties = ["securityResolutionRequests", "resolutionType", "assetMaster"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1InteractiveSecurityResolutionParam:
        """Create an instance of V1InteractiveSecurityResolutionParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in security_resolution_requests (list)
        _items = []
        if self.security_resolution_requests:
            for _item in self.security_resolution_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['securityResolutionRequests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1InteractiveSecurityResolutionParam:
        """Create an instance of V1InteractiveSecurityResolutionParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1InteractiveSecurityResolutionParam.parse_obj(obj)

        _obj = V1InteractiveSecurityResolutionParam.parse_obj({
            "security_resolution_requests": [V1SecurityResolutionRequest.from_dict(_item) for _item in obj.get("securityResolutionRequests")] if obj.get("securityResolutionRequests") is not None else None,
            "resolution_type": obj.get("resolutionType"),
            "asset_master": obj.get("assetMaster")
        })
        return _obj

