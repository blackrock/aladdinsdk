# coding: utf-8

"""
    Security Resolution Service

    Service for security resolution.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class V1SecurityResponse(BaseModel):
    """
    SecurityResponse represents a resolution response for a given security.
    """
    security_types: Optional[Dict[str, StrictStr]] = Field(None, alias="securityTypes")
    asof_date: Optional[date] = Field(None, alias="asofDate", description="date on which the id_value was resolved.")
    resolution_key: Optional[StrictStr] = Field(None, alias="resolutionKey")
    country_iso2: Optional[StrictStr] = Field(None, alias="countryIso2", description="listing country of the security.")
    currency_iso3: Optional[StrictStr] = Field(None, alias="currencyIso3", description="cuurency denomination of the security.")
    exchange_code: Optional[StrictStr] = Field(None, alias="exchangeCode", description="exchange code for the ticker.")
    waterfall_type: Optional[StrictStr] = Field(None, alias="waterfallType")
    exception: Optional[StrictStr] = None
    __properties = ["securityTypes", "asofDate", "resolutionKey", "countryIso2", "currencyIso3", "exchangeCode", "waterfallType", "exception"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SecurityResponse:
        """Create an instance of V1SecurityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SecurityResponse:
        """Create an instance of V1SecurityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SecurityResponse.parse_obj(obj)

        _obj = V1SecurityResponse.parse_obj({
            "security_types": obj.get("securityTypes"),
            "asof_date": obj.get("asofDate"),
            "resolution_key": obj.get("resolutionKey"),
            "country_iso2": obj.get("countryIso2"),
            "currency_iso3": obj.get("currencyIso3"),
            "exchange_code": obj.get("exchangeCode"),
            "waterfall_type": obj.get("waterfallType"),
            "exception": obj.get("exception")
        })
        return _obj

