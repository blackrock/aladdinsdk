# coding: utf-8

"""
    Security Resolution Service

    Service for security resolution.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.SecurityResolutionAPI.models.v1_asset_master import V1AssetMaster
from aladdinsdk.api.codegen.investment_research.data_services.asset_resolution.v1.SecurityResolutionAPI.models.v1_resolution_type import V1ResolutionType

class V1FileSecurityResolutionParam(BaseModel):
    """
    V1FileSecurityResolutionParam
    """
    file_name: StrictStr = Field(..., alias="fileName")
    file_loc: StrictStr = Field(..., alias="fileLoc")
    file_type: StrictStr = Field(..., alias="fileType")
    file_headers: Optional[conlist(StrictStr)] = Field(None, alias="fileHeaders")
    file_delimiter: Optional[StrictStr] = Field(None, alias="fileDelimiter")
    field_enclosed_character: Optional[StrictStr] = Field(None, alias="fieldEnclosedCharacter")
    my_date_format: Optional[StrictStr] = Field(None, alias="myDateFormat")
    my_time_format: Optional[StrictStr] = Field(None, alias="myTimeFormat")
    my_timestamp_format: Optional[StrictStr] = Field(None, alias="myTimestampFormat")
    null_if: Optional[StrictStr] = Field(None, alias="nullIf")
    skip_header_count: Optional[StrictInt] = Field(None, alias="skipHeaderCount")
    encoding_value: Optional[StrictStr] = Field(None, alias="encodingValue")
    security_types: Dict[str, StrictStr] = Field(..., alias="securityTypes")
    asof_date_col: StrictStr = Field(..., alias="asofDateCol")
    exchange_code_col: Optional[StrictStr] = Field(None, alias="exchangeCodeCol")
    country_iso2_col: Optional[StrictStr] = Field(None, alias="countryIso2Col")
    currency_iso3_col: Optional[StrictStr] = Field(None, alias="currencyIso3Col")
    resolution_type: Optional[V1ResolutionType] = Field(None, alias="resolutionType")
    asset_master: Optional[V1AssetMaster] = Field(None, alias="assetMaster")
    __properties = ["fileName", "fileLoc", "fileType", "fileHeaders", "fileDelimiter", "fieldEnclosedCharacter", "myDateFormat", "myTimeFormat", "myTimestampFormat", "nullIf", "skipHeaderCount", "encodingValue", "securityTypes", "asofDateCol", "exchangeCodeCol", "countryIso2Col", "currencyIso3Col", "resolutionType", "assetMaster"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FileSecurityResolutionParam:
        """Create an instance of V1FileSecurityResolutionParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FileSecurityResolutionParam:
        """Create an instance of V1FileSecurityResolutionParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FileSecurityResolutionParam.parse_obj(obj)

        _obj = V1FileSecurityResolutionParam.parse_obj({
            "file_name": obj.get("fileName"),
            "file_loc": obj.get("fileLoc"),
            "file_type": obj.get("fileType"),
            "file_headers": obj.get("fileHeaders"),
            "file_delimiter": obj.get("fileDelimiter"),
            "field_enclosed_character": obj.get("fieldEnclosedCharacter"),
            "my_date_format": obj.get("myDateFormat"),
            "my_time_format": obj.get("myTimeFormat"),
            "my_timestamp_format": obj.get("myTimestampFormat"),
            "null_if": obj.get("nullIf"),
            "skip_header_count": obj.get("skipHeaderCount"),
            "encoding_value": obj.get("encodingValue"),
            "security_types": obj.get("securityTypes"),
            "asof_date_col": obj.get("asofDateCol"),
            "exchange_code_col": obj.get("exchangeCodeCol"),
            "country_iso2_col": obj.get("countryIso2Col"),
            "currency_iso3_col": obj.get("currencyIso3Col"),
            "resolution_type": obj.get("resolutionType"),
            "asset_master": obj.get("assetMaster")
        })
        return _obj

