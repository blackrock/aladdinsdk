# coding: utf-8

"""
    Entity Resolution Service

    Service for entity resolution.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class V1InteractiveEntityResolutionRequest(BaseModel):
    """
    V1InteractiveEntityResolutionRequest
    """
    uid: StrictStr = Field(...)
    entity_uid: StrictStr = Field(..., alias="entityUid")
    uri: Optional[StrictStr] = None
    asof_date: date = Field(..., alias="asofDate")
    year_founded: Optional[StrictInt] = Field(None, alias="yearFounded")
    phone_number: Optional[StrictStr] = Field(None, alias="phoneNumber")
    address: Optional[StrictStr] = None
    city_name: Optional[StrictStr] = Field(None, alias="cityName")
    zipcode: Optional[StrictStr] = None
    state_name: Optional[StrictStr] = Field(None, alias="stateName")
    country_name: Optional[StrictStr] = Field(None, alias="countryName")
    __properties = ["uid", "entityUid", "uri", "asofDate", "yearFounded", "phoneNumber", "address", "cityName", "zipcode", "stateName", "countryName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1InteractiveEntityResolutionRequest:
        """Create an instance of V1InteractiveEntityResolutionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1InteractiveEntityResolutionRequest:
        """Create an instance of V1InteractiveEntityResolutionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1InteractiveEntityResolutionRequest.parse_obj(obj)

        _obj = V1InteractiveEntityResolutionRequest.parse_obj({
            "uid": obj.get("uid"),
            "entity_uid": obj.get("entityUid"),
            "uri": obj.get("uri"),
            "asof_date": obj.get("asofDate"),
            "year_founded": obj.get("yearFounded"),
            "phone_number": obj.get("phoneNumber"),
            "address": obj.get("address"),
            "city_name": obj.get("cityName"),
            "zipcode": obj.get("zipcode"),
            "state_name": obj.get("stateName"),
            "country_name": obj.get("countryName")
        })
        return _obj

