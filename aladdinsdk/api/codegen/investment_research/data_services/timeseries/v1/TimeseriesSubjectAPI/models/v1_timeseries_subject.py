# coding: utf-8

"""
    Timeseries Subject

    As a part of the Timeseries metadata, Timeseries Subject offers the capability to handle timeseries entity (ex. BLK, APPL) metadata information.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesSubjectAPI.models.timeseriesv1_location import Timeseriesv1Location
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesSubjectAPI.models.v1_timeseries_category import V1TimeseriesCategory

class V1TimeseriesSubject(BaseModel):
    """
    V1TimeseriesSubject
    """
    id: StrictStr = Field(..., description="Entity or Subject ID.  Example: `SPX Index`")
    description: Optional[StrictStr] = Field(None, description="Description of the subject.  Example: `APPLE INC`  (-- api-linter: aladdin::0901::dictionary-message-field=disabled     aip.dev/not-precedent: False alarm, `description` is NOT a Cross-Domain     Field. --) (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: False alarm, `description` is NOT a resource.     --)")
    timeseries_category: Optional[V1TimeseriesCategory] = Field(None, alias="timeseriesCategory")
    sub_category: Optional[V1TimeseriesCategory] = Field(None, alias="subCategory")
    location: Optional[Timeseriesv1Location] = None
    asset_class: Optional[StrictStr] = Field(None, alias="assetClass", description="Standard asset class.  Example: `Equities`, `Fixed Income`, `Derivatives` etc.  (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: Represents static data from our own domain --)")
    __properties = ["id", "description", "timeseriesCategory", "subCategory", "location", "assetClass"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TimeseriesSubject:
        """Create an instance of V1TimeseriesSubject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of timeseries_category
        if self.timeseries_category:
            _dict['timeseriesCategory'] = self.timeseries_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_category
        if self.sub_category:
            _dict['subCategory'] = self.sub_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TimeseriesSubject:
        """Create an instance of V1TimeseriesSubject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TimeseriesSubject.parse_obj(obj)

        _obj = V1TimeseriesSubject.parse_obj({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "timeseries_category": V1TimeseriesCategory.from_dict(obj.get("timeseriesCategory")) if obj.get("timeseriesCategory") is not None else None,
            "sub_category": V1TimeseriesCategory.from_dict(obj.get("subCategory")) if obj.get("subCategory") is not None else None,
            "location": Timeseriesv1Location.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "asset_class": obj.get("assetClass")
        })
        return _obj

