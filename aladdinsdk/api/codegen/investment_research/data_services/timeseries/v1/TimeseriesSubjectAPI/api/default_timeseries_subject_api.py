# coding: utf-8

"""
    Timeseries Subject

    As a part of the Timeseries metadata, Timeseries Subject offers the capability to handle timeseries entity (ex. BLK, APPL) metadata information.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictInt, StrictStr

from typing import Any, Dict, Optional

from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesSubjectAPI.models.v1_filter_timeseries_subjects_response import V1FilterTimeseriesSubjectsResponse
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesSubjectAPI.models.v1_list_timeseries_subjects_response import V1ListTimeseriesSubjectsResponse
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesSubjectAPI.models.v1_timeseries_subject import V1TimeseriesSubject

from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesSubjectAPI.api_client import ApiClient
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesSubjectAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesSubjectAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultTimeseriesSubjectAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def timeseries_subject_api_create_timeseries_subject(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], timeseries_subject_id : Annotated[StrictStr, Field(..., description="Entity or Subject ID.  Example: `SPX Index`")], body : Annotated[V1TimeseriesSubject, Field(..., description="TimeseriesSubject object")], **kwargs) -> V1TimeseriesSubject:  # noqa: E501
        """Create TimeseriesSubject  # noqa: E501

        Create the metadata of an entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_create_timeseries_subject(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, timeseries_subject_id, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param timeseries_subject_id: Entity or Subject ID.  Example: `SPX Index` (required)
        :type timeseries_subject_id: str
        :param body: TimeseriesSubject object (required)
        :type body: V1TimeseriesSubject
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1TimeseriesSubject
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the timeseries_subject_api_create_timeseries_subject_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.timeseries_subject_api_create_timeseries_subject_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, timeseries_subject_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def timeseries_subject_api_create_timeseries_subject_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], timeseries_subject_id : Annotated[StrictStr, Field(..., description="Entity or Subject ID.  Example: `SPX Index`")], body : Annotated[V1TimeseriesSubject, Field(..., description="TimeseriesSubject object")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create TimeseriesSubject  # noqa: E501

        Create the metadata of an entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_create_timeseries_subject_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, timeseries_subject_id, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param timeseries_subject_id: Entity or Subject ID.  Example: `SPX Index` (required)
        :type timeseries_subject_id: str
        :param body: TimeseriesSubject object (required)
        :type body: V1TimeseriesSubject
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1TimeseriesSubject, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'timeseries_subject_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timeseries_subject_api_create_timeseries_subject" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['timeseries_subject_id']:
            _path_params['timeseriesSubject.id'] = _params['timeseries_subject_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1TimeseriesSubject",
            '400': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '401': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '403': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '404': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
        }

        return self.api_client.call_api(
            '/subject/{timeseriesSubject.id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def timeseries_subject_api_delete_timeseries_subject(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="TimeseriesSubject id")], **kwargs) -> object:  # noqa: E501
        """Delete TimeseriesSubject  # noqa: E501

        Delete the metadata of an entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_delete_timeseries_subject(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: TimeseriesSubject id (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the timeseries_subject_api_delete_timeseries_subject_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.timeseries_subject_api_delete_timeseries_subject_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def timeseries_subject_api_delete_timeseries_subject_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="TimeseriesSubject id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete TimeseriesSubject  # noqa: E501

        Delete the metadata of an entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_delete_timeseries_subject_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: TimeseriesSubject id (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timeseries_subject_api_delete_timeseries_subject" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '401': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '403': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '404': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
        }

        return self.api_client.call_api(
            '/subject/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def timeseries_subject_api_filter_timeseries_subjects(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], query_subject_id : Annotated[Optional[StrictStr], Field(description="This criterion specifies the id of the timeseries.  (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: This is the Timseseries Metadata id --)")] = None, query_timeseries_category_id : Annotated[Optional[StrictStr], Field(description="Standard measure category.")] = None, query_sub_category_id : Annotated[Optional[StrictStr], Field(description="Standard measure category.")] = None, query_location_country_code : Annotated[Optional[StrictStr], Field(description="Two letter country code.  Example: `AF`, `ZA`")] = None, query_location_region_code : Annotated[Optional[StrictStr], Field(description="Region code. Example: `Global`, `APAC`, `EMEA`, `LATAM`, `NA`")] = None, query_asset_class : Annotated[Optional[StrictStr], Field(description="Matched asset class. (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because we use our domain  defined values for asset class --)")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum value is 500. If unspecified, the default value is 200.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="Default page token.")] = None, **kwargs) -> V1FilterTimeseriesSubjectsResponse:  # noqa: E501
        """Filter TimeseriesSubject  # noqa: E501

        Filter the metadata of all the entities  (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this to be consistent with other rpc  endpoint names ... --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_filter_timeseries_subjects(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, query_subject_id, query_timeseries_category_id, query_sub_category_id, query_location_country_code, query_location_region_code, query_asset_class, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param query_subject_id: This criterion specifies the id of the timeseries.  (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: This is the Timseseries Metadata id --)
        :type query_subject_id: str
        :param query_timeseries_category_id: Standard measure category.
        :type query_timeseries_category_id: str
        :param query_sub_category_id: Standard measure category.
        :type query_sub_category_id: str
        :param query_location_country_code: Two letter country code.  Example: `AF`, `ZA`
        :type query_location_country_code: str
        :param query_location_region_code: Region code. Example: `Global`, `APAC`, `EMEA`, `LATAM`, `NA`
        :type query_location_region_code: str
        :param query_asset_class: Matched asset class. (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because we use our domain  defined values for asset class --)
        :type query_asset_class: str
        :param page_size: The maximum value is 500. If unspecified, the default value is 200.
        :type page_size: int
        :param page_token: Default page token.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterTimeseriesSubjectsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the timeseries_subject_api_filter_timeseries_subjects_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.timeseries_subject_api_filter_timeseries_subjects_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, query_subject_id, query_timeseries_category_id, query_sub_category_id, query_location_country_code, query_location_region_code, query_asset_class, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def timeseries_subject_api_filter_timeseries_subjects_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], query_subject_id : Annotated[Optional[StrictStr], Field(description="This criterion specifies the id of the timeseries.  (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: This is the Timseseries Metadata id --)")] = None, query_timeseries_category_id : Annotated[Optional[StrictStr], Field(description="Standard measure category.")] = None, query_sub_category_id : Annotated[Optional[StrictStr], Field(description="Standard measure category.")] = None, query_location_country_code : Annotated[Optional[StrictStr], Field(description="Two letter country code.  Example: `AF`, `ZA`")] = None, query_location_region_code : Annotated[Optional[StrictStr], Field(description="Region code. Example: `Global`, `APAC`, `EMEA`, `LATAM`, `NA`")] = None, query_asset_class : Annotated[Optional[StrictStr], Field(description="Matched asset class. (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because we use our domain  defined values for asset class --)")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum value is 500. If unspecified, the default value is 200.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="Default page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter TimeseriesSubject  # noqa: E501

        Filter the metadata of all the entities  (-- api-linter: aladdin::9016::query-custom-method-http=disabled  aip.dev/not-precedent: We need to do this to be consistent with other rpc  endpoint names ... --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_filter_timeseries_subjects_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, query_subject_id, query_timeseries_category_id, query_sub_category_id, query_location_country_code, query_location_region_code, query_asset_class, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param query_subject_id: This criterion specifies the id of the timeseries.  (-- api-linter: core::0124::required-reference=disabled     aip.dev/not-precedent: This is the Timseseries Metadata id --)
        :type query_subject_id: str
        :param query_timeseries_category_id: Standard measure category.
        :type query_timeseries_category_id: str
        :param query_sub_category_id: Standard measure category.
        :type query_sub_category_id: str
        :param query_location_country_code: Two letter country code.  Example: `AF`, `ZA`
        :type query_location_country_code: str
        :param query_location_region_code: Region code. Example: `Global`, `APAC`, `EMEA`, `LATAM`, `NA`
        :type query_location_region_code: str
        :param query_asset_class: Matched asset class. (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because we use our domain  defined values for asset class --)
        :type query_asset_class: str
        :param page_size: The maximum value is 500. If unspecified, the default value is 200.
        :type page_size: int
        :param page_token: Default page token.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterTimeseriesSubjectsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'query_subject_id',
            'query_timeseries_category_id',
            'query_sub_category_id',
            'query_location_country_code',
            'query_location_region_code',
            'query_asset_class',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timeseries_subject_api_filter_timeseries_subjects" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query_subject_id') is not None:  # noqa: E501
            _query_params.append(('query.subjectId', _params['query_subject_id']))

        if _params.get('query_timeseries_category_id') is not None:  # noqa: E501
            _query_params.append(('query.timeseriesCategory.id', _params['query_timeseries_category_id']))

        if _params.get('query_sub_category_id') is not None:  # noqa: E501
            _query_params.append(('query.subCategory.id', _params['query_sub_category_id']))

        if _params.get('query_location_country_code') is not None:  # noqa: E501
            _query_params.append(('query.location.countryCode', _params['query_location_country_code']))

        if _params.get('query_location_region_code') is not None:  # noqa: E501
            _query_params.append(('query.location.regionCode', _params['query_location_region_code']))

        if _params.get('query_asset_class') is not None:  # noqa: E501
            _query_params.append(('query.assetClass', _params['query_asset_class']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterTimeseriesSubjectsResponse",
            '400': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '401': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '403': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '404': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
        }

        return self.api_client.call_api(
            '/subjects:filter', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def timeseries_subject_api_get_timeseries_subject(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="timeseries_subject id")], **kwargs) -> V1TimeseriesSubject:  # noqa: E501
        """Get TimeseriesSubject  # noqa: E501

        Get the metadata of an entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_get_timeseries_subject(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: timeseries_subject id (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1TimeseriesSubject
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the timeseries_subject_api_get_timeseries_subject_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.timeseries_subject_api_get_timeseries_subject_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def timeseries_subject_api_get_timeseries_subject_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="timeseries_subject id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get TimeseriesSubject  # noqa: E501

        Get the metadata of an entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_get_timeseries_subject_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: timeseries_subject id (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1TimeseriesSubject, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timeseries_subject_api_get_timeseries_subject" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1TimeseriesSubject",
            '400': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '401': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '403': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '404': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
        }

        return self.api_client.call_api(
            '/subject/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def timeseries_subject_api_list_timeseries_subjects(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum value is 500. If unspecified, the default value is 200.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="Default page token.")] = None, **kwargs) -> V1ListTimeseriesSubjectsResponse:  # noqa: E501
        """List TimeseriesSubject  # noqa: E501

        List the metadata of all the entities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_list_timeseries_subjects(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param page_size: The maximum value is 500. If unspecified, the default value is 200.
        :type page_size: int
        :param page_token: Default page token.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListTimeseriesSubjectsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the timeseries_subject_api_list_timeseries_subjects_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.timeseries_subject_api_list_timeseries_subjects_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def timeseries_subject_api_list_timeseries_subjects_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum value is 500. If unspecified, the default value is 200.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="Default page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List TimeseriesSubject  # noqa: E501

        List the metadata of all the entities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_list_timeseries_subjects_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param page_size: The maximum value is 500. If unspecified, the default value is 200.
        :type page_size: int
        :param page_token: Default page token.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListTimeseriesSubjectsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timeseries_subject_api_list_timeseries_subjects" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListTimeseriesSubjectsResponse",
            '400': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '401': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '403': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '404': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
        }

        return self.api_client.call_api(
            '/subjects', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def timeseries_subject_api_update_timeseries_subject(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], timeseries_subject_id : Annotated[StrictStr, Field(..., description="Entity or Subject ID.  Example: `SPX Index`")], body : Annotated[V1TimeseriesSubject, Field(..., description="TimeseriesSubject object")], update_mask : Annotated[Optional[StrictStr], Field(description="List of fields to be updated.")] = None, **kwargs) -> V1TimeseriesSubject:  # noqa: E501
        """Update TimeseriesSubject  # noqa: E501

        Update the metadata of an entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_update_timeseries_subject(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, timeseries_subject_id, body, update_mask, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param timeseries_subject_id: Entity or Subject ID.  Example: `SPX Index` (required)
        :type timeseries_subject_id: str
        :param body: TimeseriesSubject object (required)
        :type body: V1TimeseriesSubject
        :param update_mask: List of fields to be updated.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1TimeseriesSubject
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the timeseries_subject_api_update_timeseries_subject_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.timeseries_subject_api_update_timeseries_subject_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, timeseries_subject_id, body, update_mask, **kwargs)  # noqa: E501

    @validate_arguments
    def timeseries_subject_api_update_timeseries_subject_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], timeseries_subject_id : Annotated[StrictStr, Field(..., description="Entity or Subject ID.  Example: `SPX Index`")], body : Annotated[V1TimeseriesSubject, Field(..., description="TimeseriesSubject object")], update_mask : Annotated[Optional[StrictStr], Field(description="List of fields to be updated.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update TimeseriesSubject  # noqa: E501

        Update the metadata of an entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.timeseries_subject_api_update_timeseries_subject_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, timeseries_subject_id, body, update_mask, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param timeseries_subject_id: Entity or Subject ID.  Example: `SPX Index` (required)
        :type timeseries_subject_id: str
        :param body: TimeseriesSubject object (required)
        :type body: V1TimeseriesSubject
        :param update_mask: List of fields to be updated.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1TimeseriesSubject, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'timeseries_subject_id',
            'body',
            'update_mask'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timeseries_subject_api_update_timeseries_subject" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['timeseries_subject_id']:
            _path_params['timeseriesSubject.id'] = _params['timeseries_subject_id']


        # process the query parameters
        _query_params = []
        if _params.get('update_mask') is not None:  # noqa: E501
            _query_params.append(('updateMask', _params['update_mask']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1TimeseriesSubject",
            '400': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '401': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '403': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
            '404': "TimeseriesSubjectAPIGetTimeseriesSubject400Response",
        }

        return self.api_client.call_api(
            '/subject/{timeseriesSubject.id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
