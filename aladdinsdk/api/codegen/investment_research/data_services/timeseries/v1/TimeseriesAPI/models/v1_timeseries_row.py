# coding: utf-8

"""
    Timeseries

    Timeseries offers a unified interface for researchers to retrieve, update and delete timeseries data that are stored in Snowflake.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class V1TimeseriesRow(BaseModel):
    """
    V1TimeseriesRow
    """
    effective_date: Optional[date] = Field(None, alias="effectiveDate")
    value_date: Optional[date] = Field(None, alias="valueDate")
    value: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["effectiveDate", "valueDate", "value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TimeseriesRow:
        """Create an instance of V1TimeseriesRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TimeseriesRow:
        """Create an instance of V1TimeseriesRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TimeseriesRow.parse_obj(obj)

        _obj = V1TimeseriesRow.parse_obj({
            "effective_date": obj.get("effectiveDate"),
            "value_date": obj.get("valueDate"),
            "value": obj.get("value")
        })
        return _obj

