# coding: utf-8

"""
    Timeseries Bulk Retrieval

    Timeseries Bulk Retrieval offers the capability to retrieve, and filter more than one timeseries at once.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Timeseriesv1Location(BaseModel):
    """
    Timeseriesv1Location
    """
    country_code: Optional[StrictStr] = Field(None, alias="countryCode", description="Two letter country code.  Example: `AF`, `ZA`")
    region_code: Optional[StrictStr] = Field(None, alias="regionCode", description="Example: `Global`, `APAC`, `EMEA`, `LATAM`, `NA`")
    __properties = ["countryCode", "regionCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Timeseriesv1Location:
        """Create an instance of Timeseriesv1Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Timeseriesv1Location:
        """Create an instance of Timeseriesv1Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Timeseriesv1Location.parse_obj(obj)

        _obj = Timeseriesv1Location.parse_obj({
            "country_code": obj.get("countryCode"),
            "region_code": obj.get("regionCode")
        })
        return _obj

