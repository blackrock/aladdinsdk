# coding: utf-8

"""
    Timeseries Measure

    As a part of the timeseries metadata, timeseries Measure offers the capability to handle timeseries measure (ex. price, volume) metadata information.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesMeasureAPI.models.v1_timeseries_category import V1TimeseriesCategory

class V1TimeseriesMeasureQuery(BaseModel):
    """
    The query required to perform a search query.  (-- api-linter: core::0123::resource-annotation=disabled  aip.dev/not-precedent: This is a query structure ... --)
    """
    id: Optional[StrictStr] = None
    description: Optional[StrictStr] = Field(None, description="(-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because description is a field to describe a measure --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this resource conflicts with another that is not in our domain --)")
    timeseries_category: Optional[V1TimeseriesCategory] = Field(None, alias="timeseriesCategory")
    sub_category1: Optional[V1TimeseriesCategory] = Field(None, alias="subCategory1")
    sub_category2: Optional[V1TimeseriesCategory] = Field(None, alias="subCategory2")
    sub_category3: Optional[V1TimeseriesCategory] = Field(None, alias="subCategory3")
    __properties = ["id", "description", "timeseriesCategory", "subCategory1", "subCategory2", "subCategory3"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TimeseriesMeasureQuery:
        """Create an instance of V1TimeseriesMeasureQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of timeseries_category
        if self.timeseries_category:
            _dict['timeseriesCategory'] = self.timeseries_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_category1
        if self.sub_category1:
            _dict['subCategory1'] = self.sub_category1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_category2
        if self.sub_category2:
            _dict['subCategory2'] = self.sub_category2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_category3
        if self.sub_category3:
            _dict['subCategory3'] = self.sub_category3.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TimeseriesMeasureQuery:
        """Create an instance of V1TimeseriesMeasureQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TimeseriesMeasureQuery.parse_obj(obj)

        _obj = V1TimeseriesMeasureQuery.parse_obj({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "timeseries_category": V1TimeseriesCategory.from_dict(obj.get("timeseriesCategory")) if obj.get("timeseriesCategory") is not None else None,
            "sub_category1": V1TimeseriesCategory.from_dict(obj.get("subCategory1")) if obj.get("subCategory1") is not None else None,
            "sub_category2": V1TimeseriesCategory.from_dict(obj.get("subCategory2")) if obj.get("subCategory2") is not None else None,
            "sub_category3": V1TimeseriesCategory.from_dict(obj.get("subCategory3")) if obj.get("subCategory3") is not None else None
        })
        return _obj

