# coding: utf-8

"""
    Timeseries Metadata

    Timeseries Metadata offers the capability to create, update, delete and search for metadata information about each timeseries data.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesMetadataAPI.models.type_date_time import TypeDateTime
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesMetadataAPI.models.v1_timeseries_document import V1TimeseriesDocument
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesMetadataAPI.models.v1_timeseries_filter import V1TimeseriesFilter
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesMetadataAPI.models.v1_vendor import V1Vendor

class V1TimeseriesMetadata(BaseModel):
    """
    V1TimeseriesMetadata
    """
    id: StrictStr = Field(..., description="Timeseries ID.  Timeseries name provided by users.  Format : `SUBJECT_ID.MEASURE_ID.FILTER`  Example : `SPX Index.PX_LAST`")
    uuid: Optional[StrictStr] = Field(None, description="Timeseries internal UUID auto-generated on creation.")
    timeseries_type: Optional[StrictStr] = Field(None, alias="timeseriesType", description="Example: `Curated`, `User_provided`")
    subject: StrictStr = Field(...)
    measure: StrictStr = Field(...)
    source: Optional[StrictStr] = Field(None, description="Data source of the measure.  Example: `MALT`")
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode", description="Currency of the Timeseries.   Example: `USD`")
    vendor: Optional[V1Vendor] = None
    frequency: Optional[StrictStr] = Field(None, description="Frequency of data.  Example: `Weekly`, `Daily`, `Monthly`, `Yearly` etc.  (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this resource conflicts with another that is not in our domain --)")
    filters: Optional[conlist(V1TimeseriesFilter)] = Field(None, description="(-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: This is a separate field in our domain --)")
    description: Optional[StrictStr] = Field(None, description="Timeseries description.  Example: `S&P 500 Index Last Price`  (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because decription denotes the description of a timeseries subject --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this resource conflicts  with another that is not in our domain --)")
    owner: StrictStr = Field(...)
    start_date: Optional[date] = Field(None, alias="startDate", description="Start date of Timeseries data.")
    end_date: Optional[date] = Field(None, alias="endDate", description="End date of Timeseries data.")
    update_user: Optional[StrictStr] = Field(None, alias="updateUser", description="Last updated by user.")
    last_update_time: Optional[TypeDateTime] = Field(None, alias="lastUpdateTime")
    owner_dl: StrictStr = Field(..., alias="ownerDl", description="Timeseries owner distribution list.")
    timeseries_document: Optional[V1TimeseriesDocument] = Field(None, alias="timeseriesDocument")
    __properties = ["id", "uuid", "timeseriesType", "subject", "measure", "source", "currencyCode", "vendor", "frequency", "filters", "description", "owner", "startDate", "endDate", "updateUser", "lastUpdateTime", "ownerDl", "timeseriesDocument"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TimeseriesMetadata:
        """Create an instance of V1TimeseriesMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "update_user",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item in self.filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_update_time
        if self.last_update_time:
            _dict['lastUpdateTime'] = self.last_update_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeseries_document
        if self.timeseries_document:
            _dict['timeseriesDocument'] = self.timeseries_document.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TimeseriesMetadata:
        """Create an instance of V1TimeseriesMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TimeseriesMetadata.parse_obj(obj)

        _obj = V1TimeseriesMetadata.parse_obj({
            "id": obj.get("id"),
            "uuid": obj.get("uuid"),
            "timeseries_type": obj.get("timeseriesType"),
            "subject": obj.get("subject"),
            "measure": obj.get("measure"),
            "source": obj.get("source"),
            "currency_code": obj.get("currencyCode"),
            "vendor": V1Vendor.from_dict(obj.get("vendor")) if obj.get("vendor") is not None else None,
            "frequency": obj.get("frequency"),
            "filters": [V1TimeseriesFilter.from_dict(_item) for _item in obj.get("filters")] if obj.get("filters") is not None else None,
            "description": obj.get("description"),
            "owner": obj.get("owner"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "update_user": obj.get("updateUser"),
            "last_update_time": TypeDateTime.from_dict(obj.get("lastUpdateTime")) if obj.get("lastUpdateTime") is not None else None,
            "owner_dl": obj.get("ownerDl"),
            "timeseries_document": V1TimeseriesDocument.from_dict(obj.get("timeseriesDocument")) if obj.get("timeseriesDocument") is not None else None
        })
        return _obj

