# coding: utf-8

"""
    Timeseries Metadata

    Timeseries Metadata offers the capability to create, update, delete and search for metadata information about each timeseries data.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesMetadataAPI.models.v1_timeseries_filter import V1TimeseriesFilter
from aladdinsdk.api.codegen.investment_research.data_services.timeseries.v1.TimeseriesMetadataAPI.models.v1_timeseries_schema import V1TimeseriesSchema

class V1TimeseriesDocument(BaseModel):
    """
    V1TimeseriesDocument
    """
    dataset_name: Optional[StrictStr] = Field(None, alias="datasetName", description="Name of the datset backing the view. Ex: MONEYDASHBOARD.")
    db_name: StrictStr = Field(..., alias="dbName")
    schema_name: StrictStr = Field(..., alias="schemaName")
    table_name: StrictStr = Field(..., alias="tableName")
    timeseries_schema: Optional[V1TimeseriesSchema] = Field(None, alias="timeseriesSchema")
    timeseries_filters: Optional[conlist(V1TimeseriesFilter)] = Field(None, alias="timeseriesFilters", description="List of optinal key-value pairs for filtering while curating a Timeseries.")
    __properties = ["datasetName", "dbName", "schemaName", "tableName", "timeseriesSchema", "timeseriesFilters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TimeseriesDocument:
        """Create an instance of V1TimeseriesDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of timeseries_schema
        if self.timeseries_schema:
            _dict['timeseriesSchema'] = self.timeseries_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in timeseries_filters (list)
        _items = []
        if self.timeseries_filters:
            for _item in self.timeseries_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['timeseriesFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TimeseriesDocument:
        """Create an instance of V1TimeseriesDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TimeseriesDocument.parse_obj(obj)

        _obj = V1TimeseriesDocument.parse_obj({
            "dataset_name": obj.get("datasetName"),
            "db_name": obj.get("dbName"),
            "schema_name": obj.get("schemaName"),
            "table_name": obj.get("tableName"),
            "timeseries_schema": V1TimeseriesSchema.from_dict(obj.get("timeseriesSchema")) if obj.get("timeseriesSchema") is not None else None,
            "timeseries_filters": [V1TimeseriesFilter.from_dict(_item) for _item in obj.get("timeseriesFilters")] if obj.get("timeseriesFilters") is not None else None
        })
        return _obj

