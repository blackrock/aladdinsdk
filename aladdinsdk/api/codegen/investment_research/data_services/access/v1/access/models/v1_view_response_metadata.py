# coding: utf-8

"""
    Data Access Service

    Allows for access to data stored in snowflake.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class V1ViewResponseMetadata(BaseModel):
    """
    This service lists parquet files and details from staging
    """
    operation_type: Optional[StrictStr] = Field(None, alias="operationType")
    query_start_time: Optional[datetime] = Field(None, alias="queryStartTime")
    query_end_time: Optional[datetime] = Field(None, alias="queryEndTime")
    cancel_requested: Optional[StrictBool] = Field(None, alias="cancelRequested")
    message: Optional[StrictStr] = None
    __properties = ["operationType", "queryStartTime", "queryEndTime", "cancelRequested", "message"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ViewResponseMetadata:
        """Create an instance of V1ViewResponseMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ViewResponseMetadata:
        """Create an instance of V1ViewResponseMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ViewResponseMetadata.parse_obj(obj)

        _obj = V1ViewResponseMetadata.parse_obj({
            "operation_type": obj.get("operationType"),
            "query_start_time": obj.get("queryStartTime"),
            "query_end_time": obj.get("queryEndTime"),
            "cancel_requested": obj.get("cancelRequested"),
            "message": obj.get("message")
        })
        return _obj

