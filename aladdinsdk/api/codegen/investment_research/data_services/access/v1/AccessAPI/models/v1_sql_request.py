# coding: utf-8

"""
    Data Access Service

    Allows for access to data stored in snowflake.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.data_services.access.v1.AccessAPI.models.v1_bind_variables import V1BindVariables

class V1SQLRequest(BaseModel):
    """
    This service takes in a query through sql statement
    """
    sql: StrictStr = Field(...)
    filter_bind_variables: Optional[conlist(V1BindVariables)] = Field(None, alias="filterBindVariables")
    snf_dataformat: Optional[StrictStr] = Field(None, alias="snfDataformat")
    snf_record_size: Optional[StrictInt] = Field(None, alias="snfRecordSize", description="Represents the size of the record from the table.")
    snf_time_out: Optional[StrictInt] = Field(None, alias="snfTimeOut", description="Represents time to time out a request to snowflake.")
    snf_role: Optional[StrictStr] = Field(None, alias="snfRole")
    snf_warehouse: Optional[StrictStr] = Field(None, alias="snfWarehouse")
    snf_database: Optional[StrictStr] = Field(None, alias="snfDatabase")
    snf_schema: Optional[StrictStr] = Field(None, alias="snfSchema")
    snf_max_file_size: Optional[StrictInt] = Field(None, alias="snfMaxFileSize", description="Represents the max file size allowed for the request from snowflake.")
    snf_partition: Optional[StrictStr] = Field(None, alias="snfPartition")
    __properties = ["sql", "filterBindVariables", "snfDataformat", "snfRecordSize", "snfTimeOut", "snfRole", "snfWarehouse", "snfDatabase", "snfSchema", "snfMaxFileSize", "snfPartition"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SQLRequest:
        """Create an instance of V1SQLRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in filter_bind_variables (list)
        _items = []
        if self.filter_bind_variables:
            for _item in self.filter_bind_variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filterBindVariables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SQLRequest:
        """Create an instance of V1SQLRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SQLRequest.parse_obj(obj)

        _obj = V1SQLRequest.parse_obj({
            "sql": obj.get("sql"),
            "filter_bind_variables": [V1BindVariables.from_dict(_item) for _item in obj.get("filterBindVariables")] if obj.get("filterBindVariables") is not None else None,
            "snf_dataformat": obj.get("snfDataformat"),
            "snf_record_size": obj.get("snfRecordSize"),
            "snf_time_out": obj.get("snfTimeOut"),
            "snf_role": obj.get("snfRole"),
            "snf_warehouse": obj.get("snfWarehouse"),
            "snf_database": obj.get("snfDatabase"),
            "snf_schema": obj.get("snfSchema"),
            "snf_max_file_size": obj.get("snfMaxFileSize"),
            "snf_partition": obj.get("snfPartition")
        })
        return _obj

