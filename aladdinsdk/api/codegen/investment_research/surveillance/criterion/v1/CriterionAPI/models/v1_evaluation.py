# coding: utf-8

"""
    Criterion

    Create, modify, delete, search and evaluate criteria.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictBool
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.v1_data_collection import V1DataCollection

class V1Evaluation(BaseModel):
    """
    V1Evaluation
    """
    exist: Optional[StrictBool] = None
    metadata: Optional[Dict[str, V1DataCollection]] = None
    __properties = ["exist", "metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Evaluation:
        """Create an instance of V1Evaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in metadata (dict)
        _field_dict = {}
        if self.metadata:
            for _key in self.metadata:
                if self.metadata[_key]:
                    _field_dict[_key] = self.metadata[_key].to_dict()
            _dict['metadata'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Evaluation:
        """Create an instance of V1Evaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Evaluation.parse_obj(obj)

        _obj = V1Evaluation.parse_obj({
            "exist": obj.get("exist"),
            "metadata": dict(
                (_k, V1DataCollection.from_dict(_v))
                for _k, _v in obj.get("metadata").items()
            )
            if obj.get("metadata") is not None
            else None
        })
        return _obj

