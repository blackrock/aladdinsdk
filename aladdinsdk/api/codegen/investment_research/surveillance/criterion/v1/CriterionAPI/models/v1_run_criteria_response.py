# coding: utf-8

"""
    Criterion

    Create, modify, delete, search and evaluate criteria.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.v1_evaluation import V1Evaluation

class V1RunCriteriaResponse(BaseModel):
    """
    V1RunCriteriaResponse
    """
    evaluations: Dict[str, V1Evaluation] = Field(..., description="result mapping, from criterion ids to results (true/false).")
    __properties = ["evaluations"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RunCriteriaResponse:
        """Create an instance of V1RunCriteriaResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in evaluations (dict)
        _field_dict = {}
        if self.evaluations:
            for _key in self.evaluations:
                if self.evaluations[_key]:
                    _field_dict[_key] = self.evaluations[_key].to_dict()
            _dict['evaluations'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RunCriteriaResponse:
        """Create an instance of V1RunCriteriaResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RunCriteriaResponse.parse_obj(obj)

        _obj = V1RunCriteriaResponse.parse_obj({
            "evaluations": dict(
                (_k, V1Evaluation.from_dict(_v))
                for _k, _v in obj.get("evaluations").items()
            )
            if obj.get("evaluations") is not None
            else None
        })
        return _obj

