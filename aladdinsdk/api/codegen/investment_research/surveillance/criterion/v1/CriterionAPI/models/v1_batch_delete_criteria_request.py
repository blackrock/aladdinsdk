# coding: utf-8

"""
    Criterion

    Create, modify, delete, search and evaluate criteria.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.enums_criterion_type import EnumsCriterionType
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.types_entity_id import TypesEntityId

class V1BatchDeleteCriteriaRequest(BaseModel):
    """
    The request message for CriterionAPI.BatchDeleteCriteria.
    """
    criterion_ids: Optional[conlist(StrictStr)] = Field(None, alias="criterionIds", description="Criterion ids to delete.")
    types: Optional[conlist(EnumsCriterionType)] = Field(None, description="Criterion types to delete.")
    list_ids: Optional[conlist(StrictStr)] = Field(None, alias="listIds", description="Criteria of list id to delete.")
    owner_ids: Optional[conlist(StrictStr)] = Field(None, alias="ownerIds", description="Criteria by owners to delete.")
    entity_ids: Optional[conlist(TypesEntityId)] = Field(None, alias="entityIds", description="Criteria of entity ids to delete.")
    __properties = ["criterionIds", "types", "listIds", "ownerIds", "entityIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BatchDeleteCriteriaRequest:
        """Create an instance of V1BatchDeleteCriteriaRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in entity_ids (list)
        _items = []
        if self.entity_ids:
            for _item in self.entity_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['entityIds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BatchDeleteCriteriaRequest:
        """Create an instance of V1BatchDeleteCriteriaRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BatchDeleteCriteriaRequest.parse_obj(obj)

        _obj = V1BatchDeleteCriteriaRequest.parse_obj({
            "criterion_ids": obj.get("criterionIds"),
            "types": obj.get("types"),
            "list_ids": obj.get("listIds"),
            "owner_ids": obj.get("ownerIds"),
            "entity_ids": [TypesEntityId.from_dict(_item) for _item in obj.get("entityIds")] if obj.get("entityIds") is not None else None
        })
        return _obj

