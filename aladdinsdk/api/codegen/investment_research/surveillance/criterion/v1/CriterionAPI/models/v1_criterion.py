# coding: utf-8

"""
    Criterion

    Create, modify, delete, search and evaluate criteria.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.enums_criterion_type import EnumsCriterionType
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.enums_notification_frequency import EnumsNotificationFrequency
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.types_criterion_recipient import TypesCriterionRecipient
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.types_data_value import TypesDataValue
from aladdinsdk.api.codegen.investment_research.surveillance.criterion.v1.CriterionAPI.models.types_entity_id import TypesEntityId

class V1Criterion(BaseModel):
    """
    Criterion describes...
    """
    id: Optional[StrictStr] = None
    type: Optional[EnumsCriterionType] = None
    list_id: Optional[StrictStr] = Field(None, alias="listId")
    entity_id: Optional[TypesEntityId] = Field(None, alias="entityId")
    criteria: Optional[StrictStr] = None
    start_date: Optional[date] = Field(None, alias="startDate")
    end_date: Optional[date] = Field(None, alias="endDate")
    latest_evaluation_time: Optional[datetime] = Field(None, alias="latestEvaluationTime")
    latest_alert_time: Optional[datetime] = Field(None, alias="latestAlertTime")
    update_time: Optional[datetime] = Field(None, alias="updateTime")
    owner_id: Optional[StrictStr] = Field(None, alias="ownerId")
    recipients: Optional[conlist(TypesCriterionRecipient)] = None
    alert_frequency: Optional[StrictInt] = Field(None, alias="alertFrequency")
    alert_frequency_unit: Optional[EnumsNotificationFrequency] = Field(None, alias="alertFrequencyUnit")
    rolling: Optional[StrictBool] = None
    parameters: Optional[Dict[str, TypesDataValue]] = None
    __properties = ["id", "type", "listId", "entityId", "criteria", "startDate", "endDate", "latestEvaluationTime", "latestAlertTime", "updateTime", "ownerId", "recipients", "alertFrequency", "alertFrequencyUnit", "rolling", "parameters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Criterion:
        """Create an instance of V1Criterion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of entity_id
        if self.entity_id:
            _dict['entityId'] = self.entity_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key in self.parameters:
                if self.parameters[_key]:
                    _field_dict[_key] = self.parameters[_key].to_dict()
            _dict['parameters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Criterion:
        """Create an instance of V1Criterion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Criterion.parse_obj(obj)

        _obj = V1Criterion.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "list_id": obj.get("listId"),
            "entity_id": TypesEntityId.from_dict(obj.get("entityId")) if obj.get("entityId") is not None else None,
            "criteria": obj.get("criteria"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "latest_evaluation_time": obj.get("latestEvaluationTime"),
            "latest_alert_time": obj.get("latestAlertTime"),
            "update_time": obj.get("updateTime"),
            "owner_id": obj.get("ownerId"),
            "recipients": [TypesCriterionRecipient.from_dict(_item) for _item in obj.get("recipients")] if obj.get("recipients") is not None else None,
            "alert_frequency": obj.get("alertFrequency"),
            "alert_frequency_unit": obj.get("alertFrequencyUnit"),
            "rolling": obj.get("rolling"),
            "parameters": dict(
                (_k, TypesDataValue.from_dict(_v))
                for _k, _v in obj.get("parameters").items()
            )
            if obj.get("parameters") is not None
            else None
        })
        return _obj

