# coding: utf-8

"""
    Investment Watchlist

    Create, modify, delete, and retrieve watchlists; Add and remove securities from watchlist.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.investment_research.surveillance.watchlist.v1.WatchlistAPI.models.v1_watched_security import V1WatchedSecurity

class V1Watchlist(BaseModel):
    """
    Watchlist describes...
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have a 'id' field.  Id describes the computer or human assigned resource identifier.")
    title: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = Field(None, alias="ownerId")
    securities: Optional[conlist(V1WatchedSecurity)] = None
    modified_time: Optional[datetime] = Field(None, alias="modifiedTime")
    shareable: Optional[StrictBool] = None
    column_tags: Optional[conlist(StrictStr)] = Field(None, alias="columnTags")
    description: Optional[StrictStr] = None
    __properties = ["id", "title", "ownerId", "securities", "modifiedTime", "shareable", "columnTags", "description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Watchlist:
        """Create an instance of V1Watchlist from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in securities (list)
        _items = []
        if self.securities:
            for _item in self.securities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['securities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Watchlist:
        """Create an instance of V1Watchlist from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Watchlist.parse_obj(obj)

        _obj = V1Watchlist.parse_obj({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "owner_id": obj.get("ownerId"),
            "securities": [V1WatchedSecurity.from_dict(_item) for _item in obj.get("securities")] if obj.get("securities") is not None else None,
            "modified_time": obj.get("modifiedTime"),
            "shareable": obj.get("shareable"),
            "column_tags": obj.get("columnTags"),
            "description": obj.get("description")
        })
        return _obj

