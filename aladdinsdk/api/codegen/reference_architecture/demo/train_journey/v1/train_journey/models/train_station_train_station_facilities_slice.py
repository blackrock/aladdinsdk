# coding: utf-8

"""
    Train Journey

    Demonstrate feature of Aladdin Graph services using train journeys, stations and trains.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class TrainStationTrainStationFacilitiesSlice(BaseModel):
    """
    A train station facilities slice that represents a specific set of properties of  a train station describing facilities.
    """
    train_station_id: Optional[StrictStr] = Field(None, alias="trainStationId")
    short_code: Optional[StrictStr] = Field(None, alias="shortCode")
    restroom_count: Optional[StrictInt] = Field(None, alias="restroomCount")
    cafe_count: Optional[StrictInt] = Field(None, alias="cafeCount")
    step_free_access: Optional[StrictBool] = Field(None, alias="stepFreeAccess")
    ticket_machine_count: Optional[StrictInt] = Field(None, alias="ticketMachineCount")
    __properties = ["trainStationId", "shortCode", "restroomCount", "cafeCount", "stepFreeAccess", "ticketMachineCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrainStationTrainStationFacilitiesSlice:
        """Create an instance of TrainStationTrainStationFacilitiesSlice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrainStationTrainStationFacilitiesSlice:
        """Create an instance of TrainStationTrainStationFacilitiesSlice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrainStationTrainStationFacilitiesSlice.parse_obj(obj)

        _obj = TrainStationTrainStationFacilitiesSlice.parse_obj({
            "train_station_id": obj.get("trainStationId"),
            "short_code": obj.get("shortCode"),
            "restroom_count": obj.get("restroomCount"),
            "cafe_count": obj.get("cafeCount"),
            "step_free_access": obj.get("stepFreeAccess"),
            "ticket_machine_count": obj.get("ticketMachineCount")
        })
        return _obj

