# coding: utf-8

"""
    Train Journey

    Demonstrate feature of Aladdin Graph services using train journeys, stations and trains.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.reference_architecture.demo.train_journey.v1.TrainJourneyAPI.models.enums_region import EnumsRegion
from aladdinsdk.api.codegen.reference_architecture.demo.train_journey.v1.TrainJourneyAPI.models.enums_size import EnumsSize

class TrainStationTrainStationSummarySlice(BaseModel):
    """
    A train station summary slice that represents a summary set of properties of a train station.
    """
    train_station_id: Optional[StrictStr] = Field(None, alias="trainStationId")
    short_code: Optional[StrictStr] = Field(None, alias="shortCode")
    display_name: Optional[StrictStr] = Field(None, alias="displayName")
    region: Optional[EnumsRegion] = None
    size: Optional[EnumsSize] = None
    __properties = ["trainStationId", "shortCode", "displayName", "region", "size"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrainStationTrainStationSummarySlice:
        """Create an instance of TrainStationTrainStationSummarySlice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrainStationTrainStationSummarySlice:
        """Create an instance of TrainStationTrainStationSummarySlice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrainStationTrainStationSummarySlice.parse_obj(obj)

        _obj = TrainStationTrainStationSummarySlice.parse_obj({
            "train_station_id": obj.get("trainStationId"),
            "short_code": obj.get("shortCode"),
            "display_name": obj.get("displayName"),
            "region": obj.get("region"),
            "size": obj.get("size")
        })
        return _obj

