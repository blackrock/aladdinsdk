# coding: utf-8

"""
    Train Journey

    Demonstrate feature of Aladdin Graph services using train journeys, stations and trains.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.reference_architecture.demo.train_journey.v1.TrainJourneyAPI.models.enums_train_type import EnumsTrainType

class V1TrainJourneyQuery(BaseModel):
    """
    The query required to perform a search query.
    """
    departing_station_id: Optional[StrictStr] = Field(None, alias="departingStationId", description="This cretirion specifies the id of the departing train station.")
    destination_station_id: Optional[StrictStr] = Field(None, alias="destinationStationId", description="This cretirion specifies the id of the destination train station.")
    train_types: Optional[conlist(EnumsTrainType)] = Field(None, alias="trainTypes", description="This cretirion specifies the train types to search against. If no values are provided, it will default to all.")
    excluded_station_ids: Optional[conlist(StrictStr)] = Field(None, alias="excludedStationIds", description="This cretirion specifies a list of station ids, to exclude from the search train journey passing through.  At most 5 excluded station ids are allowed.")
    __properties = ["departingStationId", "destinationStationId", "trainTypes", "excludedStationIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TrainJourneyQuery:
        """Create an instance of V1TrainJourneyQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TrainJourneyQuery:
        """Create an instance of V1TrainJourneyQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TrainJourneyQuery.parse_obj(obj)

        _obj = V1TrainJourneyQuery.parse_obj({
            "departing_station_id": obj.get("departingStationId"),
            "destination_station_id": obj.get("destinationStationId"),
            "train_types": obj.get("trainTypes"),
            "excluded_station_ids": obj.get("excludedStationIds")
        })
        return _obj

