# coding: utf-8

"""
    Adc Virtual Warehouse

    Manages Virtual Warehouses for Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_adc_virtual_warehouse_scaling_policy import V1AdcVirtualWarehouseScalingPolicy
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_adc_virtual_warehouse_size import V1AdcVirtualWarehouseSize
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_adc_virtual_warehouse_type import V1AdcVirtualWarehouseType

class V1AdcVirtualWarehouse(BaseModel):
    """
    V1AdcVirtualWarehouse
    """
    id: Optional[StrictStr] = Field(None, description="id describes the Virtual warehouse name.")
    name: Optional[StrictStr] = Field(None, description="name describes the Virtual warehouse name.")
    size: Optional[V1AdcVirtualWarehouseSize] = None
    type: Optional[V1AdcVirtualWarehouseType] = None
    auto_suspend: StrictInt = Field(..., alias="autoSuspend", description="auto_suspend describes the maximum idle time before the warehouse will be automatically suspended.")
    auto_resume: Optional[StrictBool] = Field(None, alias="autoResume", description="auto_resume describes if the Virtual warehouse will be resumed automatically or not.")
    min_cluster_count: Optional[StrictInt] = Field(None, alias="minClusterCount", description="min_cluster_count describes the number of minimum active clusters that will be turned ON.")
    max_cluster_count: Optional[StrictInt] = Field(None, alias="maxClusterCount", description="max_cluster_count describes the number of maximum active clusters that will be turned ON.")
    scaling_policy: Optional[V1AdcVirtualWarehouseScalingPolicy] = Field(None, alias="scalingPolicy")
    initially_suspended: Optional[StrictBool] = Field(None, alias="initiallySuspended", description="initially_suspended describes if the Virtual warehouse will be suspended on creation and only first turned ON while being used.")
    comment: Optional[StrictStr] = Field(None, description="comment describes any comments associate to the Virtual warehouse.")
    __properties = ["id", "name", "size", "type", "autoSuspend", "autoResume", "minClusterCount", "maxClusterCount", "scalingPolicy", "initiallySuspended", "comment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AdcVirtualWarehouse:
        """Create an instance of V1AdcVirtualWarehouse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AdcVirtualWarehouse:
        """Create an instance of V1AdcVirtualWarehouse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AdcVirtualWarehouse.parse_obj(obj)

        _obj = V1AdcVirtualWarehouse.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "size": obj.get("size"),
            "type": obj.get("type"),
            "auto_suspend": obj.get("autoSuspend"),
            "auto_resume": obj.get("autoResume"),
            "min_cluster_count": obj.get("minClusterCount"),
            "max_cluster_count": obj.get("maxClusterCount"),
            "scaling_policy": obj.get("scalingPolicy"),
            "initially_suspended": obj.get("initiallySuspended"),
            "comment": obj.get("comment")
        })
        return _obj

