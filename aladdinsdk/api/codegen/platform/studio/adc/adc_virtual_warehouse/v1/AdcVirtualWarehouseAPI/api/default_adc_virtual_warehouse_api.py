# coding: utf-8

"""
    Adc Virtual Warehouse

    Manages Virtual Warehouses for Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictInt, StrictStr

from typing import Any, Dict, Optional

from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_activate_adc_virtual_warehouse_request import V1ActivateAdcVirtualWarehouseRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_adc_virtual_warehouse import V1AdcVirtualWarehouse
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_list_adc_virtual_warehouses_response import V1ListAdcVirtualWarehousesResponse
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_list_all_permissioned_adc_virtual_warehouse_response import V1ListAllPermissionedAdcVirtualWarehouseResponse
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_resume_adc_virtual_warehouse_request import V1ResumeAdcVirtualWarehouseRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_resume_adc_virtual_warehouse_response import V1ResumeAdcVirtualWarehouseResponse
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_suspend_adc_virtual_warehouse_request import V1SuspendAdcVirtualWarehouseRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.models.v1_suspend_adc_virtual_warehouse_response import V1SuspendAdcVirtualWarehouseResponse

from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.api_client import ApiClient
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.platform.studio.adc.adc_virtual_warehouse.v1.AdcVirtualWarehouseAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultAdcVirtualWarehouseAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def adc_virtual_warehouse_api_activate_adc_virtual_warehouse(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ActivateAdcVirtualWarehouseRequest, **kwargs) -> object:  # noqa: E501
        """Sets a default virtual warehouse  # noqa: E501

        Sets a default virtual warehouse for user Caller of API will be validated to determine if user is in ADC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_activate_adc_virtual_warehouse(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ActivateAdcVirtualWarehouseRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_virtual_warehouse_api_activate_adc_virtual_warehouse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_virtual_warehouse_api_activate_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_virtual_warehouse_api_activate_adc_virtual_warehouse_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ActivateAdcVirtualWarehouseRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Sets a default virtual warehouse  # noqa: E501

        Sets a default virtual warehouse for user Caller of API will be validated to determine if user is in ADC  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_activate_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ActivateAdcVirtualWarehouseRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_virtual_warehouse_api_activate_adc_virtual_warehouse" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '401': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '403': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '404': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
        }

        return self.api_client.call_api(
            '/adcVirtualWarehouse:activate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_virtual_warehouse_api_create_adc_virtual_warehouse(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1AdcVirtualWarehouse, Field(..., description="adc_virtual_warehouse to create.")], **kwargs) -> V1AdcVirtualWarehouse:  # noqa: E501
        """Creates an ADC Virtual Warehouse  # noqa: E501

        The use of this operation requires \"StudioAdmin\" Aladdin perm assigned. If a warehouse already exists, return code AlreadyExists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_create_adc_virtual_warehouse(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: adc_virtual_warehouse to create. (required)
        :type body: V1AdcVirtualWarehouse
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1AdcVirtualWarehouse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_virtual_warehouse_api_create_adc_virtual_warehouse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_virtual_warehouse_api_create_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_virtual_warehouse_api_create_adc_virtual_warehouse_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1AdcVirtualWarehouse, Field(..., description="adc_virtual_warehouse to create.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Creates an ADC Virtual Warehouse  # noqa: E501

        The use of this operation requires \"StudioAdmin\" Aladdin perm assigned. If a warehouse already exists, return code AlreadyExists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_create_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: adc_virtual_warehouse to create. (required)
        :type body: V1AdcVirtualWarehouse
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1AdcVirtualWarehouse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_virtual_warehouse_api_create_adc_virtual_warehouse" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1AdcVirtualWarehouse",
            '400': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '401': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '403': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '404': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
        }

        return self.api_client.call_api(
            '/adcVirtualWarehouses', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_virtual_warehouse_api_delete_adc_virtual_warehouse(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Name of the ADC Virtual Warehouse")], **kwargs) -> object:  # noqa: E501
        """Deletes an ADC Virtual Warehouse  # noqa: E501

        Deletes an ADC Virtual Warehouse If not present, return code NotFound This endpoint performs a hard delete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_delete_adc_virtual_warehouse(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Name of the ADC Virtual Warehouse (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_virtual_warehouse_api_delete_adc_virtual_warehouse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_virtual_warehouse_api_delete_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_virtual_warehouse_api_delete_adc_virtual_warehouse_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Name of the ADC Virtual Warehouse")], **kwargs) -> ApiResponse:  # noqa: E501
        """Deletes an ADC Virtual Warehouse  # noqa: E501

        Deletes an ADC Virtual Warehouse If not present, return code NotFound This endpoint performs a hard delete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_delete_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Name of the ADC Virtual Warehouse (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_virtual_warehouse_api_delete_adc_virtual_warehouse" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '401': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '403': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '404': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
        }

        return self.api_client.call_api(
            '/adcVirtualWarehouses/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_virtual_warehouse_api_list_adc_virtual_warehouses(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], role : Annotated[Optional[StrictStr], Field(description="user role (-- api-linter: core::0132::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because the warehouses are determined based on the input role --).")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of ADC Virtual Warehouses to return. The service may return fewer than this value. If unspecified, at most X ADC Virtual Warehouses will be returned. The maximum value is Y; values above Y will be coerced to Y.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous 'ListAdcVirtualWarehouses' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'ListAdcVirtualWarehouses' must match the call that provided the page token.")] = None, **kwargs) -> V1ListAdcVirtualWarehousesResponse:  # noqa: E501
        """Lists ADC Virtual Warehouses  # noqa: E501

        Lists ADC Virtual Warehouses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_list_adc_virtual_warehouses(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, role, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param role: user role (-- api-linter: core::0132::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because the warehouses are determined based on the input role --).
        :type role: str
        :param page_size: The maximum number of ADC Virtual Warehouses to return. The service may return fewer than this value. If unspecified, at most X ADC Virtual Warehouses will be returned. The maximum value is Y; values above Y will be coerced to Y.
        :type page_size: int
        :param page_token: A page token, received from a previous 'ListAdcVirtualWarehouses' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'ListAdcVirtualWarehouses' must match the call that provided the page token.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListAdcVirtualWarehousesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_virtual_warehouse_api_list_adc_virtual_warehouses_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_virtual_warehouse_api_list_adc_virtual_warehouses_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, role, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_virtual_warehouse_api_list_adc_virtual_warehouses_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], role : Annotated[Optional[StrictStr], Field(description="user role (-- api-linter: core::0132::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because the warehouses are determined based on the input role --).")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of ADC Virtual Warehouses to return. The service may return fewer than this value. If unspecified, at most X ADC Virtual Warehouses will be returned. The maximum value is Y; values above Y will be coerced to Y.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous 'ListAdcVirtualWarehouses' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'ListAdcVirtualWarehouses' must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Lists ADC Virtual Warehouses  # noqa: E501

        Lists ADC Virtual Warehouses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_list_adc_virtual_warehouses_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, role, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param role: user role (-- api-linter: core::0132::request-unknown-fields=disabled  aip.dev/not-precedent: We need to do this because the warehouses are determined based on the input role --).
        :type role: str
        :param page_size: The maximum number of ADC Virtual Warehouses to return. The service may return fewer than this value. If unspecified, at most X ADC Virtual Warehouses will be returned. The maximum value is Y; values above Y will be coerced to Y.
        :type page_size: int
        :param page_token: A page token, received from a previous 'ListAdcVirtualWarehouses' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'ListAdcVirtualWarehouses' must match the call that provided the page token.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListAdcVirtualWarehousesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'role',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_virtual_warehouse_api_list_adc_virtual_warehouses" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('role') is not None:  # noqa: E501
            _query_params.append(('role', _params['role']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListAdcVirtualWarehousesResponse",
            '400': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '401': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '403': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '404': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
        }

        return self.api_client.call_api(
            '/adcVirtualWarehouses', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_virtual_warehouse_api_list_all_permissioned_adc_virtual_warehouse(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of pairs consisting of role and its corresponding accessible warehouses to be returned. If unspecified, at most 50 values will be returned. The maximum value is 50; values above 50 will be coerced to 50.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous 'ListAllPermissionedAdcVirtualWarehouses' call. Provide this to retrieve the subsequent page.")] = None, **kwargs) -> V1ListAllPermissionedAdcVirtualWarehouseResponse:  # noqa: E501
        """Lists warehouses accessible to each functional role  # noqa: E501

        Custom method to obtain all the accessible warehouses to each role that user possess  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_list_all_permissioned_adc_virtual_warehouse(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param page_size: The maximum number of pairs consisting of role and its corresponding accessible warehouses to be returned. If unspecified, at most 50 values will be returned. The maximum value is 50; values above 50 will be coerced to 50.
        :type page_size: int
        :param page_token: A page token, received from a previous 'ListAllPermissionedAdcVirtualWarehouses' call. Provide this to retrieve the subsequent page.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListAllPermissionedAdcVirtualWarehouseResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_virtual_warehouse_api_list_all_permissioned_adc_virtual_warehouse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_virtual_warehouse_api_list_all_permissioned_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_virtual_warehouse_api_list_all_permissioned_adc_virtual_warehouse_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of pairs consisting of role and its corresponding accessible warehouses to be returned. If unspecified, at most 50 values will be returned. The maximum value is 50; values above 50 will be coerced to 50.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous 'ListAllPermissionedAdcVirtualWarehouses' call. Provide this to retrieve the subsequent page.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Lists warehouses accessible to each functional role  # noqa: E501

        Custom method to obtain all the accessible warehouses to each role that user possess  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_list_all_permissioned_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, page_size, page_token, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param page_size: The maximum number of pairs consisting of role and its corresponding accessible warehouses to be returned. If unspecified, at most 50 values will be returned. The maximum value is 50; values above 50 will be coerced to 50.
        :type page_size: int
        :param page_token: A page token, received from a previous 'ListAllPermissionedAdcVirtualWarehouses' call. Provide this to retrieve the subsequent page.
        :type page_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListAllPermissionedAdcVirtualWarehouseResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_virtual_warehouse_api_list_all_permissioned_adc_virtual_warehouse" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListAllPermissionedAdcVirtualWarehouseResponse",
            '400': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '401': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '403': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '404': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
        }

        return self.api_client.call_api(
            '/adcVirtualWarehouse:list', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_virtual_warehouse_api_resume_adc_virtual_warehouse(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ResumeAdcVirtualWarehouseRequest, **kwargs) -> V1ResumeAdcVirtualWarehouseResponse:  # noqa: E501
        """Resumes a warehouse  # noqa: E501

        Custom method to resume all the warehouses provided in request. To be used to manage credit consumption. (-- api-linter: aladdin::9002::wordslist-custom-method-rpc=disabled  aip.dev/not-precedent: We need to do this because the custom verb 'resume' better represents the task being performed by the endpoint --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because the custom verb 'resume' better represents the task being performed by the endpoint --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_resume_adc_virtual_warehouse(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ResumeAdcVirtualWarehouseRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ResumeAdcVirtualWarehouseResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_virtual_warehouse_api_resume_adc_virtual_warehouse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_virtual_warehouse_api_resume_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_virtual_warehouse_api_resume_adc_virtual_warehouse_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ResumeAdcVirtualWarehouseRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Resumes a warehouse  # noqa: E501

        Custom method to resume all the warehouses provided in request. To be used to manage credit consumption. (-- api-linter: aladdin::9002::wordslist-custom-method-rpc=disabled  aip.dev/not-precedent: We need to do this because the custom verb 'resume' better represents the task being performed by the endpoint --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because the custom verb 'resume' better represents the task being performed by the endpoint --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_resume_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ResumeAdcVirtualWarehouseRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ResumeAdcVirtualWarehouseResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_virtual_warehouse_api_resume_adc_virtual_warehouse" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ResumeAdcVirtualWarehouseResponse",
            '400': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '401': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '403': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '404': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
        }

        return self.api_client.call_api(
            '/adcVirtualWarehouse:resume', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_virtual_warehouse_api_suspend_adc_virtual_warehouse(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1SuspendAdcVirtualWarehouseRequest, **kwargs) -> V1SuspendAdcVirtualWarehouseResponse:  # noqa: E501
        """Suspends a warehouse  # noqa: E501

        Custom method to suspend all the warehouses provided in request. To be used to manage credit consumption. (-- api-linter: aladdin::9002::wordslist-custom-method-rpc=disabled  aip.dev/not-precedent: We need to do this because the custom verb 'suspend' better represents the task being performed by the endpoint --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because the custom verb 'suspend' better represents the task being performed by the endpoint --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_suspend_adc_virtual_warehouse(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1SuspendAdcVirtualWarehouseRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1SuspendAdcVirtualWarehouseResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_virtual_warehouse_api_suspend_adc_virtual_warehouse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_virtual_warehouse_api_suspend_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_virtual_warehouse_api_suspend_adc_virtual_warehouse_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1SuspendAdcVirtualWarehouseRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Suspends a warehouse  # noqa: E501

        Custom method to suspend all the warehouses provided in request. To be used to manage credit consumption. (-- api-linter: aladdin::9002::wordslist-custom-method-rpc=disabled  aip.dev/not-precedent: We need to do this because the custom verb 'suspend' better represents the task being performed by the endpoint --) (-- api-linter: aladdin::9002::wordslist-custom-method-http=disabled  aip.dev/not-precedent: We need to do this because the custom verb 'suspend' better represents the task being performed by the endpoint --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_suspend_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1SuspendAdcVirtualWarehouseRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1SuspendAdcVirtualWarehouseResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_virtual_warehouse_api_suspend_adc_virtual_warehouse" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1SuspendAdcVirtualWarehouseResponse",
            '400': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '401': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '403': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '404': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
        }

        return self.api_client.call_api(
            '/adcVirtualWarehouse:suspend', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_virtual_warehouse_api_update_adc_virtual_warehouse(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], adc_virtual_warehouse_id : Annotated[StrictStr, Field(..., description="id describes the Virtual warehouse name.")], update_mask : Annotated[StrictStr, Field(..., description="List of fields to be updated.")], body : Annotated[V1AdcVirtualWarehouse, Field(..., description="adc_virtual_warehouse to update.")], **kwargs) -> V1AdcVirtualWarehouse:  # noqa: E501
        """Updates an ADC Virtual Warehouse  # noqa: E501

        Updates an ADC Virtual Warehouse If not present, return code NotFound  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_update_adc_virtual_warehouse(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, adc_virtual_warehouse_id, update_mask, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param adc_virtual_warehouse_id: id describes the Virtual warehouse name. (required)
        :type adc_virtual_warehouse_id: str
        :param update_mask: List of fields to be updated. (required)
        :type update_mask: str
        :param body: adc_virtual_warehouse to update. (required)
        :type body: V1AdcVirtualWarehouse
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1AdcVirtualWarehouse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_virtual_warehouse_api_update_adc_virtual_warehouse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_virtual_warehouse_api_update_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, adc_virtual_warehouse_id, update_mask, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_virtual_warehouse_api_update_adc_virtual_warehouse_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], adc_virtual_warehouse_id : Annotated[StrictStr, Field(..., description="id describes the Virtual warehouse name.")], update_mask : Annotated[StrictStr, Field(..., description="List of fields to be updated.")], body : Annotated[V1AdcVirtualWarehouse, Field(..., description="adc_virtual_warehouse to update.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Updates an ADC Virtual Warehouse  # noqa: E501

        Updates an ADC Virtual Warehouse If not present, return code NotFound  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_virtual_warehouse_api_update_adc_virtual_warehouse_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, adc_virtual_warehouse_id, update_mask, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param adc_virtual_warehouse_id: id describes the Virtual warehouse name. (required)
        :type adc_virtual_warehouse_id: str
        :param update_mask: List of fields to be updated. (required)
        :type update_mask: str
        :param body: adc_virtual_warehouse to update. (required)
        :type body: V1AdcVirtualWarehouse
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1AdcVirtualWarehouse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'adc_virtual_warehouse_id',
            'update_mask',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_virtual_warehouse_api_update_adc_virtual_warehouse" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['adc_virtual_warehouse_id']:
            _path_params['adcVirtualWarehouse.id'] = _params['adc_virtual_warehouse_id']


        # process the query parameters
        _query_params = []
        if _params.get('update_mask') is not None:  # noqa: E501
            _query_params.append(('updateMask', _params['update_mask']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1AdcVirtualWarehouse",
            '400': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '401': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '403': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
            '404': "AdcVirtualWarehouseAPIActivateAdcVirtualWarehouse400Response",
        }

        return self.api_client.call_api(
            '/adcVirtualWarehouses/{adcVirtualWarehouse.id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
