# coding: utf-8

"""
    Adc Quality Rule

    Manages Data Qualiy Rules in Aladdin Data Cloud (ADC). Used by Dataset Owners and ADCQualityAnalysisServer.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from aladdinsdk.api.codegen.platform.studio.adc.adc_quality_rule.v1.AdcQualityRuleAPI.models.v1_adc_dataset_qualified_name import V1AdcDatasetQualifiedName

class V1FilterAdcQualityRuleQuery(BaseModel):
    """
    The query required to perform a filter all adc quality rules based on different parameters. Filter query can be used to get all rules for a dataset at a client based on criticality or activeness.
    """
    filter_dataset_name: Optional[V1AdcDatasetQualifiedName] = Field(None, alias="filterDatasetName")
    client_abbreviation: StrictStr = Field(..., alias="clientAbbreviation")
    cause_failure: Optional[StrictBool] = Field(None, alias="causeFailure")
    active: Optional[StrictBool] = None
    group: Optional[StrictStr] = None
    __properties = ["filterDatasetName", "clientAbbreviation", "causeFailure", "active", "group"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterAdcQualityRuleQuery:
        """Create an instance of V1FilterAdcQualityRuleQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter_dataset_name
        if self.filter_dataset_name:
            _dict['filterDatasetName'] = self.filter_dataset_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterAdcQualityRuleQuery:
        """Create an instance of V1FilterAdcQualityRuleQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterAdcQualityRuleQuery.parse_obj(obj)

        _obj = V1FilterAdcQualityRuleQuery.parse_obj({
            "filter_dataset_name": V1AdcDatasetQualifiedName.from_dict(obj.get("filterDatasetName")) if obj.get("filterDatasetName") is not None else None,
            "client_abbreviation": obj.get("clientAbbreviation"),
            "cause_failure": obj.get("causeFailure"),
            "active": obj.get("active"),
            "group": obj.get("group")
        })
        return _obj

