# coding: utf-8

"""
    Adc Dataset

    Manages Datasets in Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v2.AdcDatasetAPI.models.v2_dataset_facet import V2DatasetFacet
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v2.AdcDatasetAPI.models.v2_dataset_type import V2DatasetType
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v2.AdcDatasetAPI.models.v2_ingestion_facet import V2IngestionFacet
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v2.AdcDatasetAPI.models.v2_state import V2State

class V2AdcDataset(BaseModel):
    """
    An ADC Dataset resource maybe a current or past deployment of a table/view in Aladdin Data Cloud. The resource describes a dataset's metadata and configuration details.
    """
    id: Optional[StrictStr] = None
    dataset_facet: Optional[V2DatasetFacet] = Field(None, alias="datasetFacet")
    client_abbreviation: Optional[StrictStr] = Field(None, alias="clientAbbreviation")
    version: Optional[StrictStr] = None
    dataset_type: Optional[V2DatasetType] = Field(None, alias="datasetType")
    bitemporal: Optional[StrictBool] = None
    target_ddl_commands: Optional[conlist(StrictStr)] = Field(None, alias="targetDdlCommands", description="Target DDL is either auto-generated or user provided DDL script. It is stored as a list of DDL commands to be executed for dataset creation.")
    underlying_datasets: Optional[conlist(StrictStr)] = Field(None, alias="underlyingDatasets")
    ingestion_facet: Optional[V2IngestionFacet] = Field(None, alias="ingestionFacet")
    version_key: Optional[StrictStr] = Field(None, alias="versionKey")
    state: Optional[V2State] = None
    state_comment: Optional[StrictStr] = Field(None, alias="stateComment")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage")
    creator: Optional[StrictStr] = Field(None, description="Represents user that created this record.")
    create_time: Optional[datetime] = Field(None, alias="createTime")
    modifier: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    __properties = ["id", "datasetFacet", "clientAbbreviation", "version", "datasetType", "bitemporal", "targetDdlCommands", "underlyingDatasets", "ingestionFacet", "versionKey", "state", "stateComment", "errorMessage", "creator", "createTime", "modifier", "modifyTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2AdcDataset:
        """Create an instance of V2AdcDataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dataset_facet
        if self.dataset_facet:
            _dict['datasetFacet'] = self.dataset_facet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ingestion_facet
        if self.ingestion_facet:
            _dict['ingestionFacet'] = self.ingestion_facet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2AdcDataset:
        """Create an instance of V2AdcDataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2AdcDataset.parse_obj(obj)

        _obj = V2AdcDataset.parse_obj({
            "id": obj.get("id"),
            "dataset_facet": V2DatasetFacet.from_dict(obj.get("datasetFacet")) if obj.get("datasetFacet") is not None else None,
            "client_abbreviation": obj.get("clientAbbreviation"),
            "version": obj.get("version"),
            "dataset_type": obj.get("datasetType"),
            "bitemporal": obj.get("bitemporal"),
            "target_ddl_commands": obj.get("targetDdlCommands"),
            "underlying_datasets": obj.get("underlyingDatasets"),
            "ingestion_facet": V2IngestionFacet.from_dict(obj.get("ingestionFacet")) if obj.get("ingestionFacet") is not None else None,
            "version_key": obj.get("versionKey"),
            "state": obj.get("state"),
            "state_comment": obj.get("stateComment"),
            "error_message": obj.get("errorMessage"),
            "creator": obj.get("creator"),
            "create_time": obj.get("createTime"),
            "modifier": obj.get("modifier"),
            "modify_time": obj.get("modifyTime")
        })
        return _obj

