# coding: utf-8

"""
    Adc Dataset

    Manages Datasets in Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v2.AdcDatasetAPI.models.v2_column_detail import V2ColumnDetail

class V2RefreshActionDetail(BaseModel):
    """
    V2RefreshActionDetail
    """
    dataset_name: Optional[StrictStr] = Field(None, alias="datasetName")
    added_columns: Optional[conlist(V2ColumnDetail)] = Field(None, alias="addedColumns")
    removed_columns: Optional[conlist(V2ColumnDetail)] = Field(None, alias="removedColumns")
    updated_columns: Optional[conlist(V2ColumnDetail)] = Field(None, alias="updatedColumns")
    __properties = ["datasetName", "addedColumns", "removedColumns", "updatedColumns"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2RefreshActionDetail:
        """Create an instance of V2RefreshActionDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in added_columns (list)
        _items = []
        if self.added_columns:
            for _item in self.added_columns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addedColumns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in removed_columns (list)
        _items = []
        if self.removed_columns:
            for _item in self.removed_columns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['removedColumns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in updated_columns (list)
        _items = []
        if self.updated_columns:
            for _item in self.updated_columns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['updatedColumns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2RefreshActionDetail:
        """Create an instance of V2RefreshActionDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2RefreshActionDetail.parse_obj(obj)

        _obj = V2RefreshActionDetail.parse_obj({
            "dataset_name": obj.get("datasetName"),
            "added_columns": [V2ColumnDetail.from_dict(_item) for _item in obj.get("addedColumns")] if obj.get("addedColumns") is not None else None,
            "removed_columns": [V2ColumnDetail.from_dict(_item) for _item in obj.get("removedColumns")] if obj.get("removedColumns") is not None else None,
            "updated_columns": [V2ColumnDetail.from_dict(_item) for _item in obj.get("updatedColumns")] if obj.get("updatedColumns") is not None else None
        })
        return _obj

