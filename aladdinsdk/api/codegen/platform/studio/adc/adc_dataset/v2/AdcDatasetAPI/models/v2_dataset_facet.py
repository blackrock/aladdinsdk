# coding: utf-8

"""
    Adc Dataset

    Manages Datasets in Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v2.AdcDatasetAPI.models.v2_column_metadata import V2ColumnMetadata

class V2DatasetFacet(BaseModel):
    """
    A DatasetFacet consists of all the primary fields that an ADC Dataset contains The resource describes a dataset's primary metadata properties.
    """
    database: Optional[StrictStr] = None
    var_schema: Optional[StrictStr] = Field(None, alias="schema")
    dataset_name: Optional[StrictStr] = Field(None, alias="datasetName")
    description: Optional[StrictStr] = None
    table_metadata: Optional[Dict[str, StrictStr]] = Field(None, alias="tableMetadata")
    column_metadata: Optional[Dict[str, V2ColumnMetadata]] = Field(None, alias="columnMetadata")
    data_owners: Optional[conlist(StrictStr)] = Field(None, alias="dataOwners")
    category: Optional[StrictStr] = None
    tags: Optional[conlist(StrictStr)] = None
    auto_sync: Optional[StrictBool] = Field(None, alias="autoSync")
    display_name: Optional[StrictStr] = Field(None, alias="displayName")
    primary_keys: Optional[conlist(StrictStr)] = Field(None, alias="primaryKeys")
    __properties = ["database", "schema", "datasetName", "description", "tableMetadata", "columnMetadata", "dataOwners", "category", "tags", "autoSync", "displayName", "primaryKeys"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2DatasetFacet:
        """Create an instance of V2DatasetFacet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in column_metadata (dict)
        _field_dict = {}
        if self.column_metadata:
            for _key in self.column_metadata:
                if self.column_metadata[_key]:
                    _field_dict[_key] = self.column_metadata[_key].to_dict()
            _dict['columnMetadata'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2DatasetFacet:
        """Create an instance of V2DatasetFacet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2DatasetFacet.parse_obj(obj)

        _obj = V2DatasetFacet.parse_obj({
            "database": obj.get("database"),
            "var_schema": obj.get("schema"),
            "dataset_name": obj.get("datasetName"),
            "description": obj.get("description"),
            "table_metadata": obj.get("tableMetadata"),
            "column_metadata": dict(
                (_k, V2ColumnMetadata.from_dict(_v))
                for _k, _v in obj.get("columnMetadata").items()
            )
            if obj.get("columnMetadata") is not None
            else None,
            "data_owners": obj.get("dataOwners"),
            "category": obj.get("category"),
            "tags": obj.get("tags"),
            "auto_sync": obj.get("autoSync"),
            "display_name": obj.get("displayName"),
            "primary_keys": obj.get("primaryKeys")
        })
        return _obj

