# coding: utf-8

"""
    Adc Dataset

    Manages Datasets in Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictStr

from typing import Any, Dict, Optional

from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_adc_dataset import V1AdcDataset
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_batch_update_dataset_facets_request import V1BatchUpdateDatasetFacetsRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_batch_update_dataset_facets_response import V1BatchUpdateDatasetFacetsResponse
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_filter_adc_datasets_request import V1FilterAdcDatasetsRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_filter_adc_datasets_response import V1FilterAdcDatasetsResponse
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_longrunning_operation import V1LongrunningOperation
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_reconcile_adc_datasets_request import V1ReconcileAdcDatasetsRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_reconcile_adc_datasets_response import V1ReconcileAdcDatasetsResponse
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_refresh_adc_datasets_request import V1RefreshAdcDatasetsRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_register_adc_datasets_request import V1RegisterAdcDatasetsRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_release_adc_dataset_request import V1ReleaseAdcDatasetRequest
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_release_adc_dataset_response import V1ReleaseAdcDatasetResponse

from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.api_client import ApiClient
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultAdcDatasetAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def adc_dataset_api_batch_update_dataset_facets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateDatasetFacetsRequest, **kwargs) -> V1BatchUpdateDatasetFacetsResponse:  # noqa: E501
        """Update Dataset Facets in batch  # noqa: E501

        Updates the latest \"STATE_RELEASED\" version of the DatasetFacet  for each DatasetFacets provided under the selected Database & schema combination. A successful execution of the request returns a list of DatasetFacets that were updated successfully. While a failure in execution of the request returns a list of \"Error\" result objects  containing the DatasetFacet and the error message corresponding to it.  The use of this operation requires \"StudioAdmin\" Aladdin perm assigned to the user. The update operation will be ATOMIC in nature, which means either all criteria  fulfilling DatasetFacets will be updated or no DatasetFacets will be updated. The update operation is only allowed simultaneously to either \"columnMetadata\" or \"columnMetadataDescription\". (-- api-linter: core::0234::http-method=disabled  aip.dev/not-precedent: We need to do this because this is how it's expected --) (-- api-linter: aladdin::9048::rpc-name=disabled  aip.dev/not-precedent: We need to do this because this is how it's expected --) (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because this is how it's expected --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_batch_update_dataset_facets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateDatasetFacetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchUpdateDatasetFacetsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_batch_update_dataset_facets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_batch_update_dataset_facets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_batch_update_dataset_facets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateDatasetFacetsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Dataset Facets in batch  # noqa: E501

        Updates the latest \"STATE_RELEASED\" version of the DatasetFacet  for each DatasetFacets provided under the selected Database & schema combination. A successful execution of the request returns a list of DatasetFacets that were updated successfully. While a failure in execution of the request returns a list of \"Error\" result objects  containing the DatasetFacet and the error message corresponding to it.  The use of this operation requires \"StudioAdmin\" Aladdin perm assigned to the user. The update operation will be ATOMIC in nature, which means either all criteria  fulfilling DatasetFacets will be updated or no DatasetFacets will be updated. The update operation is only allowed simultaneously to either \"columnMetadata\" or \"columnMetadataDescription\". (-- api-linter: core::0234::http-method=disabled  aip.dev/not-precedent: We need to do this because this is how it's expected --) (-- api-linter: aladdin::9048::rpc-name=disabled  aip.dev/not-precedent: We need to do this because this is how it's expected --) (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because this is how it's expected --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_batch_update_dataset_facets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateDatasetFacetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchUpdateDatasetFacetsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_batch_update_dataset_facets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchUpdateDatasetFacetsResponse",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/datasetFacets:batchUpdate', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_create_adc_dataset(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1AdcDataset, Field(..., description="adc_dataset to create.")], **kwargs) -> V1AdcDataset:  # noqa: E501
        """Create an ADC Dataset  # noqa: E501

        This endpoint is intended for internal BlackRock use only and is in the process of being depreciated.  Please refrain from using unless authorized. Creates an ADC Dataset resource by adding entries to the underlying data store. If a dataset already exists, return code AlreadyExists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_create_adc_dataset(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: adc_dataset to create. (required)
        :type body: V1AdcDataset
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1AdcDataset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_create_adc_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_create_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_create_adc_dataset_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : Annotated[V1AdcDataset, Field(..., description="adc_dataset to create.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create an ADC Dataset  # noqa: E501

        This endpoint is intended for internal BlackRock use only and is in the process of being depreciated.  Please refrain from using unless authorized. Creates an ADC Dataset resource by adding entries to the underlying data store. If a dataset already exists, return code AlreadyExists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_create_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: adc_dataset to create. (required)
        :type body: V1AdcDataset
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1AdcDataset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_create_adc_dataset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1AdcDataset",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_delete_adc_dataset(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_id_database : Annotated[StrictStr, Field(..., description="Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_schema : Annotated[StrictStr, Field(..., description="Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_dataset_name : Annotated[StrictStr, Field(..., description="name of the view.")], dataset_id_client_abbreviation : Annotated[StrictStr, Field(..., description="Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_version : Annotated[StrictStr, Field(..., description="Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --).")], **kwargs) -> object:  # noqa: E501
        """Delete an ADC Dataset  # noqa: E501

        Deletes the given ADC Dataset from the underlying data store. If the final version of the dataset is deleted, it also deletes all the related objects from the data store. If dataset does not exist, return code NotFound. The endpoint performs a hard delete. If the dataset being deleted has associated views and stored procs, those would be deleted as well (-- api-linter: core::0135::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because there is no unique identifier that helps us identify the ADC Dataset --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_delete_adc_dataset(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_id_database: Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_database: str
        :param dataset_id_schema: Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_schema: str
        :param dataset_id_dataset_name: name of the view. (required)
        :type dataset_id_dataset_name: str
        :param dataset_id_client_abbreviation: Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_client_abbreviation: str
        :param dataset_id_version: Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --). (required)
        :type dataset_id_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_delete_adc_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_delete_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_delete_adc_dataset_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_id_database : Annotated[StrictStr, Field(..., description="Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_schema : Annotated[StrictStr, Field(..., description="Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_dataset_name : Annotated[StrictStr, Field(..., description="name of the view.")], dataset_id_client_abbreviation : Annotated[StrictStr, Field(..., description="Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_version : Annotated[StrictStr, Field(..., description="Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --).")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete an ADC Dataset  # noqa: E501

        Deletes the given ADC Dataset from the underlying data store. If the final version of the dataset is deleted, it also deletes all the related objects from the data store. If dataset does not exist, return code NotFound. The endpoint performs a hard delete. If the dataset being deleted has associated views and stored procs, those would be deleted as well (-- api-linter: core::0135::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because there is no unique identifier that helps us identify the ADC Dataset --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_delete_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_id_database: Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_database: str
        :param dataset_id_schema: Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_schema: str
        :param dataset_id_dataset_name: name of the view. (required)
        :type dataset_id_dataset_name: str
        :param dataset_id_client_abbreviation: Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_client_abbreviation: str
        :param dataset_id_version: Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --). (required)
        :type dataset_id_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'dataset_id_database',
            'dataset_id_schema',
            'dataset_id_dataset_name',
            'dataset_id_client_abbreviation',
            'dataset_id_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_delete_adc_dataset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('dataset_id_database') is not None:  # noqa: E501
            _query_params.append(('datasetId.database', _params['dataset_id_database']))

        if _params.get('dataset_id_schema') is not None:  # noqa: E501
            _query_params.append(('datasetId.schema', _params['dataset_id_schema']))

        if _params.get('dataset_id_dataset_name') is not None:  # noqa: E501
            _query_params.append(('datasetId.datasetName', _params['dataset_id_dataset_name']))

        if _params.get('dataset_id_client_abbreviation') is not None:  # noqa: E501
            _query_params.append(('datasetId.clientAbbreviation', _params['dataset_id_client_abbreviation']))

        if _params.get('dataset_id_version') is not None:  # noqa: E501
            _query_params.append(('datasetId.version', _params['dataset_id_version']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_filter_adc_datasets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterAdcDatasetsRequest, **kwargs) -> V1FilterAdcDatasetsResponse:  # noqa: E501
        """Filter ADC Datasets  # noqa: E501

        Filter ADC Datasets based on the given filter criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_filter_adc_datasets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterAdcDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterAdcDatasetsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_filter_adc_datasets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_filter_adc_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_filter_adc_datasets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterAdcDatasetsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter ADC Datasets  # noqa: E501

        Filter ADC Datasets based on the given filter criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_filter_adc_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterAdcDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterAdcDatasetsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_filter_adc_datasets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterAdcDatasetsResponse",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_get_adc_dataset(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_id_database : Annotated[StrictStr, Field(..., description="Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_schema : Annotated[StrictStr, Field(..., description="Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_dataset_name : Annotated[StrictStr, Field(..., description="name of the view.")], dataset_id_client_abbreviation : Annotated[StrictStr, Field(..., description="Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_version : Annotated[StrictStr, Field(..., description="Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --).")], **kwargs) -> V1AdcDataset:  # noqa: E501
        """Get an ADC Dataset  # noqa: E501

        Gets an ADC Dataset matching the given criteria from the underlying data store. (-- api-linter: core::0131::http-uri-id=disabled aip.dev/not-precedent: We need to do this because there is no unique identifier that helps us identify the ADC Dataset --) Conforms to the 'idxPrimary' index found here https://dev.blackrock.com/adlvisualizer/?repositoryName=ADCDatasets&clientName=SHARED URL: /adcDatasets?clientAbbreviation=dev&database=customdb&schema=public&datasetName=test_dataset&version=1.0.0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_get_adc_dataset(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_id_database: Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_database: str
        :param dataset_id_schema: Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_schema: str
        :param dataset_id_dataset_name: name of the view. (required)
        :type dataset_id_dataset_name: str
        :param dataset_id_client_abbreviation: Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_client_abbreviation: str
        :param dataset_id_version: Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --). (required)
        :type dataset_id_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1AdcDataset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_get_adc_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_get_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_get_adc_dataset_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_id_database : Annotated[StrictStr, Field(..., description="Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_schema : Annotated[StrictStr, Field(..., description="Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_dataset_name : Annotated[StrictStr, Field(..., description="name of the view.")], dataset_id_client_abbreviation : Annotated[StrictStr, Field(..., description="Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_version : Annotated[StrictStr, Field(..., description="Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --).")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get an ADC Dataset  # noqa: E501

        Gets an ADC Dataset matching the given criteria from the underlying data store. (-- api-linter: core::0131::http-uri-id=disabled aip.dev/not-precedent: We need to do this because there is no unique identifier that helps us identify the ADC Dataset --) Conforms to the 'idxPrimary' index found here https://dev.blackrock.com/adlvisualizer/?repositoryName=ADCDatasets&clientName=SHARED URL: /adcDatasets?clientAbbreviation=dev&database=customdb&schema=public&datasetName=test_dataset&version=1.0.0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_get_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_id_database: Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_database: str
        :param dataset_id_schema: Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_schema: str
        :param dataset_id_dataset_name: name of the view. (required)
        :type dataset_id_dataset_name: str
        :param dataset_id_client_abbreviation: Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_client_abbreviation: str
        :param dataset_id_version: Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --). (required)
        :type dataset_id_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1AdcDataset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'dataset_id_database',
            'dataset_id_schema',
            'dataset_id_dataset_name',
            'dataset_id_client_abbreviation',
            'dataset_id_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_get_adc_dataset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('dataset_id_database') is not None:  # noqa: E501
            _query_params.append(('datasetId.database', _params['dataset_id_database']))

        if _params.get('dataset_id_schema') is not None:  # noqa: E501
            _query_params.append(('datasetId.schema', _params['dataset_id_schema']))

        if _params.get('dataset_id_dataset_name') is not None:  # noqa: E501
            _query_params.append(('datasetId.datasetName', _params['dataset_id_dataset_name']))

        if _params.get('dataset_id_client_abbreviation') is not None:  # noqa: E501
            _query_params.append(('datasetId.clientAbbreviation', _params['dataset_id_client_abbreviation']))

        if _params.get('dataset_id_version') is not None:  # noqa: E501
            _query_params.append(('datasetId.version', _params['dataset_id_version']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1AdcDataset",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_get_longrunning_operation(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the LongrunningOperation")], **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Gets the state of a long-running operation  # noqa: E501

        Clients can use this method to poll the operation result at intervals as recommended by the API service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_get_longrunning_operation(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the LongrunningOperation (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_get_longrunning_operation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_get_longrunning_operation_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_get_longrunning_operation_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], id : Annotated[StrictStr, Field(..., description="Id of the LongrunningOperation")], **kwargs) -> ApiResponse:  # noqa: E501
        """Gets the state of a long-running operation  # noqa: E501

        Clients can use this method to poll the operation result at intervals as recommended by the API service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_get_longrunning_operation_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, id, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param id: Id of the LongrunningOperation (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_get_longrunning_operation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/longRunningOperations/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_reconcile_adc_datasets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ReconcileAdcDatasetsRequest, **kwargs) -> V1ReconcileAdcDatasetsResponse:  # noqa: E501
        """Reconcile ADC Datasets  # noqa: E501

        This endpoint is intended for internal BlackRock use only and is in the process of being depreciated.  Please refrain from using unless authorized. Reconciles all ADC Datasets under ALADDINDB schema by comparing all properties within the  ADCDataset for a given client against another gold-copy client. The output is a list of datasets for which the recon executed successfully and did not execute successfully. An email report is also sent to the provided email address for the reconciliation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_reconcile_adc_datasets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ReconcileAdcDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ReconcileAdcDatasetsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_reconcile_adc_datasets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_reconcile_adc_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_reconcile_adc_datasets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ReconcileAdcDatasetsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Reconcile ADC Datasets  # noqa: E501

        This endpoint is intended for internal BlackRock use only and is in the process of being depreciated.  Please refrain from using unless authorized. Reconciles all ADC Datasets under ALADDINDB schema by comparing all properties within the  ADCDataset for a given client against another gold-copy client. The output is a list of datasets for which the recon executed successfully and did not execute successfully. An email report is also sent to the provided email address for the reconciliation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_reconcile_adc_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ReconcileAdcDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ReconcileAdcDatasetsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_reconcile_adc_datasets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1ReconcileAdcDatasetsResponse",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets:reconcile', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_refresh_adc_datasets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RefreshAdcDatasetsRequest, **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Refresh schema (columnMetadata) of an ADC Dataset  # noqa: E501

        Compares the registered column metadata of a data set in ADC to its corresponding view in the underlying data store.  The column metadata fields reconciled are nullable, scale, precision and defaultValue.  Any changes to the metadata in the underlying data store are overwritten in ADC.  A successful operation refreshes column metadata for data sets registered with ADC.  If input datasets are left empty in the request parameters, ADC will attempt to refresh registered datasets only.  Unregistered data sets will not be considered. This operation is atomic in nature. In the case of a failure in operation, no datasets are refreshed. All (column metadata) changes trigger a major version increment to the dataset.  When a major version increment occurs, the state of the previous version is changed from STATE_RELEASED to STATE_INACTIVE and the state of the new version is set to STATE_RELEASED.  If no changes are identified, the version and state of a dataset are unaffected. If new fields are identified as part of the refresh operation, column description will default to the following format: dataset_name:column_name DataOwners, subscribers for a failed and success operation on a dataset will be notified via email with an id and current status of their request.  The use of this operation requires the following :  a) The user to have the \"StudioAdmin\" Aladdin Permission Type and \"DATACLOUD\" Aladdin Permission Group assigned in Aladdin Permissions b) The user to have \"Usage\" and \"Select\" privileges on all the objects provided in the request (Usage on the database, Usage on the schema, and select on all views).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_refresh_adc_datasets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RefreshAdcDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_refresh_adc_datasets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_refresh_adc_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_refresh_adc_datasets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RefreshAdcDatasetsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Refresh schema (columnMetadata) of an ADC Dataset  # noqa: E501

        Compares the registered column metadata of a data set in ADC to its corresponding view in the underlying data store.  The column metadata fields reconciled are nullable, scale, precision and defaultValue.  Any changes to the metadata in the underlying data store are overwritten in ADC.  A successful operation refreshes column metadata for data sets registered with ADC.  If input datasets are left empty in the request parameters, ADC will attempt to refresh registered datasets only.  Unregistered data sets will not be considered. This operation is atomic in nature. In the case of a failure in operation, no datasets are refreshed. All (column metadata) changes trigger a major version increment to the dataset.  When a major version increment occurs, the state of the previous version is changed from STATE_RELEASED to STATE_INACTIVE and the state of the new version is set to STATE_RELEASED.  If no changes are identified, the version and state of a dataset are unaffected. If new fields are identified as part of the refresh operation, column description will default to the following format: dataset_name:column_name DataOwners, subscribers for a failed and success operation on a dataset will be notified via email with an id and current status of their request.  The use of this operation requires the following :  a) The user to have the \"StudioAdmin\" Aladdin Permission Type and \"DATACLOUD\" Aladdin Permission Group assigned in Aladdin Permissions b) The user to have \"Usage\" and \"Select\" privileges on all the objects provided in the request (Usage on the database, Usage on the schema, and select on all views).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_refresh_adc_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RefreshAdcDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_refresh_adc_datasets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets:refresh', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_register_adc_datasets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RegisterAdcDatasetsRequest, **kwargs) -> V1LongrunningOperation:  # noqa: E501
        """Register ADC Datasets  # noqa: E501

        Initiates the registration process for registering dataset(s) in ADC. The API operation can be used to register custom or non-standard dataset(s). This operation is atomic in nature, a successful call registers all identified datasets to ADC and no datasets are registerd in the case of a failure in operation. Default column descriptions is stored in the format : dataset_name:column_name Default dataset description is stored as the fully qualified name for a dataset.  If input datasets is left empty in the request parameters, a successful operation will register all views defined by database.schema references in the underlying data store to ADC. Datasets are stored in STATE_RELEASED in ADC and indexed on Aladdin Studio. The use of this operation requires \"StudioAdmin\" Aladdin perm assigned to the user and access to database and schema provided in request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_register_adc_datasets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RegisterAdcDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1LongrunningOperation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_register_adc_datasets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_register_adc_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_register_adc_datasets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RegisterAdcDatasetsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Register ADC Datasets  # noqa: E501

        Initiates the registration process for registering dataset(s) in ADC. The API operation can be used to register custom or non-standard dataset(s). This operation is atomic in nature, a successful call registers all identified datasets to ADC and no datasets are registerd in the case of a failure in operation. Default column descriptions is stored in the format : dataset_name:column_name Default dataset description is stored as the fully qualified name for a dataset.  If input datasets is left empty in the request parameters, a successful operation will register all views defined by database.schema references in the underlying data store to ADC. Datasets are stored in STATE_RELEASED in ADC and indexed on Aladdin Studio. The use of this operation requires \"StudioAdmin\" Aladdin perm assigned to the user and access to database and schema provided in request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_register_adc_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RegisterAdcDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1LongrunningOperation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_register_adc_datasets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1LongrunningOperation",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets:register', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_release_adc_dataset(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ReleaseAdcDatasetRequest, **kwargs) -> V1ReleaseAdcDatasetResponse:  # noqa: E501
        """Release an ADC Dataset  # noqa: E501

        This endpoint is intended for internal BlackRock use only and is in the process of being depreciated.  Please refrain from using unless authorized. Releases an ADC Dataset by executing DDLs in Snowflake which will create database objects  such as table, views & stored procedure. Entries in ADL repo ADCDatasetReleaseHistory  are also created to record the transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_release_adc_dataset(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ReleaseAdcDatasetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ReleaseAdcDatasetResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_release_adc_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_release_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_release_adc_dataset_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ReleaseAdcDatasetRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Release an ADC Dataset  # noqa: E501

        This endpoint is intended for internal BlackRock use only and is in the process of being depreciated.  Please refrain from using unless authorized. Releases an ADC Dataset by executing DDLs in Snowflake which will create database objects  such as table, views & stored procedure. Entries in ADL repo ADCDatasetReleaseHistory  are also created to record the transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_release_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ReleaseAdcDatasetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ReleaseAdcDatasetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_release_adc_dataset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1ReleaseAdcDatasetResponse",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets:releaseAdcDataset', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def adc_dataset_api_update_adc_dataset(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_id_database : Annotated[StrictStr, Field(..., description="Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_schema : Annotated[StrictStr, Field(..., description="Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_dataset_name : Annotated[StrictStr, Field(..., description="name of the view.")], dataset_id_client_abbreviation : Annotated[StrictStr, Field(..., description="Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_version : Annotated[StrictStr, Field(..., description="Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --).")], body : Annotated[V1AdcDataset, Field(..., description="adc_dataset to update.")], update_mask : Annotated[Optional[StrictStr], Field(description="List of fields to be updated.")] = None, **kwargs) -> V1AdcDataset:  # noqa: E501
        """Update an ADC Dataset  # noqa: E501

        This endpoint is intended for internal BlackRock use only and is in the process of being depreciated.  Please refrain from using unless authorized. Updates the ADC Dataset matching the given criteria within the underlying data store. If dataset does not already exist in ADL Repositories, return code NotFound. (-- api-linter: core::0134::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because there is no unique identifier that helps us identify the ADC Dataset --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_update_adc_dataset(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, body, update_mask, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_id_database: Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_database: str
        :param dataset_id_schema: Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_schema: str
        :param dataset_id_dataset_name: name of the view. (required)
        :type dataset_id_dataset_name: str
        :param dataset_id_client_abbreviation: Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_client_abbreviation: str
        :param dataset_id_version: Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --). (required)
        :type dataset_id_version: str
        :param body: adc_dataset to update. (required)
        :type body: V1AdcDataset
        :param update_mask: List of fields to be updated.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1AdcDataset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the adc_dataset_api_update_adc_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.adc_dataset_api_update_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, body, update_mask, **kwargs)  # noqa: E501

    @validate_arguments
    def adc_dataset_api_update_adc_dataset_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_id_database : Annotated[StrictStr, Field(..., description="Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_schema : Annotated[StrictStr, Field(..., description="Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_dataset_name : Annotated[StrictStr, Field(..., description="name of the view.")], dataset_id_client_abbreviation : Annotated[StrictStr, Field(..., description="Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$.")], dataset_id_version : Annotated[StrictStr, Field(..., description="Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --).")], body : Annotated[V1AdcDataset, Field(..., description="adc_dataset to update.")], update_mask : Annotated[Optional[StrictStr], Field(description="List of fields to be updated.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update an ADC Dataset  # noqa: E501

        This endpoint is intended for internal BlackRock use only and is in the process of being depreciated.  Please refrain from using unless authorized. Updates the ADC Dataset matching the given criteria within the underlying data store. If dataset does not already exist in ADL Repositories, return code NotFound. (-- api-linter: core::0134::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because there is no unique identifier that helps us identify the ADC Dataset --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.adc_dataset_api_update_adc_dataset_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_id_database, dataset_id_schema, dataset_id_dataset_name, dataset_id_client_abbreviation, dataset_id_version, body, update_mask, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_id_database: Underlying database name for the Dataset Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_database: str
        :param dataset_id_schema: Underlying schema name for the Dataset (-- api-linter: core::0124::required-reference=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: aladdin::0901::dictionary-message-field=disabled  aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_schema: str
        :param dataset_id_dataset_name: name of the view. (required)
        :type dataset_id_dataset_name: str
        :param dataset_id_client_abbreviation: Aladdin client environment abbreviation Value should be Upper Case only and follow the regex : ^[A-Z]+$. (required)
        :type dataset_id_client_abbreviation: str
        :param dataset_id_version: Version - Should follow Semantic Versioning (-- api-linter: aladdin::0901::dictionary-message-field=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --) (-- api-linter: core::0124::required-reference=disabled aip.dev/not-precedent: We need to do this because this field is not related to the cross-domain schema field --). (required)
        :type dataset_id_version: str
        :param body: adc_dataset to update. (required)
        :type body: V1AdcDataset
        :param update_mask: List of fields to be updated.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1AdcDataset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'dataset_id_database',
            'dataset_id_schema',
            'dataset_id_dataset_name',
            'dataset_id_client_abbreviation',
            'dataset_id_version',
            'body',
            'update_mask'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adc_dataset_api_update_adc_dataset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('dataset_id_database') is not None:  # noqa: E501
            _query_params.append(('datasetId.database', _params['dataset_id_database']))

        if _params.get('dataset_id_schema') is not None:  # noqa: E501
            _query_params.append(('datasetId.schema', _params['dataset_id_schema']))

        if _params.get('dataset_id_dataset_name') is not None:  # noqa: E501
            _query_params.append(('datasetId.datasetName', _params['dataset_id_dataset_name']))

        if _params.get('dataset_id_client_abbreviation') is not None:  # noqa: E501
            _query_params.append(('datasetId.clientAbbreviation', _params['dataset_id_client_abbreviation']))

        if _params.get('dataset_id_version') is not None:  # noqa: E501
            _query_params.append(('datasetId.version', _params['dataset_id_version']))

        if _params.get('update_mask') is not None:  # noqa: E501
            _query_params.append(('updateMask', _params['update_mask']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "V1AdcDataset",
            '400': "AdcDatasetAPIGetAdcDataset400Response",
            '401': "AdcDatasetAPIGetAdcDataset400Response",
            '403': "AdcDatasetAPIGetAdcDataset400Response",
            '404': "AdcDatasetAPIGetAdcDataset400Response",
        }

        return self.api_client.call_api(
            '/adcDatasets', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
