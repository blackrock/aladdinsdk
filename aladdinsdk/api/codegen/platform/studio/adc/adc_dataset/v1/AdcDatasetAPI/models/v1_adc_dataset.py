# coding: utf-8

"""
    Adc Dataset

    Manages Datasets in Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_column_metadata import V1ColumnMetadata
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_dataset_facet import V1DatasetFacet
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_dataset_type import V1DatasetType
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_ingestion_facet import V1IngestionFacet
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_state import V1State

class V1AdcDataset(BaseModel):
    """
    An ADC Dataset resource maybe a current or past deployment of a table/view in Aladdin Data Cloud. The resource describes a dataset's metadata and configuration details.
    """
    id: Optional[StrictStr] = None
    dataset_name: Optional[StrictStr] = Field(None, alias="datasetName")
    client_abbreviation: Optional[StrictStr] = Field(None, alias="clientAbbreviation")
    version: Optional[StrictStr] = None
    dataset_type: Optional[V1DatasetType] = Field(None, alias="datasetType")
    description: Optional[StrictStr] = None
    database: Optional[StrictStr] = None
    var_schema: Optional[StrictStr] = Field(None, alias="schema")
    bitemporal: Optional[StrictBool] = None
    target_ddl_commands: Optional[conlist(StrictStr)] = Field(None, alias="targetDdlCommands", description="Target DDL is either auto-generated or user provided DDL script. It is stored as a list of DDL commands to be executed for dataset creation.")
    state: Optional[V1State] = None
    state_comment: Optional[StrictStr] = Field(None, alias="stateComment")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage")
    creator: Optional[StrictStr] = Field(None, description="Represents user that created this record.")
    create_time: Optional[datetime] = Field(None, alias="createTime")
    modifier: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    underlying_datasets: Optional[conlist(StrictStr)] = Field(None, alias="underlyingDatasets")
    merge_enabled: Optional[StrictBool] = Field(None, alias="mergeEnabled")
    input_location: Optional[StrictStr] = Field(None, alias="inputLocation")
    etl_config: Optional[Dict[str, StrictStr]] = Field(None, alias="etlConfig")
    success_emails: Optional[conlist(StrictStr)] = Field(None, alias="successEmails")
    failure_emails: Optional[conlist(StrictStr)] = Field(None, alias="failureEmails")
    table_metadata: Optional[Dict[str, StrictStr]] = Field(None, alias="tableMetadata")
    column_metadata: Optional[Dict[str, V1ColumnMetadata]] = Field(None, alias="columnMetadata")
    category: Optional[StrictStr] = None
    tags: Optional[conlist(StrictStr)] = None
    display_name: Optional[StrictStr] = Field(None, alias="displayName")
    primary_keys: Optional[conlist(StrictStr)] = Field(None, alias="primaryKeys")
    version_key: Optional[StrictStr] = Field(None, alias="versionKey")
    dataset_facet: Optional[V1DatasetFacet] = Field(None, alias="datasetFacet")
    ingestion_facet: Optional[V1IngestionFacet] = Field(None, alias="ingestionFacet")
    __properties = ["id", "datasetName", "clientAbbreviation", "version", "datasetType", "description", "database", "schema", "bitemporal", "targetDdlCommands", "state", "stateComment", "errorMessage", "creator", "createTime", "modifier", "modifyTime", "underlyingDatasets", "mergeEnabled", "inputLocation", "etlConfig", "successEmails", "failureEmails", "tableMetadata", "columnMetadata", "category", "tags", "displayName", "primaryKeys", "versionKey", "datasetFacet", "ingestionFacet"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AdcDataset:
        """Create an instance of V1AdcDataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in column_metadata (dict)
        _field_dict = {}
        if self.column_metadata:
            for _key in self.column_metadata:
                if self.column_metadata[_key]:
                    _field_dict[_key] = self.column_metadata[_key].to_dict()
            _dict['columnMetadata'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of dataset_facet
        if self.dataset_facet:
            _dict['datasetFacet'] = self.dataset_facet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ingestion_facet
        if self.ingestion_facet:
            _dict['ingestionFacet'] = self.ingestion_facet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AdcDataset:
        """Create an instance of V1AdcDataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AdcDataset.parse_obj(obj)

        _obj = V1AdcDataset.parse_obj({
            "id": obj.get("id"),
            "dataset_name": obj.get("datasetName"),
            "client_abbreviation": obj.get("clientAbbreviation"),
            "version": obj.get("version"),
            "dataset_type": obj.get("datasetType"),
            "description": obj.get("description"),
            "database": obj.get("database"),
            "var_schema": obj.get("schema"),
            "bitemporal": obj.get("bitemporal"),
            "target_ddl_commands": obj.get("targetDdlCommands"),
            "state": obj.get("state"),
            "state_comment": obj.get("stateComment"),
            "error_message": obj.get("errorMessage"),
            "creator": obj.get("creator"),
            "create_time": obj.get("createTime"),
            "modifier": obj.get("modifier"),
            "modify_time": obj.get("modifyTime"),
            "underlying_datasets": obj.get("underlyingDatasets"),
            "merge_enabled": obj.get("mergeEnabled"),
            "input_location": obj.get("inputLocation"),
            "etl_config": obj.get("etlConfig"),
            "success_emails": obj.get("successEmails"),
            "failure_emails": obj.get("failureEmails"),
            "table_metadata": obj.get("tableMetadata"),
            "column_metadata": dict(
                (_k, V1ColumnMetadata.from_dict(_v))
                for _k, _v in obj.get("columnMetadata").items()
            )
            if obj.get("columnMetadata") is not None
            else None,
            "category": obj.get("category"),
            "tags": obj.get("tags"),
            "display_name": obj.get("displayName"),
            "primary_keys": obj.get("primaryKeys"),
            "version_key": obj.get("versionKey"),
            "dataset_facet": V1DatasetFacet.from_dict(obj.get("datasetFacet")) if obj.get("datasetFacet") is not None else None,
            "ingestion_facet": V1IngestionFacet.from_dict(obj.get("ingestionFacet")) if obj.get("ingestionFacet") is not None else None
        })
        return _obj

