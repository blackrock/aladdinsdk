# coding: utf-8

"""
    Adc Dataset

    Manages Datasets in Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from aladdinsdk.api.codegen.platform.studio.adc.adc_dataset.v1.AdcDatasetAPI.models.v1_adc_dataset_query import V1AdcDatasetQuery

class V1FilterAdcDatasetsRequest(BaseModel):
    """
    The request message for AdcDatasetAPI.FilterAdcDatasets.
    """
    adc_dataset_query: Optional[V1AdcDatasetQuery] = Field(None, alias="adcDatasetQuery")
    page_token: Optional[StrictStr] = Field(None, alias="pageToken", description="A page token, received from a previous 'FilterAdcDatasets' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'FilterAdcDatasets' must match the call that provided the page token.")
    page_size: Optional[StrictInt] = Field(None, alias="pageSize", description="The maximum number of ADC Datasets to return. The service may return fewer than this value. If unspecified, at most 500 ADC Datasets will be returned. The maximum value is 500; values above 500 will be coerced to 500.")
    __properties = ["adcDatasetQuery", "pageToken", "pageSize"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterAdcDatasetsRequest:
        """Create an instance of V1FilterAdcDatasetsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of adc_dataset_query
        if self.adc_dataset_query:
            _dict['adcDatasetQuery'] = self.adc_dataset_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterAdcDatasetsRequest:
        """Create an instance of V1FilterAdcDatasetsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterAdcDatasetsRequest.parse_obj(obj)

        _obj = V1FilterAdcDatasetsRequest.parse_obj({
            "adc_dataset_query": V1AdcDatasetQuery.from_dict(obj.get("adcDatasetQuery")) if obj.get("adcDatasetQuery") is not None else None,
            "page_token": obj.get("pageToken"),
            "page_size": obj.get("pageSize")
        })
        return _obj

