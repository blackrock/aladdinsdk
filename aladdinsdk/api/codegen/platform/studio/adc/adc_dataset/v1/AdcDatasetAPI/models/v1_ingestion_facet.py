# coding: utf-8

"""
    Adc Dataset

    Manages Datasets in Aladdin Data Cloud (ADC). Used by Studio's ADC Admin Center.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class V1IngestionFacet(BaseModel):
    """
    V1IngestionFacet
    """
    merge_enabled: Optional[StrictBool] = Field(None, alias="mergeEnabled")
    input_location: Optional[StrictStr] = Field(None, alias="inputLocation")
    etl_config: Optional[Dict[str, StrictStr]] = Field(None, alias="etlConfig")
    success_emails: Optional[conlist(StrictStr)] = Field(None, alias="successEmails")
    failure_emails: Optional[conlist(StrictStr)] = Field(None, alias="failureEmails")
    __properties = ["mergeEnabled", "inputLocation", "etlConfig", "successEmails", "failureEmails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1IngestionFacet:
        """Create an instance of V1IngestionFacet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1IngestionFacet:
        """Create an instance of V1IngestionFacet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1IngestionFacet.parse_obj(obj)

        _obj = V1IngestionFacet.parse_obj({
            "merge_enabled": obj.get("mergeEnabled"),
            "input_location": obj.get("inputLocation"),
            "etl_config": obj.get("etlConfig"),
            "success_emails": obj.get("successEmails"),
            "failure_emails": obj.get("failureEmails")
        })
        return _obj

