# coding: utf-8

"""
    Studio Notification

    For creating and managing Aladdin Studio notifications.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_notification.models.v1_range_filter import V1RangeFilter
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_notification.models.v1_studio_entity_type import V1StudioEntityType
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_notification.models.v1_studio_notification_event_type import V1StudioNotificationEventType

class V1StudioNotificationQuery(BaseModel):
    """
    The query required to perform a filter studio notifications call.
    """
    studio_entity_type: Optional[V1StudioEntityType] = Field(None, alias="studioEntityType")
    studio_entity_name: Optional[StrictStr] = Field(None, alias="studioEntityName")
    studio_notification_event_type: Optional[V1StudioNotificationEventType] = Field(None, alias="studioNotificationEventType")
    studio_notification_event_name: Optional[StrictStr] = Field(None, alias="studioNotificationEventName")
    user_id: Optional[StrictStr] = Field(None, alias="userId")
    date_range_filter: Optional[V1RangeFilter] = Field(None, alias="dateRangeFilter")
    __properties = ["studioEntityType", "studioEntityName", "studioNotificationEventType", "studioNotificationEventName", "userId", "dateRangeFilter"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1StudioNotificationQuery:
        """Create an instance of V1StudioNotificationQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of date_range_filter
        if self.date_range_filter:
            _dict['dateRangeFilter'] = self.date_range_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1StudioNotificationQuery:
        """Create an instance of V1StudioNotificationQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1StudioNotificationQuery.parse_obj(obj)

        _obj = V1StudioNotificationQuery.parse_obj({
            "studio_entity_type": obj.get("studioEntityType"),
            "studio_entity_name": obj.get("studioEntityName"),
            "studio_notification_event_type": obj.get("studioNotificationEventType"),
            "studio_notification_event_name": obj.get("studioNotificationEventName"),
            "user_id": obj.get("userId"),
            "date_range_filter": V1RangeFilter.from_dict(obj.get("dateRangeFilter")) if obj.get("dateRangeFilter") is not None else None
        })
        return _obj

