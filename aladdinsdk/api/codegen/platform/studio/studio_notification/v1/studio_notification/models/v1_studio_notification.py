# coding: utf-8

"""
    Studio Notification

    For creating and managing Aladdin Studio notifications.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_notification.models.v1_studio_notification_event import V1StudioNotificationEvent
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_notification.models.v1_studio_notification_scope import V1StudioNotificationScope
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_notification.models.v1_studio_recipient_scope import V1StudioRecipientScope

class V1StudioNotification(BaseModel):
    """
    V1StudioNotification
    """
    id: Optional[StrictStr] = None
    studio_notification_event: Optional[V1StudioNotificationEvent] = Field(None, alias="studioNotificationEvent")
    studio_notification_scope: Optional[V1StudioNotificationScope] = Field(None, alias="studioNotificationScope")
    sender: Optional[StrictStr] = None
    notification_subject: Optional[StrictStr] = Field(None, alias="notificationSubject")
    notification_message: Optional[StrictStr] = Field(None, alias="notificationMessage")
    creation_date_time: Optional[datetime] = Field(None, alias="creationDateTime")
    notification_metadata: Optional[Dict[str, Any]] = Field(None, alias="notificationMetadata")
    studio_recipient_scopes: Optional[conlist(V1StudioRecipientScope)] = Field(None, alias="studioRecipientScopes")
    __properties = ["id", "studioNotificationEvent", "studioNotificationScope", "sender", "notificationSubject", "notificationMessage", "creationDateTime", "notificationMetadata", "studioRecipientScopes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1StudioNotification:
        """Create an instance of V1StudioNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of studio_notification_event
        if self.studio_notification_event:
            _dict['studioNotificationEvent'] = self.studio_notification_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of studio_notification_scope
        if self.studio_notification_scope:
            _dict['studioNotificationScope'] = self.studio_notification_scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in studio_recipient_scopes (list)
        _items = []
        if self.studio_recipient_scopes:
            for _item in self.studio_recipient_scopes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['studioRecipientScopes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1StudioNotification:
        """Create an instance of V1StudioNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1StudioNotification.parse_obj(obj)

        _obj = V1StudioNotification.parse_obj({
            "id": obj.get("id"),
            "studio_notification_event": V1StudioNotificationEvent.from_dict(obj.get("studioNotificationEvent")) if obj.get("studioNotificationEvent") is not None else None,
            "studio_notification_scope": V1StudioNotificationScope.from_dict(obj.get("studioNotificationScope")) if obj.get("studioNotificationScope") is not None else None,
            "sender": obj.get("sender"),
            "notification_subject": obj.get("notificationSubject"),
            "notification_message": obj.get("notificationMessage"),
            "creation_date_time": obj.get("creationDateTime"),
            "notification_metadata": obj.get("notificationMetadata"),
            "studio_recipient_scopes": [V1StudioRecipientScope.from_dict(_item) for _item in obj.get("studioRecipientScopes")] if obj.get("studioRecipientScopes") is not None else None
        })
        return _obj

