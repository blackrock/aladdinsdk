# coding: utf-8

"""
    Studio Notification

    For creating and managing Aladdin Studio notifications.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_notification.models.v1_studio_recipient_type import V1StudioRecipientType

class V1StudioRecipientScope(BaseModel):
    """
    V1StudioRecipientScope
    """
    studio_recipient_id: Optional[StrictStr] = Field(None, alias="studioRecipientId")
    studio_recipient_type: Optional[V1StudioRecipientType] = Field(None, alias="studioRecipientType")
    studio_recipient_access_type: Optional[StrictStr] = Field(None, alias="studioRecipientAccessType")
    __properties = ["studioRecipientId", "studioRecipientType", "studioRecipientAccessType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1StudioRecipientScope:
        """Create an instance of V1StudioRecipientScope from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1StudioRecipientScope:
        """Create an instance of V1StudioRecipientScope from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1StudioRecipientScope.parse_obj(obj)

        _obj = V1StudioRecipientScope.parse_obj({
            "studio_recipient_id": obj.get("studioRecipientId"),
            "studio_recipient_type": obj.get("studioRecipientType"),
            "studio_recipient_access_type": obj.get("studioRecipientAccessType")
        })
        return _obj

