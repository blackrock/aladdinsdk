# coding: utf-8

"""
    Studio Notification Subscription

    For creating and managing Aladdin Studio notification subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_subscription.models.v1_studio_notification_action import V1StudioNotificationAction
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_subscription.models.v1_studio_notification_event import V1StudioNotificationEvent
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_subscription.models.v1_studio_notification_scope import V1StudioNotificationScope

class V1StudioSubscription(BaseModel):
    """
    V1StudioSubscription
    """
    id: Optional[StrictStr] = None
    user: Optional[StrictStr] = None
    studio_notification_event: Optional[V1StudioNotificationEvent] = Field(None, alias="studioNotificationEvent")
    studio_notification_scope: Optional[V1StudioNotificationScope] = Field(None, alias="studioNotificationScope")
    studio_notification_action: Optional[V1StudioNotificationAction] = Field(None, alias="studioNotificationAction")
    email: Optional[StrictStr] = None
    creation_date_time: Optional[datetime] = Field(None, alias="creationDateTime")
    __properties = ["id", "user", "studioNotificationEvent", "studioNotificationScope", "studioNotificationAction", "email", "creationDateTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1StudioSubscription:
        """Create an instance of V1StudioSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of studio_notification_event
        if self.studio_notification_event:
            _dict['studioNotificationEvent'] = self.studio_notification_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of studio_notification_scope
        if self.studio_notification_scope:
            _dict['studioNotificationScope'] = self.studio_notification_scope.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1StudioSubscription:
        """Create an instance of V1StudioSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1StudioSubscription.parse_obj(obj)

        _obj = V1StudioSubscription.parse_obj({
            "id": obj.get("id"),
            "user": obj.get("user"),
            "studio_notification_event": V1StudioNotificationEvent.from_dict(obj.get("studioNotificationEvent")) if obj.get("studioNotificationEvent") is not None else None,
            "studio_notification_scope": V1StudioNotificationScope.from_dict(obj.get("studioNotificationScope")) if obj.get("studioNotificationScope") is not None else None,
            "studio_notification_action": obj.get("studioNotificationAction"),
            "email": obj.get("email"),
            "creation_date_time": obj.get("creationDateTime")
        })
        return _obj

