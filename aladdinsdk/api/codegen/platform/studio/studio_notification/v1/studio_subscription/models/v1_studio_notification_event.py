# coding: utf-8

"""
    Studio Notification Subscription

    For creating and managing Aladdin Studio notification subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.platform.studio.studio_notification.v1.studio_subscription.models.v1_studio_notification_event_type import V1StudioNotificationEventType

class V1StudioNotificationEvent(BaseModel):
    """
    V1StudioNotificationEvent
    """
    studio_notification_event_type: Optional[V1StudioNotificationEventType] = Field(None, alias="studioNotificationEventType")
    event_name: Optional[StrictStr] = Field(None, alias="eventName")
    __properties = ["studioNotificationEventType", "eventName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1StudioNotificationEvent:
        """Create an instance of V1StudioNotificationEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1StudioNotificationEvent:
        """Create an instance of V1StudioNotificationEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1StudioNotificationEvent.parse_obj(obj)

        _obj = V1StudioNotificationEvent.parse_obj({
            "studio_notification_event_type": obj.get("studioNotificationEventType"),
            "event_name": obj.get("eventName")
        })
        return _obj

