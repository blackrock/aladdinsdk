# coding: utf-8

"""
    Aladdin User Group Permission

    API contains operations on Aladdin User Group Permission resource. Note: This is not intended to be used for Authorization.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.platform.access.permission.v1.UserGroupPermissionAPI.models.v1_delete_user_group_permission_request import V1DeleteUserGroupPermissionRequest

class UserGroupPermissionAPIBatchDeleteUserGroupPermissionRequest(BaseModel):
    """
    The request message for PermissionAPI.message BatchDeleteUserGroupPermissionRequest.
    """
    delete_requests: conlist(V1DeleteUserGroupPermissionRequest) = Field(..., alias="deleteRequests", description="Permissions to be removed from the User Group.  **Note:** A maximum of 100 permissions can be removed in a batch.")
    __properties = ["deleteRequests"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserGroupPermissionAPIBatchDeleteUserGroupPermissionRequest:
        """Create an instance of UserGroupPermissionAPIBatchDeleteUserGroupPermissionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in delete_requests (list)
        _items = []
        if self.delete_requests:
            for _item in self.delete_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deleteRequests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserGroupPermissionAPIBatchDeleteUserGroupPermissionRequest:
        """Create an instance of UserGroupPermissionAPIBatchDeleteUserGroupPermissionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserGroupPermissionAPIBatchDeleteUserGroupPermissionRequest.parse_obj(obj)

        _obj = UserGroupPermissionAPIBatchDeleteUserGroupPermissionRequest.parse_obj({
            "delete_requests": [V1DeleteUserGroupPermissionRequest.from_dict(_item) for _item in obj.get("deleteRequests")] if obj.get("deleteRequests") is not None else None
        })
        return _obj

