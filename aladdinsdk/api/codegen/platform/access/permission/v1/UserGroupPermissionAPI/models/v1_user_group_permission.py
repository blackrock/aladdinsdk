# coding: utf-8

"""
    Aladdin User Group Permission

    API contains operations on Aladdin User Group Permission resource. Note: This is not intended to be used for Authorization.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class V1UserGroupPermission(BaseModel):
    """
    UserGroupPermission describes the permissions for a User Group.
    """
    permission_id: StrictStr = Field(..., alias="permissionId")
    permission_group: StrictStr = Field(..., alias="permissionGroup", description="Identifies the grouping that is used by this permission type to define the scope: - PORTFOLIO - The permission grants access to portfolios. The portfolios are identified by either a portfolio_name from the portfolios table or a portfolio_group from the port_group table. If a portfolio_group is specified then that group is automatically expanded out to all of the portfolios that are contained within that group. - PORTGROUP - The permission grants access to a portfolio group defined in the port_group table. The specified portfolio group is not expanded out to its individual portfolios for this type of permission. - NONE - The permission must be added with * tbl_desc This permission group type identifies a list of items from the decodes table identified by the specified tbl_desc. Permissions may be granted for any item in that decodes entry. If permissions are granted for the perm_group \"*\" then the permission is granted for every item in the decodes entry.")
    __properties = ["permissionId", "permissionGroup"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1UserGroupPermission:
        """Create an instance of V1UserGroupPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1UserGroupPermission:
        """Create an instance of V1UserGroupPermission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1UserGroupPermission.parse_obj(obj)

        _obj = V1UserGroupPermission.parse_obj({
            "permission_id": obj.get("permissionId"),
            "permission_group": obj.get("permissionGroup")
        })
        return _obj

