# coding: utf-8

"""
    Aladdin User Group Member

    API contains operations on Aladdin User Group Member resource. Note: This is not intended to be used for Authorization.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class UserGroupMemberAPIBatchDeleteUserGroupMembersRequest(BaseModel):
    """
    The request message for UserGroupMemberAPI.BatchDeleteUserGroupMembers.
    """
    ids: conlist(StrictStr) = Field(..., description="Users to be removed from the User Group.  **Note:** A maximum of 100 users can be removed in a batch.")
    __properties = ["ids"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserGroupMemberAPIBatchDeleteUserGroupMembersRequest:
        """Create an instance of UserGroupMemberAPIBatchDeleteUserGroupMembersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserGroupMemberAPIBatchDeleteUserGroupMembersRequest:
        """Create an instance of UserGroupMemberAPIBatchDeleteUserGroupMembersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserGroupMemberAPIBatchDeleteUserGroupMembersRequest.parse_obj(obj)

        _obj = UserGroupMemberAPIBatchDeleteUserGroupMembersRequest.parse_obj({
            "ids": obj.get("ids")
        })
        return _obj

