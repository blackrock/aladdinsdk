# coding: utf-8

"""
    Aladdin User Group

    API contains operations on Aladdin User Group resource. Note: This is not intended to be used for Authorization.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.platform.access.user_group.v1.UserGroupAPI.models.v1_user_group import V1UserGroup

class V1FilterUserGroupsResponse(BaseModel):
    """
    The response message for UserGroups.FilterUserGroup.
    """
    user_groups: Optional[conlist(V1UserGroup)] = Field(None, alias="userGroups", description="The User Groups to be returned.")
    next_page_token: Optional[StrictStr] = Field(None, alias="nextPageToken", description="A token, which can be sent as 'page_token' to retrieve the next page. If this field is omitted, there are no subsequent pages.")
    __properties = ["userGroups", "nextPageToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterUserGroupsResponse:
        """Create an instance of V1FilterUserGroupsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in user_groups (list)
        _items = []
        if self.user_groups:
            for _item in self.user_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['userGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterUserGroupsResponse:
        """Create an instance of V1FilterUserGroupsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterUserGroupsResponse.parse_obj(obj)

        _obj = V1FilterUserGroupsResponse.parse_obj({
            "user_groups": [V1UserGroup.from_dict(_item) for _item in obj.get("userGroups")] if obj.get("userGroups") is not None else None,
            "next_page_token": obj.get("nextPageToken")
        })
        return _obj

