# coding: utf-8

"""
    Aladdin User Group

    API contains operations on Aladdin User Group resource. Note: This is not intended to be used for Authorization.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from aladdinsdk.api.codegen.platform.access.user_group.v1.UserGroupAPI.models.v1_user_group_query import V1UserGroupQuery

class V1FilterUserGroupsRequest(BaseModel):
    """
    The request message for UserGroupAPI.FilterUserGroup.
    """
    page_size: Optional[StrictInt] = Field(None, alias="pageSize", description="The maximum number of records to return. The service may return fewer than this value. If unspecified, at most 1000 records will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")
    page_token: Optional[StrictStr] = Field(None, alias="pageToken", description="A page token, received from a previous 'FilterUserGroup' call. Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to 'FilterUserGroup' must match the call that provided the page token.")
    user_group_query: Optional[V1UserGroupQuery] = Field(None, alias="userGroupQuery")
    __properties = ["pageSize", "pageToken", "userGroupQuery"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterUserGroupsRequest:
        """Create an instance of V1FilterUserGroupsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user_group_query
        if self.user_group_query:
            _dict['userGroupQuery'] = self.user_group_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterUserGroupsRequest:
        """Create an instance of V1FilterUserGroupsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterUserGroupsRequest.parse_obj(obj)

        _obj = V1FilterUserGroupsRequest.parse_obj({
            "page_size": obj.get("pageSize"),
            "page_token": obj.get("pageToken"),
            "user_group_query": V1UserGroupQuery.from_dict(obj.get("userGroupQuery")) if obj.get("userGroupQuery") is not None else None
        })
        return _obj

