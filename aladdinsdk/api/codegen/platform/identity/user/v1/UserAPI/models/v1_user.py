# coding: utf-8

"""
    Aladdin User

     API contains operations on Aladdin User resource.  # Description  An Aladdin User is a person or a system account that can login into  Aladdin client's website and may be granted access to Aladdin applications.  ## Example Use Cases   This API may be used to:   - create records of Aladdin Client's employees   - retrieve information about     = Aladdin Client's employees granted access to Aladdin     = BlackRock employees granted access to client's Aladdin products     = bot accounts granted access to Aladdin   - modify Aladdin Client's employees records in Aladdin system   - search User records by email or client's internal user id (if populated)  ## Implementation Status  This API is production ready. In the future it will be enhanced with additional search capabilities    [Developer Guide]: apps/aladdin-developer-portal/#/guides/developer-guide   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from aladdinsdk.api.codegen.platform.identity.user.v1.UserAPI.models.enums_user_type import EnumsUserType
from aladdinsdk.api.codegen.platform.identity.user.v1.UserAPI.models.user_user_profile import UserUserProfile
from aladdinsdk.api.codegen.platform.identity.user.v1.UserAPI.models.user_user_record_status import UserUserRecordStatus

class V1User(BaseModel):
    """
    V1User
    """
    id: Optional[StrictStr] = Field(None, description="Resources must have a 'id' field.  Id describes the computer or human assigned resource identifier. Login Id")
    alternative_user_ids: Optional[Dict[str, StrictStr]] = Field(None, alias="alternativeUserIds", description="A map of alternative user identifiers, may contain unique user identifiers per different systems of records. At the time only \"clientUserId\" key is supported for external clients. The \"clientUserId\" is used to store client organization's internal user id. One of the common uses for such an id is to specify the value of the \"subject\" in SAML SSO assertions.")
    user_type: Optional[EnumsUserType] = Field(None, alias="userType")
    profile: Optional[UserUserProfile] = None
    start_date: Optional[date] = Field(None, alias="startDate")
    termination_date: Optional[date] = Field(None, alias="terminationDate", description="The date user was deactivated as Aladdin user.")
    last_login_date: Optional[date] = Field(None, alias="lastLoginDate")
    locked: Optional[StrictBool] = Field(None, description="Boolean flag telling whether the user is locked.")
    active: Optional[StrictBool] = Field(None, description="Boolean flag telling whether the user's account is active.")
    user_record_status: Optional[UserUserRecordStatus] = Field(None, alias="userRecordStatus")
    __properties = ["id", "alternativeUserIds", "userType", "profile", "startDate", "terminationDate", "lastLoginDate", "locked", "active", "userRecordStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1User:
        """Create an instance of V1User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_record_status
        if self.user_record_status:
            _dict['userRecordStatus'] = self.user_record_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1User:
        """Create an instance of V1User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1User.parse_obj(obj)

        _obj = V1User.parse_obj({
            "id": obj.get("id"),
            "alternative_user_ids": obj.get("alternativeUserIds"),
            "user_type": obj.get("userType"),
            "profile": UserUserProfile.from_dict(obj.get("profile")) if obj.get("profile") is not None else None,
            "start_date": obj.get("startDate"),
            "termination_date": obj.get("terminationDate"),
            "last_login_date": obj.get("lastLoginDate"),
            "locked": obj.get("locked"),
            "active": obj.get("active"),
            "user_record_status": UserUserRecordStatus.from_dict(obj.get("userRecordStatus")) if obj.get("userRecordStatus") is not None else None
        })
        return _obj

