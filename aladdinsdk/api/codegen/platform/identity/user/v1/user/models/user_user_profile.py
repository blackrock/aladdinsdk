# coding: utf-8

"""
    Aladdin User

     API contains operations on Aladdin User resource.  # Description  An Aladdin User is a person or a system account that can login into  Aladdin client's website and may be granted access to Aladdin applications.  ## Example Use Cases   This API may be used to:   - create records of Aladdin Client's employees   - retrieve information about     = Aladdin Client's employees granted access to Aladdin     = BlackRock employees granted access to client's Aladdin products     = bot accounts granted access to Aladdin   - modify Aladdin Client's employees records in Aladdin system   - search User records by email or client's internal user id (if populated)  ## Implementation Status  This API is production ready. In the future it will be enhanced with additional search capabilities    [Developer Guide]: apps/aladdin-developer-portal/#/guides/developer-guide   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class UserUserProfile(BaseModel):
    """
    UserUserProfile
    """
    email: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(None, alias="firstName")
    last_name: Optional[StrictStr] = Field(None, alias="lastName")
    middle_name: Optional[StrictStr] = Field(None, alias="middleName")
    title: Optional[StrictStr] = None
    office_location: Optional[StrictStr] = Field(None, alias="officeLocation")
    office_phone: Optional[StrictStr] = Field(None, alias="officePhone")
    alternative_phone: Optional[StrictStr] = Field(None, alias="alternativePhone")
    fax_phone: Optional[StrictStr] = Field(None, alias="faxPhone")
    initials: Optional[StrictStr] = None
    department: Optional[StrictStr] = Field(None, description="User's department Department is internally mapped into roles. The AM_ROLE_MAP decode contains further role mapping data.")
    client_abbreviation: Optional[StrictStr] = Field(None, alias="clientAbbreviation", description="User's primary client abbreviation: the client where the user is employed.")
    __properties = ["email", "firstName", "lastName", "middleName", "title", "officeLocation", "officePhone", "alternativePhone", "faxPhone", "initials", "department", "clientAbbreviation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserUserProfile:
        """Create an instance of UserUserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserUserProfile:
        """Create an instance of UserUserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserUserProfile.parse_obj(obj)

        _obj = UserUserProfile.parse_obj({
            "email": obj.get("email"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "middle_name": obj.get("middleName"),
            "title": obj.get("title"),
            "office_location": obj.get("officeLocation"),
            "office_phone": obj.get("officePhone"),
            "alternative_phone": obj.get("alternativePhone"),
            "fax_phone": obj.get("faxPhone"),
            "initials": obj.get("initials"),
            "department": obj.get("department"),
            "client_abbreviation": obj.get("clientAbbreviation")
        })
        return _obj

