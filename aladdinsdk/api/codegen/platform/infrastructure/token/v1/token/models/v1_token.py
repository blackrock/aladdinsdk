# coding: utf-8

"""
    Token

    Handling and retrieval of tokens from Okta.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1Token(BaseModel):
    """
    Token represents the credentials used to authorize the requests to access protected resources on the OAuth 2.0 provider's backend.
    """
    application_name: Optional[StrictStr] = Field(None, alias="applicationName", description="application_name is the full name of the authorizing application")
    access_token: Optional[StrictStr] = Field(None, alias="accessToken", description="An access token is a string used when making authenticated requests to an API. It represents that the user has authorized a third-party application access to their account")
    refresh_token: Optional[StrictStr] = Field(None, alias="refreshToken", description="Refresh tokens are used to request a new access token from an authorization server - in this case a new access token will be retrieved from Okta on behalf of the user")
    token_type: Optional[StrictStr] = Field(None, alias="tokenType", description="token_type is the type of token.  The Type method returns either this or \"Bearer\", the default.")
    __properties = ["applicationName", "accessToken", "refreshToken", "tokenType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Token:
        """Create an instance of V1Token from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Token:
        """Create an instance of V1Token from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Token.parse_obj(obj)

        _obj = V1Token.parse_obj({
            "application_name": obj.get("applicationName"),
            "access_token": obj.get("accessToken"),
            "refresh_token": obj.get("refreshToken"),
            "token_type": obj.get("tokenType")
        })
        return _obj

