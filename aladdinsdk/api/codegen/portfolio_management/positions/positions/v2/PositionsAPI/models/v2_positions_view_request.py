# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v1_aggregation_definition import V1AggregationDefinition
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v1_data_filter_tree import V1DataFilterTree
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v1_relative_date import V1RelativeDate
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v1_view_filter import V1ViewFilter
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v2_credit_view_setting import V2CreditViewSetting
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v2_unmapped_position_type import V2UnmappedPositionType

class V2PositionsViewRequest(BaseModel):
    """
    A request to fetch data for a given list of entities like positions, targets, ect.
    """
    attribute_ids: Optional[conlist(StrictStr)] = Field(None, alias="attributeIds")
    filter: Optional[V1DataFilterTree] = None
    view_filter: Optional[V1ViewFilter] = Field(None, alias="viewFilter")
    aggregation: Optional[V1AggregationDefinition] = None
    unmapped_position_type: Optional[V2UnmappedPositionType] = Field(None, alias="unmappedPositionType")
    retain_matched_records_only: Optional[StrictBool] = Field(None, alias="retainMatchedRecordsOnly", description="Indicator to show only matched records between entities.")
    credit_view_setting: Optional[V2CreditViewSetting] = Field(None, alias="creditViewSetting")
    fetch_entity_settle_date: Optional[V1RelativeDate] = Field(None, alias="fetchEntitySettleDate")
    __properties = ["attributeIds", "filter", "viewFilter", "aggregation", "unmappedPositionType", "retainMatchedRecordsOnly", "creditViewSetting", "fetchEntitySettleDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2PositionsViewRequest:
        """Create an instance of V2PositionsViewRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view_filter
        if self.view_filter:
            _dict['viewFilter'] = self.view_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aggregation
        if self.aggregation:
            _dict['aggregation'] = self.aggregation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_view_setting
        if self.credit_view_setting:
            _dict['creditViewSetting'] = self.credit_view_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fetch_entity_settle_date
        if self.fetch_entity_settle_date:
            _dict['fetchEntitySettleDate'] = self.fetch_entity_settle_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2PositionsViewRequest:
        """Create an instance of V2PositionsViewRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2PositionsViewRequest.parse_obj(obj)

        _obj = V2PositionsViewRequest.parse_obj({
            "attribute_ids": obj.get("attributeIds"),
            "filter": V1DataFilterTree.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "view_filter": V1ViewFilter.from_dict(obj.get("viewFilter")) if obj.get("viewFilter") is not None else None,
            "aggregation": V1AggregationDefinition.from_dict(obj.get("aggregation")) if obj.get("aggregation") is not None else None,
            "unmapped_position_type": obj.get("unmappedPositionType"),
            "retain_matched_records_only": obj.get("retainMatchedRecordsOnly"),
            "credit_view_setting": V2CreditViewSetting.from_dict(obj.get("creditViewSetting")) if obj.get("creditViewSetting") is not None else None,
            "fetch_entity_settle_date": V1RelativeDate.from_dict(obj.get("fetchEntitySettleDate")) if obj.get("fetchEntitySettleDate") is not None else None
        })
        return _obj

