# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v1_date_mode import V1DateMode
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v1_relative_date import V1RelativeDate

class V1DateSettings(BaseModel):
    """
    V1DateSettings
    """
    calendar_date: Optional[date] = Field(None, alias="calendarDate")
    position_date: Optional[V1RelativeDate] = Field(None, alias="positionDate")
    trade_date: Optional[V1RelativeDate] = Field(None, alias="tradeDate")
    holiday_calendar: Optional[StrictStr] = Field(None, alias="holidayCalendar")
    date_mode: Optional[V1DateMode] = Field(None, alias="dateMode")
    settle_date: Optional[V1RelativeDate] = Field(None, alias="settleDate")
    __properties = ["calendarDate", "positionDate", "tradeDate", "holidayCalendar", "dateMode", "settleDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1DateSettings:
        """Create an instance of V1DateSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of position_date
        if self.position_date:
            _dict['positionDate'] = self.position_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trade_date
        if self.trade_date:
            _dict['tradeDate'] = self.trade_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settle_date
        if self.settle_date:
            _dict['settleDate'] = self.settle_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1DateSettings:
        """Create an instance of V1DateSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1DateSettings.parse_obj(obj)

        _obj = V1DateSettings.parse_obj({
            "calendar_date": obj.get("calendarDate"),
            "position_date": V1RelativeDate.from_dict(obj.get("positionDate")) if obj.get("positionDate") is not None else None,
            "trade_date": V1RelativeDate.from_dict(obj.get("tradeDate")) if obj.get("tradeDate") is not None else None,
            "holiday_calendar": obj.get("holidayCalendar"),
            "date_mode": obj.get("dateMode"),
            "settle_date": V1RelativeDate.from_dict(obj.get("settleDate")) if obj.get("settleDate") is not None else None
        })
        return _obj

