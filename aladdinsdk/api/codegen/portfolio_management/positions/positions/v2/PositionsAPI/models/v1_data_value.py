# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.tablev1_null_value import Tablev1NullValue
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.type_money import TypeMoney
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v1_decimal64 import V1Decimal64

class V1DataValue(BaseModel):
    """
    V1DataValue
    """
    null_value: Optional[Tablev1NullValue] = Field(None, alias="nullValue")
    numeric_value: Optional[StrictStr] = Field(None, alias="numericValue")
    string_value: Optional[StrictStr] = Field(None, alias="stringValue")
    date_value: Optional[date] = Field(None, alias="dateValue")
    decimal_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="decimalValue")
    time_value: Optional[datetime] = Field(None, alias="timeValue")
    boolean_value: Optional[StrictBool] = Field(None, alias="booleanValue")
    decimal64_value: Optional[V1Decimal64] = Field(None, alias="decimal64Value")
    money_value: Optional[TypeMoney] = Field(None, alias="moneyValue")
    __properties = ["nullValue", "numericValue", "stringValue", "dateValue", "decimalValue", "timeValue", "booleanValue", "decimal64Value", "moneyValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1DataValue:
        """Create an instance of V1DataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of decimal64_value
        if self.decimal64_value:
            _dict['decimal64Value'] = self.decimal64_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of money_value
        if self.money_value:
            _dict['moneyValue'] = self.money_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1DataValue:
        """Create an instance of V1DataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1DataValue.parse_obj(obj)

        _obj = V1DataValue.parse_obj({
            "null_value": obj.get("nullValue"),
            "numeric_value": obj.get("numericValue"),
            "string_value": obj.get("stringValue"),
            "date_value": obj.get("dateValue"),
            "decimal_value": obj.get("decimalValue"),
            "time_value": obj.get("timeValue"),
            "boolean_value": obj.get("booleanValue"),
            "decimal64_value": V1Decimal64.from_dict(obj.get("decimal64Value")) if obj.get("decimal64Value") is not None else None,
            "money_value": TypeMoney.from_dict(obj.get("moneyValue")) if obj.get("moneyValue") is not None else None
        })
        return _obj

