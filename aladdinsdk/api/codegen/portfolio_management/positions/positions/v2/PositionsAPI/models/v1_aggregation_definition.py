# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v1_aggregate_measure import V1AggregateMeasure

class V1AggregationDefinition(BaseModel):
    """
    V1AggregationDefinition
    """
    id: StrictStr = Field(...)
    aggregate_measures: Optional[conlist(V1AggregateMeasure)] = Field(None, alias="aggregateMeasures")
    group_by_attribute_ids: Optional[conlist(StrictStr)] = Field(None, alias="groupByAttributeIds")
    __properties = ["id", "aggregateMeasures", "groupByAttributeIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AggregationDefinition:
        """Create an instance of V1AggregationDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in aggregate_measures (list)
        _items = []
        if self.aggregate_measures:
            for _item in self.aggregate_measures:
                if _item:
                    _items.append(_item.to_dict())
            _dict['aggregateMeasures'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AggregationDefinition:
        """Create an instance of V1AggregationDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AggregationDefinition.parse_obj(obj)

        _obj = V1AggregationDefinition.parse_obj({
            "id": obj.get("id"),
            "aggregate_measures": [V1AggregateMeasure.from_dict(_item) for _item in obj.get("aggregateMeasures")] if obj.get("aggregateMeasures") is not None else None,
            "group_by_attribute_ids": obj.get("groupByAttributeIds")
        })
        return _obj

