# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class TypesPortfolioAsOfStats(BaseModel):
    """
    Portfolio stats for the positions api, for now only contains timestamp info.
    """
    portfolio_name: Optional[StrictStr] = Field(None, alias="portfolioName")
    portfolio_discovery_time: Optional[datetime] = Field(None, alias="portfolioDiscoveryTime", description="The latest as of time of the portfolio.")
    __properties = ["portfolioName", "portfolioDiscoveryTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TypesPortfolioAsOfStats:
        """Create an instance of TypesPortfolioAsOfStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TypesPortfolioAsOfStats:
        """Create an instance of TypesPortfolioAsOfStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TypesPortfolioAsOfStats.parse_obj(obj)

        _obj = TypesPortfolioAsOfStats.parse_obj({
            "portfolio_name": obj.get("portfolioName"),
            "portfolio_discovery_time": obj.get("portfolioDiscoveryTime")
        })
        return _obj

