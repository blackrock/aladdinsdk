# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v2.PositionsAPI.models.v2_positions_query import V2PositionsQuery

class V2FilterPositionsRequest(BaseModel):
    """
    The request message for PositionsAPI.FilterPositions.
    """
    query: Optional[V2PositionsQuery] = None
    page_size: Optional[StrictInt] = Field(None, alias="pageSize", description="NOTE: NOT AVAILABLE The maximum value is 50,000. If unspecified, the default value is 1,000.")
    page_token: Optional[StrictStr] = Field(None, alias="pageToken", description="NOTE: NOT AVAILABLE A page token, received from a previous 'FilterPositionsRequest' call. Provide this to retrieve the subsequent page. Provide this to retrieve the subsequent page.")
    __properties = ["query", "pageSize", "pageToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2FilterPositionsRequest:
        """Create an instance of V2FilterPositionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2FilterPositionsRequest:
        """Create an instance of V2FilterPositionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2FilterPositionsRequest.parse_obj(obj)

        _obj = V2FilterPositionsRequest.parse_obj({
            "query": V2PositionsQuery.from_dict(obj.get("query")) if obj.get("query") is not None else None,
            "page_size": obj.get("pageSize"),
            "page_token": obj.get("pageToken")
        })
        return _obj

