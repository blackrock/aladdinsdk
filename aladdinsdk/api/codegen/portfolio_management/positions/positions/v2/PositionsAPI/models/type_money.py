# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class TypeMoney(BaseModel):
    """
    Represents an amount of money with its currency type.
    """
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode", description="The three-letter currency code defined in ISO 4217.")
    units: Optional[StrictStr] = Field(None, description="The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.")
    nanos: Optional[StrictInt] = Field(None, description="Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.")
    __properties = ["currencyCode", "units", "nanos"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TypeMoney:
        """Create an instance of TypeMoney from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TypeMoney:
        """Create an instance of TypeMoney from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TypeMoney.parse_obj(obj)

        _obj = TypeMoney.parse_obj({
            "currency_code": obj.get("currencyCode"),
            "units": obj.get("units"),
            "nanos": obj.get("nanos")
        })
        return _obj

