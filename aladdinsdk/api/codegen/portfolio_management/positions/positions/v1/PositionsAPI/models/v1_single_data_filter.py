# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v1.PositionsAPI.models.v1_assert_operator import V1AssertOperator
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v1.PositionsAPI.models.v1_data_value import V1DataValue
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v1.PositionsAPI.models.v1_range import V1Range

class V1SingleDataFilter(BaseModel):
    """
    V1SingleDataFilter
    """
    assert_operator: Optional[V1AssertOperator] = Field(None, alias="assertOperator")
    attribute_id: StrictStr = Field(..., alias="attributeId")
    data_value: Optional[V1DataValue] = Field(None, alias="dataValue")
    data_value_range: Optional[V1Range] = Field(None, alias="dataValueRange")
    __properties = ["assertOperator", "attributeId", "dataValue", "dataValueRange"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SingleDataFilter:
        """Create an instance of V1SingleDataFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data_value
        if self.data_value:
            _dict['dataValue'] = self.data_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_value_range
        if self.data_value_range:
            _dict['dataValueRange'] = self.data_value_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SingleDataFilter:
        """Create an instance of V1SingleDataFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SingleDataFilter.parse_obj(obj)

        _obj = V1SingleDataFilter.parse_obj({
            "assert_operator": obj.get("assertOperator"),
            "attribute_id": obj.get("attributeId"),
            "data_value": V1DataValue.from_dict(obj.get("dataValue")) if obj.get("dataValue") is not None else None,
            "data_value_range": V1Range.from_dict(obj.get("dataValueRange")) if obj.get("dataValueRange") is not None else None
        })
        return _obj

