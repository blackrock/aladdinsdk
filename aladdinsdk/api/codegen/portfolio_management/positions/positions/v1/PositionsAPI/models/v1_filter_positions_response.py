# coding: utf-8

"""
    Positions

    API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v1.PositionsAPI.models.v1_data_table import V1DataTable
from aladdinsdk.api.codegen.portfolio_management.positions.positions.v1.PositionsAPI.models.v1_portfolio_position_warnings import V1PortfolioPositionWarnings

class V1FilterPositionsResponse(BaseModel):
    """
    V1FilterPositionsResponse
    """
    data_table: Optional[V1DataTable] = Field(None, alias="dataTable")
    position_warnings: Optional[Dict[str, V1PortfolioPositionWarnings]] = Field(None, alias="positionWarnings")
    next_page_token: Optional[StrictStr] = Field(None, alias="nextPageToken")
    __properties = ["dataTable", "positionWarnings", "nextPageToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterPositionsResponse:
        """Create an instance of V1FilterPositionsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data_table
        if self.data_table:
            _dict['dataTable'] = self.data_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in position_warnings (dict)
        _field_dict = {}
        if self.position_warnings:
            for _key in self.position_warnings:
                if self.position_warnings[_key]:
                    _field_dict[_key] = self.position_warnings[_key].to_dict()
            _dict['positionWarnings'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterPositionsResponse:
        """Create an instance of V1FilterPositionsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterPositionsResponse.parse_obj(obj)

        _obj = V1FilterPositionsResponse.parse_obj({
            "data_table": V1DataTable.from_dict(obj.get("dataTable")) if obj.get("dataTable") is not None else None,
            "position_warnings": dict(
                (_k, V1PortfolioPositionWarnings.from_dict(_v))
                for _k, _v in obj.get("positionWarnings").items()
            )
            if obj.get("positionWarnings") is not None
            else None,
            "next_page_token": obj.get("nextPageToken")
        })
        return _obj

