# coding: utf-8

"""
    Cash Ladder

    Cash Ladder provides a settlement date based ladder of cash balances for all the exposure currencies for a given portfolio group and cash date.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.enums_currency_published_status import EnumsCurrencyPublishedStatus
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.type_date_time import TypeDateTime
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.v2_settle_date_balance import V2SettleDateBalance

class V2PortfolioCurrencyLadder(BaseModel):
    """
    V2PortfolioCurrencyLadder
    """
    portfolio_ticker: Optional[StrictStr] = Field(None, alias="portfolioTicker")
    portfolio_name: Optional[StrictStr] = Field(None, alias="portfolioName")
    cash_balance_security_currency_code: Optional[StrictStr] = Field(None, alias="cashBalanceSecurityCurrencyCode")
    portfolio_base_currency_code: Optional[StrictStr] = Field(None, alias="portfolioBaseCurrencyCode")
    portfolio_operating_currency_code: Optional[StrictStr] = Field(None, alias="portfolioOperatingCurrencyCode")
    currency_publish_status: Optional[EnumsCurrencyPublishedStatus] = Field(None, alias="currencyPublishStatus")
    currency_published_time: Optional[TypeDateTime] = Field(None, alias="currencyPublishedTime")
    sod_nav: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sodNav")
    intraday_nav: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="intradayNav")
    standing_instruction_counter_currency_code: Optional[StrictStr] = Field(None, alias="standingInstructionCounterCurrencyCode")
    fx_corp_action: Optional[StrictStr] = Field(None, alias="fxCorpAction")
    fx_income: Optional[StrictStr] = Field(None, alias="fxIncome")
    fx_new_cash: Optional[StrictStr] = Field(None, alias="fxNewCash")
    fx_trade: Optional[StrictStr] = Field(None, alias="fxTrade")
    settle_date_balances: Optional[conlist(V2SettleDateBalance)] = Field(None, alias="settleDateBalances")
    sod_swift_balance: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sodSwiftBalance")
    __properties = ["portfolioTicker", "portfolioName", "cashBalanceSecurityCurrencyCode", "portfolioBaseCurrencyCode", "portfolioOperatingCurrencyCode", "currencyPublishStatus", "currencyPublishedTime", "sodNav", "intradayNav", "standingInstructionCounterCurrencyCode", "fxCorpAction", "fxIncome", "fxNewCash", "fxTrade", "settleDateBalances", "sodSwiftBalance"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2PortfolioCurrencyLadder:
        """Create an instance of V2PortfolioCurrencyLadder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of currency_published_time
        if self.currency_published_time:
            _dict['currencyPublishedTime'] = self.currency_published_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in settle_date_balances (list)
        _items = []
        if self.settle_date_balances:
            for _item in self.settle_date_balances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['settleDateBalances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2PortfolioCurrencyLadder:
        """Create an instance of V2PortfolioCurrencyLadder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2PortfolioCurrencyLadder.parse_obj(obj)

        _obj = V2PortfolioCurrencyLadder.parse_obj({
            "portfolio_ticker": obj.get("portfolioTicker"),
            "portfolio_name": obj.get("portfolioName"),
            "cash_balance_security_currency_code": obj.get("cashBalanceSecurityCurrencyCode"),
            "portfolio_base_currency_code": obj.get("portfolioBaseCurrencyCode"),
            "portfolio_operating_currency_code": obj.get("portfolioOperatingCurrencyCode"),
            "currency_publish_status": obj.get("currencyPublishStatus"),
            "currency_published_time": TypeDateTime.from_dict(obj.get("currencyPublishedTime")) if obj.get("currencyPublishedTime") is not None else None,
            "sod_nav": obj.get("sodNav"),
            "intraday_nav": obj.get("intradayNav"),
            "standing_instruction_counter_currency_code": obj.get("standingInstructionCounterCurrencyCode"),
            "fx_corp_action": obj.get("fxCorpAction"),
            "fx_income": obj.get("fxIncome"),
            "fx_new_cash": obj.get("fxNewCash"),
            "fx_trade": obj.get("fxTrade"),
            "settle_date_balances": [V2SettleDateBalance.from_dict(_item) for _item in obj.get("settleDateBalances")] if obj.get("settleDateBalances") is not None else None,
            "sod_swift_balance": obj.get("sodSwiftBalance")
        })
        return _obj

