# coding: utf-8

"""
    Cash Ladder

    Cash Ladder provides a settlement date based ladder of cash balances for all the exposure currencies for a given portfolio group and cash date.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.enums_cash_balance_view_currency import EnumsCashBalanceViewCurrency
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.enumsnew_cash_trade_date import EnumsnewCashTradeDate
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.enumsopen_date import EnumsopenDate
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.enumsorder_type import EnumsorderType
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.enumstrade_date import EnumstradeDate

class V2CashLadderQuery(BaseModel):
    """
    V2CashLadderQuery
    """
    portfolio_group_tickers: conlist(StrictStr) = Field(..., alias="portfolioGroupTickers", description="Name or a list of names of the portfolios or portfolioGroups (maximum 100) for which cash balances are requested.")
    cash_date: date = Field(..., alias="cashDate", description="Cash date for which cash balances are requested.")
    include_stored_cash: Optional[StrictBool] = Field(None, alias="includeStoredCash", description="This flag indicates if cash balances include stored cash. Stored cash refers to sod cash, which is yet to be fully reconciled between bank (acting as a custodian) and Aladdin.")
    include_pni: Optional[StrictBool] = Field(None, alias="includePni", description="This flag indicates if cash balances include principal and interest in sod balances.")
    include_intraday_trades_cash_impact: Optional[StrictBool] = Field(None, alias="includeIntradayTradesCashImpact", description="This flag indicates if cash balances include the cash impact from trades posted intraday.")
    include_intraday_auth_and_active_orders_cash_impact: Optional[StrictBool] = Field(None, alias="includeIntradayAuthAndActiveOrdersCashImpact", description="This flag indicates if cash balances include the cash impact from orders posted intraday, which are either in the active or authorized status.")
    include_intraday_open_orders_cash_impact: Optional[StrictBool] = Field(None, alias="includeIntradayOpenOrdersCashImpact", description="This flag indicates if cash balances include the cash impact from Open Orders posted intraday.")
    include_intraday_confirmed_new_cash: Optional[StrictBool] = Field(None, alias="includeIntradayConfirmedNewCash", description="This flag indicates if cash balances include new cash entries in the confirmed status posted intraday.")
    include_intraday_auth_new_cash: Optional[StrictBool] = Field(None, alias="includeIntradayAuthNewCash", description="This flag indicates if cash balances include new cash entries in the authorized status posted intraday.")
    include_intraday_open_new_cash: Optional[StrictBool] = Field(None, alias="includeIntradayOpenNewCash", description="This flag indicates if cash balances include new cash entries in the open status posted intraday.")
    include_stif_ich: Optional[StrictBool] = Field(None, alias="includeStifIch", description="This flag indicates if cash balances include the trade date impact of stif or ich cash positions.")
    cash_balance_view_currency_setting: Optional[EnumsCashBalanceViewCurrency] = Field(None, alias="cashBalanceViewCurrencySetting")
    include_collateral_pledged: Optional[StrictBool] = Field(None, alias="includeCollateralPledged", description="This flag indicates if cash balances include the collateral pledged impact of sod trades and intraday activities.")
    include_collateral_held: Optional[StrictBool] = Field(None, alias="includeCollateralHeld", description="This flag indicates if cash balances include the collateral held impact of sod trades and intraday activities.")
    default_calendar: Optional[StrictStr] = Field(None, alias="defaultCalendar", description="Default calendar to be used for calculating the ladder and activity settle dates. Use the decodes API to look up valid default calendars using MKT_CALENDARS.")
    cash_balance_trade_date_scope: Optional[EnumstradeDate] = Field(None, alias="cashBalanceTradeDateScope")
    cash_balance_open_date_scope: Optional[EnumsopenDate] = Field(None, alias="cashBalanceOpenDateScope")
    cash_balance_new_cash_trade_date_scope: Optional[EnumsnewCashTradeDate] = Field(None, alias="cashBalanceNewCashTradeDateScope")
    cash_balance_order_type_scope: Optional[EnumsorderType] = Field(None, alias="cashBalanceOrderTypeScope")
    enable_prefunding: Optional[StrictBool] = Field(None, alias="enablePrefunding", description="This flag indicates if settle dates need to be adjusted on the cash ladder based on the prefunding rules.")
    include_collateral_projected_held: Optional[StrictBool] = Field(None, alias="includeCollateralProjectedHeld", description="This flag indicates if cash balances should include the impact of projected held collateral.")
    include_collateral_projected_pledged: Optional[StrictBool] = Field(None, alias="includeCollateralProjectedPledged", description="This flag indicates if cash balances should include the impact of projected pledged collateral.")
    include_unfunded_commitment: Optional[StrictBool] = Field(None, alias="includeUnfundedCommitment", description="This flag indicates if cash balances should include the impact of unfunded commitments in private equity markets.")
    specific_settle_date_projections: Optional[conlist(StrictStr)] = Field(None, alias="specificSettleDateProjections", description="This field can be used to enter settle dates in S format (like S, S+1...S+45...S+90 etc.) to retrieve specific cash projections. The field respects CashLadder_maxHorizon token at a client and can return any specific settle date projections up to that date. If left empty, API would return S to S+7, S+30, S+60, S+90 projections in the default mode.")
    include_intraday_misc_cash: Optional[StrictBool] = Field(None, alias="includeIntradayMiscCash", description="This field decides whether cash impact of intraday misc. cash transactions is going to be included in the cash ladder or not.")
    __properties = ["portfolioGroupTickers", "cashDate", "includeStoredCash", "includePni", "includeIntradayTradesCashImpact", "includeIntradayAuthAndActiveOrdersCashImpact", "includeIntradayOpenOrdersCashImpact", "includeIntradayConfirmedNewCash", "includeIntradayAuthNewCash", "includeIntradayOpenNewCash", "includeStifIch", "cashBalanceViewCurrencySetting", "includeCollateralPledged", "includeCollateralHeld", "defaultCalendar", "cashBalanceTradeDateScope", "cashBalanceOpenDateScope", "cashBalanceNewCashTradeDateScope", "cashBalanceOrderTypeScope", "enablePrefunding", "includeCollateralProjectedHeld", "includeCollateralProjectedPledged", "includeUnfundedCommitment", "specificSettleDateProjections", "includeIntradayMiscCash"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2CashLadderQuery:
        """Create an instance of V2CashLadderQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2CashLadderQuery:
        """Create an instance of V2CashLadderQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2CashLadderQuery.parse_obj(obj)

        _obj = V2CashLadderQuery.parse_obj({
            "portfolio_group_tickers": obj.get("portfolioGroupTickers"),
            "cash_date": obj.get("cashDate"),
            "include_stored_cash": obj.get("includeStoredCash"),
            "include_pni": obj.get("includePni"),
            "include_intraday_trades_cash_impact": obj.get("includeIntradayTradesCashImpact"),
            "include_intraday_auth_and_active_orders_cash_impact": obj.get("includeIntradayAuthAndActiveOrdersCashImpact"),
            "include_intraday_open_orders_cash_impact": obj.get("includeIntradayOpenOrdersCashImpact"),
            "include_intraday_confirmed_new_cash": obj.get("includeIntradayConfirmedNewCash"),
            "include_intraday_auth_new_cash": obj.get("includeIntradayAuthNewCash"),
            "include_intraday_open_new_cash": obj.get("includeIntradayOpenNewCash"),
            "include_stif_ich": obj.get("includeStifIch"),
            "cash_balance_view_currency_setting": obj.get("cashBalanceViewCurrencySetting"),
            "include_collateral_pledged": obj.get("includeCollateralPledged"),
            "include_collateral_held": obj.get("includeCollateralHeld"),
            "default_calendar": obj.get("defaultCalendar"),
            "cash_balance_trade_date_scope": obj.get("cashBalanceTradeDateScope"),
            "cash_balance_open_date_scope": obj.get("cashBalanceOpenDateScope"),
            "cash_balance_new_cash_trade_date_scope": obj.get("cashBalanceNewCashTradeDateScope"),
            "cash_balance_order_type_scope": obj.get("cashBalanceOrderTypeScope"),
            "enable_prefunding": obj.get("enablePrefunding"),
            "include_collateral_projected_held": obj.get("includeCollateralProjectedHeld"),
            "include_collateral_projected_pledged": obj.get("includeCollateralProjectedPledged"),
            "include_unfunded_commitment": obj.get("includeUnfundedCommitment"),
            "specific_settle_date_projections": obj.get("specificSettleDateProjections"),
            "include_intraday_misc_cash": obj.get("includeIntradayMiscCash")
        })
        return _obj

