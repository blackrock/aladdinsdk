# coding: utf-8

"""
    Cash Ladder

    Cash Ladder provides a settlement date based ladder of cash balances for all the exposure currencies for a given portfolio group and cash date.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import date, datetime

from pydantic import Field, StrictBool, StrictStr

from typing import Optional

from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.v2_cash_ladder import V2CashLadder
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.v2_filter_cash_ladder_request import V2FilterCashLadderRequest

from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.api_client import ApiClient
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultCashLadderAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def cash_ladder_api_filter_cash_ladder(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterCashLadderRequest, **kwargs) -> V2CashLadder:  # noqa: E501
        """Filter Cash Ladder  # noqa: E501

        Retrieves cash projections based on filtering criteria. (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: We need to do this because we have already hooked up this call in our consumers. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cash_ladder_api_filter_cash_ladder(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterCashLadderRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2CashLadder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cash_ladder_api_filter_cash_ladder_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cash_ladder_api_filter_cash_ladder_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def cash_ladder_api_filter_cash_ladder_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V2FilterCashLadderRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Cash Ladder  # noqa: E501

        Retrieves cash projections based on filtering criteria. (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: We need to do this because we have already hooked up this call in our consumers. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cash_ladder_api_filter_cash_ladder_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V2FilterCashLadderRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2CashLadder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_ladder_api_filter_cash_ladder" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V2CashLadder",
            '400': "CashLadderAPIGetCashLadder400Response",
            '401': "CashLadderAPIGetCashLadder400Response",
            '403': "CashLadderAPIGetCashLadder400Response",
            '404': "CashLadderAPIGetCashLadder400Response",
        }

        return self.api_client.call_api(
            '/ladders:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def cash_ladder_api_get_cash_ladder(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], portfolio_group_ticker : Annotated[StrictStr, Field(..., description="Name of the portfolioGroup for which cash balances are requested (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")], cash_date : Annotated[date, Field(..., description="cash date for which cash balances are requested in YYYY-MM-DD format (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")], include_stored_cash : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include stored cash. Stored cash refers to sod cash, which is yet to be fully reconciled between bank (acting as a custodian) and Aladdin. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_pni : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include principal and interest in sod balances.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_trades_cash_impact : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the cash impact from trades posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_auth_and_active_orders_cash_impact : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the cash impact from orders posted intraday, which are either in the active or authorized status. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_open_orders_cash_impact : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the cash impact from Open Orders posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_confirmed_new_cash : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include new cash entries in the confirmed status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_auth_new_cash : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include new cash entries in the authorized status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_open_new_cash : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include new cash entries in the open status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_stif_ich : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the trade date impact of stif or ich cash positions. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, cash_balance_view_currency_setting : Annotated[Optional[StrictStr], Field(description="This  represents currency in which cash balances are going to be returned.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - CASH_BALANCE_VIEW_CURRENCY_UNSPECIFIED: UNSPECIFIED is LOCAL which is security local currency and is the default setting.  - CASH_BALANCE_VIEW_CURRENCY_LOCAL: LOCAL is security local currency and is the default setting.  - CASH_BALANCE_VIEW_CURRENCY_BASE: Base refer to portfolio's base currency.  - CASH_BALANCE_VIEW_CURRENCY_OPERATING: Operating refer to portfolio's operating currency.  - CASH_BALANCE_VIEW_CURRENCY_PERCENT_NAV: With %NAV, cash balances are going to be returned as percentage of portfolio's intraday NAV.")] = None, include_collateral_pledged : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the collateral pledged impact of sod trades and intraday activities. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_collateral_held : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the collateral held impact of sod trades and intraday activities. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, default_calendar : Annotated[Optional[StrictStr], Field(description="Default calendar to be used for calculating the ladder and activity settle dates. Use the decodes API to look up valid default calendars using MKT_CALENDARS. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, cash_balance_trade_date_scope : Annotated[Optional[StrictStr], Field(description="This field represents the future trade date up to which trade activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - TRADE_DATE_UNSPECIFIED: Get cash impact of trades having trade date today (T)  - TRADE_DATE_T: Get cash impact of trades having trade date today (T)  - TRADE_DATE_UP_TO_T1: Get cash impact of trades having trade date up to tomorrow (T+1)  - TRADE_DATE_UP_TO_T2: Get cash impact of trades having trade date up to 2 days from today (T+2)  - TRADE_DATE_UP_TO_T3: Get cash impact of trades having trade date up to 3 days from today (T+3)  - TRADE_DATE_ALL: Get cash impact of all trades having trade date greater than or equal to today (T)")] = None, cash_balance_open_date_scope : Annotated[Optional[StrictStr], Field(description="This field represents the future date up to which order activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - OPEN_DATE_UNSPECIFIED: Default setting. Get cash impact of orders having open date today (T)  - OPEN_DATE_T: Get cash impact of orders having open date today (T)  - OPEN_DATE_UP_TO_T1: Get cash impact of orders having open date up to tomorrow (T+1)  - OPEN_DATE_UP_TO_T2: Get cash impact of orders having open date up to 2 days from today (T+2)  - OPEN_DATE_UP_TO_T3: Get cash impact of orders having open date up to 3 days from today (T+3)  - OPEN_DATE_ALL: Get cash impact of all orders having open date greater than or equal to today (T)")] = None, cash_balance_new_cash_trade_date_scope : Annotated[Optional[StrictStr], Field(description="This field represents the future date up to which new cash activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - NEW_CASH_TRADE_DATE_UNSPECIFIED: Default setting. Get cash impact of new cash having trade date today (T)  - NEW_CASH_TRADE_DATE_T: Get cash impact of new cash having trade date today (T)  - NEW_CASH_TRADE_DATE_UP_TO_T1: Get cash impact of new cash having trade date up to tomorrow (T+1)  - NEW_CASH_TRADE_DATE_UP_TO_T2: Get cash impact of new cash having trade date up to 2 days from today (T+2)  - NEW_CASH_TRADE_DATE_UP_TO_T3: Get cash impact of new cash having trade date up to 3 days from today (T+3)  - NEW_CASH_TRADE_DATE_ALL: Get cash impact of all new cash having trade date greater than or equal to today (T)")] = None, cash_balance_order_type_scope : Annotated[Optional[StrictStr], Field(description="This field represents the order type for orders and new cash.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - ORDER_TYPE_UNSPECIFIED: default setting. Get All order and new cash types  - ORDER_TYPE_MARKET_ON_OPEN_ONLY: Get Market on open only orders and new cash  - ORDER_TYPE_ALL: default setting. Get All order and new cash types")] = None, **kwargs) -> V2CashLadder:  # noqa: E501
        """Gets Cash Ladder  # noqa: E501

        This endpoint is provided solely for backward compatibility and should no longer be used. The POST FilterCashLadder endpoint is the preferred method for cash ladder retrieval. (-- api-linter: core::0131::http-uri-id=disabled     aip.dev/not-precedent: We need to do this to ensure we have backward compatibility while users shift from GET to POST. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cash_ladder_api_get_cash_ladder(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, portfolio_group_ticker, cash_date, include_stored_cash, include_pni, include_intraday_trades_cash_impact, include_intraday_auth_and_active_orders_cash_impact, include_intraday_open_orders_cash_impact, include_intraday_confirmed_new_cash, include_intraday_auth_new_cash, include_intraday_open_new_cash, include_stif_ich, cash_balance_view_currency_setting, include_collateral_pledged, include_collateral_held, default_calendar, cash_balance_trade_date_scope, cash_balance_open_date_scope, cash_balance_new_cash_trade_date_scope, cash_balance_order_type_scope, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param portfolio_group_ticker: Name of the portfolioGroup for which cash balances are requested (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --). (required)
        :type portfolio_group_ticker: str
        :param cash_date: cash date for which cash balances are requested in YYYY-MM-DD format (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --). (required)
        :type cash_date: date
        :param include_stored_cash: This flag indicates if cash balances include stored cash. Stored cash refers to sod cash, which is yet to be fully reconciled between bank (acting as a custodian) and Aladdin. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_stored_cash: bool
        :param include_pni: This flag indicates if cash balances include principal and interest in sod balances.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_pni: bool
        :param include_intraday_trades_cash_impact: This flag indicates if cash balances include the cash impact from trades posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_trades_cash_impact: bool
        :param include_intraday_auth_and_active_orders_cash_impact: This flag indicates if cash balances include the cash impact from orders posted intraday, which are either in the active or authorized status. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_auth_and_active_orders_cash_impact: bool
        :param include_intraday_open_orders_cash_impact: This flag indicates if cash balances include the cash impact from Open Orders posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_open_orders_cash_impact: bool
        :param include_intraday_confirmed_new_cash: This flag indicates if cash balances include new cash entries in the confirmed status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_confirmed_new_cash: bool
        :param include_intraday_auth_new_cash: This flag indicates if cash balances include new cash entries in the authorized status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_auth_new_cash: bool
        :param include_intraday_open_new_cash: This flag indicates if cash balances include new cash entries in the open status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_open_new_cash: bool
        :param include_stif_ich: This flag indicates if cash balances include the trade date impact of stif or ich cash positions. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_stif_ich: bool
        :param cash_balance_view_currency_setting: This  represents currency in which cash balances are going to be returned.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - CASH_BALANCE_VIEW_CURRENCY_UNSPECIFIED: UNSPECIFIED is LOCAL which is security local currency and is the default setting.  - CASH_BALANCE_VIEW_CURRENCY_LOCAL: LOCAL is security local currency and is the default setting.  - CASH_BALANCE_VIEW_CURRENCY_BASE: Base refer to portfolio's base currency.  - CASH_BALANCE_VIEW_CURRENCY_OPERATING: Operating refer to portfolio's operating currency.  - CASH_BALANCE_VIEW_CURRENCY_PERCENT_NAV: With %NAV, cash balances are going to be returned as percentage of portfolio's intraday NAV.
        :type cash_balance_view_currency_setting: str
        :param include_collateral_pledged: This flag indicates if cash balances include the collateral pledged impact of sod trades and intraday activities. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_collateral_pledged: bool
        :param include_collateral_held: This flag indicates if cash balances include the collateral held impact of sod trades and intraday activities. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_collateral_held: bool
        :param default_calendar: Default calendar to be used for calculating the ladder and activity settle dates. Use the decodes API to look up valid default calendars using MKT_CALENDARS. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type default_calendar: str
        :param cash_balance_trade_date_scope: This field represents the future trade date up to which trade activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - TRADE_DATE_UNSPECIFIED: Get cash impact of trades having trade date today (T)  - TRADE_DATE_T: Get cash impact of trades having trade date today (T)  - TRADE_DATE_UP_TO_T1: Get cash impact of trades having trade date up to tomorrow (T+1)  - TRADE_DATE_UP_TO_T2: Get cash impact of trades having trade date up to 2 days from today (T+2)  - TRADE_DATE_UP_TO_T3: Get cash impact of trades having trade date up to 3 days from today (T+3)  - TRADE_DATE_ALL: Get cash impact of all trades having trade date greater than or equal to today (T)
        :type cash_balance_trade_date_scope: str
        :param cash_balance_open_date_scope: This field represents the future date up to which order activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - OPEN_DATE_UNSPECIFIED: Default setting. Get cash impact of orders having open date today (T)  - OPEN_DATE_T: Get cash impact of orders having open date today (T)  - OPEN_DATE_UP_TO_T1: Get cash impact of orders having open date up to tomorrow (T+1)  - OPEN_DATE_UP_TO_T2: Get cash impact of orders having open date up to 2 days from today (T+2)  - OPEN_DATE_UP_TO_T3: Get cash impact of orders having open date up to 3 days from today (T+3)  - OPEN_DATE_ALL: Get cash impact of all orders having open date greater than or equal to today (T)
        :type cash_balance_open_date_scope: str
        :param cash_balance_new_cash_trade_date_scope: This field represents the future date up to which new cash activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - NEW_CASH_TRADE_DATE_UNSPECIFIED: Default setting. Get cash impact of new cash having trade date today (T)  - NEW_CASH_TRADE_DATE_T: Get cash impact of new cash having trade date today (T)  - NEW_CASH_TRADE_DATE_UP_TO_T1: Get cash impact of new cash having trade date up to tomorrow (T+1)  - NEW_CASH_TRADE_DATE_UP_TO_T2: Get cash impact of new cash having trade date up to 2 days from today (T+2)  - NEW_CASH_TRADE_DATE_UP_TO_T3: Get cash impact of new cash having trade date up to 3 days from today (T+3)  - NEW_CASH_TRADE_DATE_ALL: Get cash impact of all new cash having trade date greater than or equal to today (T)
        :type cash_balance_new_cash_trade_date_scope: str
        :param cash_balance_order_type_scope: This field represents the order type for orders and new cash.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - ORDER_TYPE_UNSPECIFIED: default setting. Get All order and new cash types  - ORDER_TYPE_MARKET_ON_OPEN_ONLY: Get Market on open only orders and new cash  - ORDER_TYPE_ALL: default setting. Get All order and new cash types
        :type cash_balance_order_type_scope: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2CashLadder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cash_ladder_api_get_cash_ladder_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cash_ladder_api_get_cash_ladder_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, portfolio_group_ticker, cash_date, include_stored_cash, include_pni, include_intraday_trades_cash_impact, include_intraday_auth_and_active_orders_cash_impact, include_intraday_open_orders_cash_impact, include_intraday_confirmed_new_cash, include_intraday_auth_new_cash, include_intraday_open_new_cash, include_stif_ich, cash_balance_view_currency_setting, include_collateral_pledged, include_collateral_held, default_calendar, cash_balance_trade_date_scope, cash_balance_open_date_scope, cash_balance_new_cash_trade_date_scope, cash_balance_order_type_scope, **kwargs)  # noqa: E501

    @validate_arguments
    def cash_ladder_api_get_cash_ladder_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], portfolio_group_ticker : Annotated[StrictStr, Field(..., description="Name of the portfolioGroup for which cash balances are requested (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")], cash_date : Annotated[date, Field(..., description="cash date for which cash balances are requested in YYYY-MM-DD format (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")], include_stored_cash : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include stored cash. Stored cash refers to sod cash, which is yet to be fully reconciled between bank (acting as a custodian) and Aladdin. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_pni : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include principal and interest in sod balances.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_trades_cash_impact : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the cash impact from trades posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_auth_and_active_orders_cash_impact : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the cash impact from orders posted intraday, which are either in the active or authorized status. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_open_orders_cash_impact : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the cash impact from Open Orders posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_confirmed_new_cash : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include new cash entries in the confirmed status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_auth_new_cash : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include new cash entries in the authorized status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_intraday_open_new_cash : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include new cash entries in the open status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_stif_ich : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the trade date impact of stif or ich cash positions. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, cash_balance_view_currency_setting : Annotated[Optional[StrictStr], Field(description="This  represents currency in which cash balances are going to be returned.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - CASH_BALANCE_VIEW_CURRENCY_UNSPECIFIED: UNSPECIFIED is LOCAL which is security local currency and is the default setting.  - CASH_BALANCE_VIEW_CURRENCY_LOCAL: LOCAL is security local currency and is the default setting.  - CASH_BALANCE_VIEW_CURRENCY_BASE: Base refer to portfolio's base currency.  - CASH_BALANCE_VIEW_CURRENCY_OPERATING: Operating refer to portfolio's operating currency.  - CASH_BALANCE_VIEW_CURRENCY_PERCENT_NAV: With %NAV, cash balances are going to be returned as percentage of portfolio's intraday NAV.")] = None, include_collateral_pledged : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the collateral pledged impact of sod trades and intraday activities. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, include_collateral_held : Annotated[Optional[StrictBool], Field(description="This flag indicates if cash balances include the collateral held impact of sod trades and intraday activities. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, default_calendar : Annotated[Optional[StrictStr], Field(description="Default calendar to be used for calculating the ladder and activity settle dates. Use the decodes API to look up valid default calendars using MKT_CALENDARS. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).")] = None, cash_balance_trade_date_scope : Annotated[Optional[StrictStr], Field(description="This field represents the future trade date up to which trade activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - TRADE_DATE_UNSPECIFIED: Get cash impact of trades having trade date today (T)  - TRADE_DATE_T: Get cash impact of trades having trade date today (T)  - TRADE_DATE_UP_TO_T1: Get cash impact of trades having trade date up to tomorrow (T+1)  - TRADE_DATE_UP_TO_T2: Get cash impact of trades having trade date up to 2 days from today (T+2)  - TRADE_DATE_UP_TO_T3: Get cash impact of trades having trade date up to 3 days from today (T+3)  - TRADE_DATE_ALL: Get cash impact of all trades having trade date greater than or equal to today (T)")] = None, cash_balance_open_date_scope : Annotated[Optional[StrictStr], Field(description="This field represents the future date up to which order activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - OPEN_DATE_UNSPECIFIED: Default setting. Get cash impact of orders having open date today (T)  - OPEN_DATE_T: Get cash impact of orders having open date today (T)  - OPEN_DATE_UP_TO_T1: Get cash impact of orders having open date up to tomorrow (T+1)  - OPEN_DATE_UP_TO_T2: Get cash impact of orders having open date up to 2 days from today (T+2)  - OPEN_DATE_UP_TO_T3: Get cash impact of orders having open date up to 3 days from today (T+3)  - OPEN_DATE_ALL: Get cash impact of all orders having open date greater than or equal to today (T)")] = None, cash_balance_new_cash_trade_date_scope : Annotated[Optional[StrictStr], Field(description="This field represents the future date up to which new cash activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - NEW_CASH_TRADE_DATE_UNSPECIFIED: Default setting. Get cash impact of new cash having trade date today (T)  - NEW_CASH_TRADE_DATE_T: Get cash impact of new cash having trade date today (T)  - NEW_CASH_TRADE_DATE_UP_TO_T1: Get cash impact of new cash having trade date up to tomorrow (T+1)  - NEW_CASH_TRADE_DATE_UP_TO_T2: Get cash impact of new cash having trade date up to 2 days from today (T+2)  - NEW_CASH_TRADE_DATE_UP_TO_T3: Get cash impact of new cash having trade date up to 3 days from today (T+3)  - NEW_CASH_TRADE_DATE_ALL: Get cash impact of all new cash having trade date greater than or equal to today (T)")] = None, cash_balance_order_type_scope : Annotated[Optional[StrictStr], Field(description="This field represents the order type for orders and new cash.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - ORDER_TYPE_UNSPECIFIED: default setting. Get All order and new cash types  - ORDER_TYPE_MARKET_ON_OPEN_ONLY: Get Market on open only orders and new cash  - ORDER_TYPE_ALL: default setting. Get All order and new cash types")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Gets Cash Ladder  # noqa: E501

        This endpoint is provided solely for backward compatibility and should no longer be used. The POST FilterCashLadder endpoint is the preferred method for cash ladder retrieval. (-- api-linter: core::0131::http-uri-id=disabled     aip.dev/not-precedent: We need to do this to ensure we have backward compatibility while users shift from GET to POST. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cash_ladder_api_get_cash_ladder_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, portfolio_group_ticker, cash_date, include_stored_cash, include_pni, include_intraday_trades_cash_impact, include_intraday_auth_and_active_orders_cash_impact, include_intraday_open_orders_cash_impact, include_intraday_confirmed_new_cash, include_intraday_auth_new_cash, include_intraday_open_new_cash, include_stif_ich, cash_balance_view_currency_setting, include_collateral_pledged, include_collateral_held, default_calendar, cash_balance_trade_date_scope, cash_balance_open_date_scope, cash_balance_new_cash_trade_date_scope, cash_balance_order_type_scope, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param portfolio_group_ticker: Name of the portfolioGroup for which cash balances are requested (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --). (required)
        :type portfolio_group_ticker: str
        :param cash_date: cash date for which cash balances are requested in YYYY-MM-DD format (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --). (required)
        :type cash_date: date
        :param include_stored_cash: This flag indicates if cash balances include stored cash. Stored cash refers to sod cash, which is yet to be fully reconciled between bank (acting as a custodian) and Aladdin. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_stored_cash: bool
        :param include_pni: This flag indicates if cash balances include principal and interest in sod balances.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_pni: bool
        :param include_intraday_trades_cash_impact: This flag indicates if cash balances include the cash impact from trades posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_trades_cash_impact: bool
        :param include_intraday_auth_and_active_orders_cash_impact: This flag indicates if cash balances include the cash impact from orders posted intraday, which are either in the active or authorized status. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_auth_and_active_orders_cash_impact: bool
        :param include_intraday_open_orders_cash_impact: This flag indicates if cash balances include the cash impact from Open Orders posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_open_orders_cash_impact: bool
        :param include_intraday_confirmed_new_cash: This flag indicates if cash balances include new cash entries in the confirmed status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_confirmed_new_cash: bool
        :param include_intraday_auth_new_cash: This flag indicates if cash balances include new cash entries in the authorized status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_auth_new_cash: bool
        :param include_intraday_open_new_cash: This flag indicates if cash balances include new cash entries in the open status posted intraday. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_intraday_open_new_cash: bool
        :param include_stif_ich: This flag indicates if cash balances include the trade date impact of stif or ich cash positions. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_stif_ich: bool
        :param cash_balance_view_currency_setting: This  represents currency in which cash balances are going to be returned.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - CASH_BALANCE_VIEW_CURRENCY_UNSPECIFIED: UNSPECIFIED is LOCAL which is security local currency and is the default setting.  - CASH_BALANCE_VIEW_CURRENCY_LOCAL: LOCAL is security local currency and is the default setting.  - CASH_BALANCE_VIEW_CURRENCY_BASE: Base refer to portfolio's base currency.  - CASH_BALANCE_VIEW_CURRENCY_OPERATING: Operating refer to portfolio's operating currency.  - CASH_BALANCE_VIEW_CURRENCY_PERCENT_NAV: With %NAV, cash balances are going to be returned as percentage of portfolio's intraday NAV.
        :type cash_balance_view_currency_setting: str
        :param include_collateral_pledged: This flag indicates if cash balances include the collateral pledged impact of sod trades and intraday activities. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_collateral_pledged: bool
        :param include_collateral_held: This flag indicates if cash balances include the collateral held impact of sod trades and intraday activities. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type include_collateral_held: bool
        :param default_calendar: Default calendar to be used for calculating the ladder and activity settle dates. Use the decodes API to look up valid default calendars using MKT_CALENDARS. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).
        :type default_calendar: str
        :param cash_balance_trade_date_scope: This field represents the future trade date up to which trade activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - TRADE_DATE_UNSPECIFIED: Get cash impact of trades having trade date today (T)  - TRADE_DATE_T: Get cash impact of trades having trade date today (T)  - TRADE_DATE_UP_TO_T1: Get cash impact of trades having trade date up to tomorrow (T+1)  - TRADE_DATE_UP_TO_T2: Get cash impact of trades having trade date up to 2 days from today (T+2)  - TRADE_DATE_UP_TO_T3: Get cash impact of trades having trade date up to 3 days from today (T+3)  - TRADE_DATE_ALL: Get cash impact of all trades having trade date greater than or equal to today (T)
        :type cash_balance_trade_date_scope: str
        :param cash_balance_open_date_scope: This field represents the future date up to which order activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - OPEN_DATE_UNSPECIFIED: Default setting. Get cash impact of orders having open date today (T)  - OPEN_DATE_T: Get cash impact of orders having open date today (T)  - OPEN_DATE_UP_TO_T1: Get cash impact of orders having open date up to tomorrow (T+1)  - OPEN_DATE_UP_TO_T2: Get cash impact of orders having open date up to 2 days from today (T+2)  - OPEN_DATE_UP_TO_T3: Get cash impact of orders having open date up to 3 days from today (T+3)  - OPEN_DATE_ALL: Get cash impact of all orders having open date greater than or equal to today (T)
        :type cash_balance_open_date_scope: str
        :param cash_balance_new_cash_trade_date_scope: This field represents the future date up to which new cash activity is to be retrieved. (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - NEW_CASH_TRADE_DATE_UNSPECIFIED: Default setting. Get cash impact of new cash having trade date today (T)  - NEW_CASH_TRADE_DATE_T: Get cash impact of new cash having trade date today (T)  - NEW_CASH_TRADE_DATE_UP_TO_T1: Get cash impact of new cash having trade date up to tomorrow (T+1)  - NEW_CASH_TRADE_DATE_UP_TO_T2: Get cash impact of new cash having trade date up to 2 days from today (T+2)  - NEW_CASH_TRADE_DATE_UP_TO_T3: Get cash impact of new cash having trade date up to 3 days from today (T+3)  - NEW_CASH_TRADE_DATE_ALL: Get cash impact of all new cash having trade date greater than or equal to today (T)
        :type cash_balance_new_cash_trade_date_scope: str
        :param cash_balance_order_type_scope: This field represents the order type for orders and new cash.  (-- api-linter: core::0131::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to ensure the API is backward compatible while users shift from GET to POST. --).   - ORDER_TYPE_UNSPECIFIED: default setting. Get All order and new cash types  - ORDER_TYPE_MARKET_ON_OPEN_ONLY: Get Market on open only orders and new cash  - ORDER_TYPE_ALL: default setting. Get All order and new cash types
        :type cash_balance_order_type_scope: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2CashLadder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'portfolio_group_ticker',
            'cash_date',
            'include_stored_cash',
            'include_pni',
            'include_intraday_trades_cash_impact',
            'include_intraday_auth_and_active_orders_cash_impact',
            'include_intraday_open_orders_cash_impact',
            'include_intraday_confirmed_new_cash',
            'include_intraday_auth_new_cash',
            'include_intraday_open_new_cash',
            'include_stif_ich',
            'cash_balance_view_currency_setting',
            'include_collateral_pledged',
            'include_collateral_held',
            'default_calendar',
            'cash_balance_trade_date_scope',
            'cash_balance_open_date_scope',
            'cash_balance_new_cash_trade_date_scope',
            'cash_balance_order_type_scope'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_ladder_api_get_cash_ladder" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('portfolio_group_ticker') is not None:  # noqa: E501
            _query_params.append(('portfolioGroupTicker', _params['portfolio_group_ticker']))

        if _params.get('cash_date') is not None:  # noqa: E501
            if isinstance(_params['cash_date'], datetime):
                _query_params.append(('cashDate', _params['cash_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('cashDate', _params['cash_date']))

        if _params.get('include_stored_cash') is not None:  # noqa: E501
            _query_params.append(('includeStoredCash', _params['include_stored_cash']))

        if _params.get('include_pni') is not None:  # noqa: E501
            _query_params.append(('includePni', _params['include_pni']))

        if _params.get('include_intraday_trades_cash_impact') is not None:  # noqa: E501
            _query_params.append(('includeIntradayTradesCashImpact', _params['include_intraday_trades_cash_impact']))

        if _params.get('include_intraday_auth_and_active_orders_cash_impact') is not None:  # noqa: E501
            _query_params.append(('includeIntradayAuthAndActiveOrdersCashImpact', _params['include_intraday_auth_and_active_orders_cash_impact']))

        if _params.get('include_intraday_open_orders_cash_impact') is not None:  # noqa: E501
            _query_params.append(('includeIntradayOpenOrdersCashImpact', _params['include_intraday_open_orders_cash_impact']))

        if _params.get('include_intraday_confirmed_new_cash') is not None:  # noqa: E501
            _query_params.append(('includeIntradayConfirmedNewCash', _params['include_intraday_confirmed_new_cash']))

        if _params.get('include_intraday_auth_new_cash') is not None:  # noqa: E501
            _query_params.append(('includeIntradayAuthNewCash', _params['include_intraday_auth_new_cash']))

        if _params.get('include_intraday_open_new_cash') is not None:  # noqa: E501
            _query_params.append(('includeIntradayOpenNewCash', _params['include_intraday_open_new_cash']))

        if _params.get('include_stif_ich') is not None:  # noqa: E501
            _query_params.append(('includeStifIch', _params['include_stif_ich']))

        if _params.get('cash_balance_view_currency_setting') is not None:  # noqa: E501
            _query_params.append(('cashBalanceViewCurrencySetting', _params['cash_balance_view_currency_setting'].value))

        if _params.get('include_collateral_pledged') is not None:  # noqa: E501
            _query_params.append(('includeCollateralPledged', _params['include_collateral_pledged']))

        if _params.get('include_collateral_held') is not None:  # noqa: E501
            _query_params.append(('includeCollateralHeld', _params['include_collateral_held']))

        if _params.get('default_calendar') is not None:  # noqa: E501
            _query_params.append(('defaultCalendar', _params['default_calendar']))

        if _params.get('cash_balance_trade_date_scope') is not None:  # noqa: E501
            _query_params.append(('cashBalanceTradeDateScope', _params['cash_balance_trade_date_scope'].value))

        if _params.get('cash_balance_open_date_scope') is not None:  # noqa: E501
            _query_params.append(('cashBalanceOpenDateScope', _params['cash_balance_open_date_scope'].value))

        if _params.get('cash_balance_new_cash_trade_date_scope') is not None:  # noqa: E501
            _query_params.append(('cashBalanceNewCashTradeDateScope', _params['cash_balance_new_cash_trade_date_scope'].value))

        if _params.get('cash_balance_order_type_scope') is not None:  # noqa: E501
            _query_params.append(('cashBalanceOrderTypeScope', _params['cash_balance_order_type_scope'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V2CashLadder",
            '400': "CashLadderAPIGetCashLadder400Response",
            '401': "CashLadderAPIGetCashLadder400Response",
            '403': "CashLadderAPIGetCashLadder400Response",
            '404': "CashLadderAPIGetCashLadder400Response",
        }

        return self.api_client.call_api(
            '/ladders', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
