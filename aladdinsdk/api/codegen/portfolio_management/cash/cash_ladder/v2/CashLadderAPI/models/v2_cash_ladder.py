# coding: utf-8

"""
    Cash Ladder

    Cash Ladder provides a settlement date based ladder of cash balances for all the exposure currencies for a given portfolio group and cash date.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.portfolio_management.cash.cash_ladder.v2.CashLadderAPI.models.v2_portfolio_currency_ladder import V2PortfolioCurrencyLadder

class V2CashLadder(BaseModel):
    """
    V2CashLadder
    """
    portfolio_currency_ladders: Optional[conlist(V2PortfolioCurrencyLadder)] = Field(None, alias="portfolioCurrencyLadders")
    __properties = ["portfolioCurrencyLadders"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2CashLadder:
        """Create an instance of V2CashLadder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in portfolio_currency_ladders (list)
        _items = []
        if self.portfolio_currency_ladders:
            for _item in self.portfolio_currency_ladders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['portfolioCurrencyLadders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2CashLadder:
        """Create an instance of V2CashLadder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2CashLadder.parse_obj(obj)

        _obj = V2CashLadder.parse_obj({
            "portfolio_currency_ladders": [V2PortfolioCurrencyLadder.from_dict(_item) for _item in obj.get("portfolioCurrencyLadders")] if obj.get("portfolioCurrencyLadders") is not None else None
        })
        return _obj

