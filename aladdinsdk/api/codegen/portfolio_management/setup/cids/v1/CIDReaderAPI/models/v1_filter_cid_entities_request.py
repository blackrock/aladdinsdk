# coding: utf-8

"""
    Custom Investment Dataset Reader

    API for reading Dataset Definitions and Entities.  _CIDS does not transform the input data in any kind. The writer of the data owns it and is responsible for this data. CIDS provides a way to ingest the custom investment data into Aladdin for usage across Portfolio Management tools._  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_date_time_range import V1DateTimeRange
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_entity_name_list import V1EntityNameList
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_portfolio_name_list import V1PortfolioNameList
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_schema_attribute_criteria import V1SchemaAttributeCriteria
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_state import V1State

class V1FilterCIDEntitiesRequest(BaseModel):
    """
    V1FilterCIDEntitiesRequest
    """
    dataset_names: conlist(StrictStr) = Field(..., alias="datasetNames")
    entity_name: Optional[V1EntityNameList] = Field(None, alias="entityName")
    port_name: Optional[V1PortfolioNameList] = Field(None, alias="portName")
    state: Optional[V1State] = None
    index_attribute_criterion: Optional[V1SchemaAttributeCriteria] = Field(None, alias="indexAttributeCriterion")
    time_range: Optional[V1DateTimeRange] = Field(None, alias="timeRange")
    as_of_date: Optional[date] = Field(None, alias="asOfDate")
    data_column_filters: Optional[conlist(StrictStr)] = Field(None, alias="dataColumnFilters")
    page_size: Optional[StrictInt] = Field(None, alias="pageSize", description="The number of Entities to be returned per page.")
    page_token: Optional[StrictStr] = Field(None, alias="pageToken", description="A Token, which is used to retrieve next set of records. next_page_token received in last page response.")
    __properties = ["datasetNames", "entityName", "portName", "state", "indexAttributeCriterion", "timeRange", "asOfDate", "dataColumnFilters", "pageSize", "pageToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterCIDEntitiesRequest:
        """Create an instance of V1FilterCIDEntitiesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of entity_name
        if self.entity_name:
            _dict['entityName'] = self.entity_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of port_name
        if self.port_name:
            _dict['portName'] = self.port_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of index_attribute_criterion
        if self.index_attribute_criterion:
            _dict['indexAttributeCriterion'] = self.index_attribute_criterion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_range
        if self.time_range:
            _dict['timeRange'] = self.time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterCIDEntitiesRequest:
        """Create an instance of V1FilterCIDEntitiesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterCIDEntitiesRequest.parse_obj(obj)

        _obj = V1FilterCIDEntitiesRequest.parse_obj({
            "dataset_names": obj.get("datasetNames"),
            "entity_name": V1EntityNameList.from_dict(obj.get("entityName")) if obj.get("entityName") is not None else None,
            "port_name": V1PortfolioNameList.from_dict(obj.get("portName")) if obj.get("portName") is not None else None,
            "state": obj.get("state"),
            "index_attribute_criterion": V1SchemaAttributeCriteria.from_dict(obj.get("indexAttributeCriterion")) if obj.get("indexAttributeCriterion") is not None else None,
            "time_range": V1DateTimeRange.from_dict(obj.get("timeRange")) if obj.get("timeRange") is not None else None,
            "as_of_date": obj.get("asOfDate"),
            "data_column_filters": obj.get("dataColumnFilters"),
            "page_size": obj.get("pageSize"),
            "page_token": obj.get("pageToken")
        })
        return _obj

