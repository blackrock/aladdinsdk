# coding: utf-8

"""
    Custom Investment Dataset Reader

    API for reading Dataset Definitions and Entities.  _CIDS does not transform the input data in any kind. The writer of the data owns it and is responsible for this data. CIDS provides a way to ingest the custom investment data into Aladdin for usage across Portfolio Management tools._  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import date, datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Optional

from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_cid_dataset_definition import V1CIDDatasetDefinition
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_cid_dataset_hierarchy import V1CIDDatasetHierarchy
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_cid_dataset_schema_entity import V1CIDDatasetSchemaEntity
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_filter_cid_entities_request import V1FilterCIDEntitiesRequest
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_filter_cid_entities_response import V1FilterCIDEntitiesResponse
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_list_cid_dataset_definitions_response import V1ListCIDDatasetDefinitionsResponse
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_list_cid_entity_response import V1ListCIDEntityResponse
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_remove_datasets_request import V1RemoveDatasetsRequest
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.models.v1_remove_datasets_response import V1RemoveDatasetsResponse

from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.api_client import ApiClient
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDReaderAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultCIDReaderAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def c_id_reader_api_filter_cid_entities(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterCIDEntitiesRequest, **kwargs) -> V1FilterCIDEntitiesResponse:  # noqa: E501
        """Filter dataset Entities  # noqa: E501

        Filters active version of a dataset entities by filter criteria. If state is unspecified, returns APPROVED entities matching the criteria. Only either one of entityName, portName, state or indexAttributeCriterion is allowed to be specified. (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: we cannot currently modify this as it is working in prod, would make this change with our v2 release --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_filter_cid_entities(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterCIDEntitiesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterCIDEntitiesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the c_id_reader_api_filter_cid_entities_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.c_id_reader_api_filter_cid_entities_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def c_id_reader_api_filter_cid_entities_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterCIDEntitiesRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter dataset Entities  # noqa: E501

        Filters active version of a dataset entities by filter criteria. If state is unspecified, returns APPROVED entities matching the criteria. Only either one of entityName, portName, state or indexAttributeCriterion is allowed to be specified. (-- api-linter: aladdin::9016::query-custom-method-http=disabled     aip.dev/not-precedent: we cannot currently modify this as it is working in prod, would make this change with our v2 release --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_filter_cid_entities_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterCIDEntitiesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterCIDEntitiesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_id_reader_api_filter_cid_entities" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterCIDEntitiesResponse",
            '400': "CIDReaderAPIRemoveDatasets400Response",
            '401': "CIDReaderAPIRemoveDatasets400Response",
            '403': "CIDReaderAPIRemoveDatasets400Response",
            '404': "CIDReaderAPIRemoveDatasets400Response",
        }

        return self.api_client.call_api(
            '/datasets/entities:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def c_id_reader_api_get_cid_dataset_definition(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_name : Annotated[StrictStr, Field(..., description="Name of the Category, Class, Group or leaf level Dataset")], **kwargs) -> V1CIDDatasetDefinition:  # noqa: E501
        """Retrieve Dataset Definition  # noqa: E501

        Given a Dataset Name, retrieve its latest approved version of Dataset Definition. (-- api-linter: core::0131::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because we use dataset_name as id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_get_cid_dataset_definition(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_name: Name of the Category, Class, Group or leaf level Dataset (required)
        :type dataset_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CIDDatasetDefinition
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the c_id_reader_api_get_cid_dataset_definition_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.c_id_reader_api_get_cid_dataset_definition_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, **kwargs)  # noqa: E501

    @validate_arguments
    def c_id_reader_api_get_cid_dataset_definition_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_name : Annotated[StrictStr, Field(..., description="Name of the Category, Class, Group or leaf level Dataset")], **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Dataset Definition  # noqa: E501

        Given a Dataset Name, retrieve its latest approved version of Dataset Definition. (-- api-linter: core::0131::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because we use dataset_name as id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_get_cid_dataset_definition_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_name: Name of the Category, Class, Group or leaf level Dataset (required)
        :type dataset_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CIDDatasetDefinition, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'dataset_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_id_reader_api_get_cid_dataset_definition" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['dataset_name']:
            _path_params['datasetName'] = _params['dataset_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CIDDatasetDefinition",
            '400': "CIDReaderAPIRemoveDatasets400Response",
            '401': "CIDReaderAPIRemoveDatasets400Response",
            '403': "CIDReaderAPIRemoveDatasets400Response",
            '404': "CIDReaderAPIRemoveDatasets400Response",
        }

        return self.api_client.call_api(
            '/datasets/definitions/{datasetName}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def c_id_reader_api_get_cid_dataset_hierarchy(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_name : Annotated[StrictStr, Field(..., description="Name of the Dataset.")], include_all_status : Annotated[Optional[StrictBool], Field(description="Set this field to include datasets with all different statuses. Else only Approved status datasets will be considered.")] = None, **kwargs) -> V1CIDDatasetHierarchy:  # noqa: E501
        """Retrieve Dataset Hierarchy  # noqa: E501

        Given a Dataset Name, retrieve all the hierarchy associated around it (-- api-linter: core::0131::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because we use dataset_name as id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_get_cid_dataset_hierarchy(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, include_all_status, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_name: Name of the Dataset. (required)
        :type dataset_name: str
        :param include_all_status: Set this field to include datasets with all different statuses. Else only Approved status datasets will be considered.
        :type include_all_status: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CIDDatasetHierarchy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the c_id_reader_api_get_cid_dataset_hierarchy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.c_id_reader_api_get_cid_dataset_hierarchy_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, include_all_status, **kwargs)  # noqa: E501

    @validate_arguments
    def c_id_reader_api_get_cid_dataset_hierarchy_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_name : Annotated[StrictStr, Field(..., description="Name of the Dataset.")], include_all_status : Annotated[Optional[StrictBool], Field(description="Set this field to include datasets with all different statuses. Else only Approved status datasets will be considered.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Dataset Hierarchy  # noqa: E501

        Given a Dataset Name, retrieve all the hierarchy associated around it (-- api-linter: core::0131::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because we use dataset_name as id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_get_cid_dataset_hierarchy_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, include_all_status, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_name: Name of the Dataset. (required)
        :type dataset_name: str
        :param include_all_status: Set this field to include datasets with all different statuses. Else only Approved status datasets will be considered.
        :type include_all_status: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CIDDatasetHierarchy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'dataset_name',
            'include_all_status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_id_reader_api_get_cid_dataset_hierarchy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['dataset_name']:
            _path_params['datasetName'] = _params['dataset_name']


        # process the query parameters
        _query_params = []
        if _params.get('include_all_status') is not None:  # noqa: E501
            _query_params.append(('includeAllStatus', _params['include_all_status']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CIDDatasetHierarchy",
            '400': "CIDReaderAPIRemoveDatasets400Response",
            '401': "CIDReaderAPIRemoveDatasets400Response",
            '403': "CIDReaderAPIRemoveDatasets400Response",
            '404': "CIDReaderAPIRemoveDatasets400Response",
        }

        return self.api_client.call_api(
            '/datasets/hierarchy/{datasetName}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def c_id_reader_api_get_cid_dataset_schema_entity(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], schema_name : Annotated[StrictStr, Field(..., description="Name of the schema.")], **kwargs) -> V1CIDDatasetSchemaEntity:  # noqa: E501
        """Retrieve Dataset Schema  # noqa: E501

        Given a DatasetSchema Name, retrieve its latest approved version . (-- api-linter: core::0131::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because we use dataset_schema as id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_get_cid_dataset_schema_entity(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, schema_name, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param schema_name: Name of the schema. (required)
        :type schema_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1CIDDatasetSchemaEntity
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the c_id_reader_api_get_cid_dataset_schema_entity_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.c_id_reader_api_get_cid_dataset_schema_entity_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, schema_name, **kwargs)  # noqa: E501

    @validate_arguments
    def c_id_reader_api_get_cid_dataset_schema_entity_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], schema_name : Annotated[StrictStr, Field(..., description="Name of the schema.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Dataset Schema  # noqa: E501

        Given a DatasetSchema Name, retrieve its latest approved version . (-- api-linter: core::0131::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because we use dataset_schema as id --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_get_cid_dataset_schema_entity_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, schema_name, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param schema_name: Name of the schema. (required)
        :type schema_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1CIDDatasetSchemaEntity, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'schema_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_id_reader_api_get_cid_dataset_schema_entity" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['schema_name']:
            _path_params['schemaName'] = _params['schema_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1CIDDatasetSchemaEntity",
            '400': "CIDReaderAPIRemoveDatasets400Response",
            '401': "CIDReaderAPIRemoveDatasets400Response",
            '403': "CIDReaderAPIRemoveDatasets400Response",
            '404': "CIDReaderAPIRemoveDatasets400Response",
        }

        return self.api_client.call_api(
            '/schema/{schemaName}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def c_id_reader_api_list_cid_dataset_definitions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], state : Annotated[Optional[StrictStr], Field(description="This filter is not implemented yet. Filter by State of the Dataset.   - STATE_UNSPECIFIED: Unspecified state.  - STATE_DRAFT: Entity/Dataset in the DRAFT state.  - STATE_APPROVED: Entity/Dataset in the APPROVED state.  - STATE_RETIRED: Entity/Dataset in the RETIRED state.  - STATE_SUSPENDED: Entity/Dataset in the SUSPENDED state.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Pagination implemented but managing page size through auto-configuration.  The number of Dataset Definitions to be returned per page. can be empty when requesting first page.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A Token, which is used to retrieve next set of Dataset Definitions. next_page_token received in last page response.")] = None, include_all_status : Annotated[Optional[StrictBool], Field(description="Set this field to include datasets with all different statuses. Else only Approved status datasets will be considered.")] = None, **kwargs) -> V1ListCIDDatasetDefinitionsResponse:  # noqa: E501
        """Retrieve all Dataset Definitions  # noqa: E501

        Given a state, pageSize and pageToken, retrieve all latest versions of Dataset Definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_list_cid_dataset_definitions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, state, page_size, page_token, include_all_status, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param state: This filter is not implemented yet. Filter by State of the Dataset.   - STATE_UNSPECIFIED: Unspecified state.  - STATE_DRAFT: Entity/Dataset in the DRAFT state.  - STATE_APPROVED: Entity/Dataset in the APPROVED state.  - STATE_RETIRED: Entity/Dataset in the RETIRED state.  - STATE_SUSPENDED: Entity/Dataset in the SUSPENDED state.
        :type state: str
        :param page_size: Pagination implemented but managing page size through auto-configuration.  The number of Dataset Definitions to be returned per page. can be empty when requesting first page.
        :type page_size: int
        :param page_token: A Token, which is used to retrieve next set of Dataset Definitions. next_page_token received in last page response.
        :type page_token: str
        :param include_all_status: Set this field to include datasets with all different statuses. Else only Approved status datasets will be considered.
        :type include_all_status: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListCIDDatasetDefinitionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the c_id_reader_api_list_cid_dataset_definitions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.c_id_reader_api_list_cid_dataset_definitions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, state, page_size, page_token, include_all_status, **kwargs)  # noqa: E501

    @validate_arguments
    def c_id_reader_api_list_cid_dataset_definitions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], state : Annotated[Optional[StrictStr], Field(description="This filter is not implemented yet. Filter by State of the Dataset.   - STATE_UNSPECIFIED: Unspecified state.  - STATE_DRAFT: Entity/Dataset in the DRAFT state.  - STATE_APPROVED: Entity/Dataset in the APPROVED state.  - STATE_RETIRED: Entity/Dataset in the RETIRED state.  - STATE_SUSPENDED: Entity/Dataset in the SUSPENDED state.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Pagination implemented but managing page size through auto-configuration.  The number of Dataset Definitions to be returned per page. can be empty when requesting first page.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A Token, which is used to retrieve next set of Dataset Definitions. next_page_token received in last page response.")] = None, include_all_status : Annotated[Optional[StrictBool], Field(description="Set this field to include datasets with all different statuses. Else only Approved status datasets will be considered.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve all Dataset Definitions  # noqa: E501

        Given a state, pageSize and pageToken, retrieve all latest versions of Dataset Definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_list_cid_dataset_definitions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, state, page_size, page_token, include_all_status, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param state: This filter is not implemented yet. Filter by State of the Dataset.   - STATE_UNSPECIFIED: Unspecified state.  - STATE_DRAFT: Entity/Dataset in the DRAFT state.  - STATE_APPROVED: Entity/Dataset in the APPROVED state.  - STATE_RETIRED: Entity/Dataset in the RETIRED state.  - STATE_SUSPENDED: Entity/Dataset in the SUSPENDED state.
        :type state: str
        :param page_size: Pagination implemented but managing page size through auto-configuration.  The number of Dataset Definitions to be returned per page. can be empty when requesting first page.
        :type page_size: int
        :param page_token: A Token, which is used to retrieve next set of Dataset Definitions. next_page_token received in last page response.
        :type page_token: str
        :param include_all_status: Set this field to include datasets with all different statuses. Else only Approved status datasets will be considered.
        :type include_all_status: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListCIDDatasetDefinitionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'state',
            'page_size',
            'page_token',
            'include_all_status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_id_reader_api_list_cid_dataset_definitions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('state') is not None:  # noqa: E501
            _query_params.append(('state', _params['state'].value))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('include_all_status') is not None:  # noqa: E501
            _query_params.append(('includeAllStatus', _params['include_all_status']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListCIDDatasetDefinitionsResponse",
            '400': "CIDReaderAPIRemoveDatasets400Response",
            '401': "CIDReaderAPIRemoveDatasets400Response",
            '403': "CIDReaderAPIRemoveDatasets400Response",
            '404': "CIDReaderAPIRemoveDatasets400Response",
        }

        return self.api_client.call_api(
            '/datasets/definitions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def c_id_reader_api_list_cid_entity(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_name : Annotated[StrictStr, Field(..., description="Name of the Dataset. This cannot be a Category, Class or Group level Dataset.")], page_size : Annotated[Optional[StrictInt], Field(description="The number of Entities to be returned per page.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A Token, which is used to retrieve next set of Entities. next_page_token received in last page response.")] = None, as_of_date : Annotated[Optional[date], Field(description="As of date (in UTC). All records valid as of this date will be returned. This is not a mandatory parameter and all records as of T will be returned if not specified  The client should not specify the start_time and end_time parameters if as of date has been specified.")] = None, time_range_start_time : Annotated[Optional[datetime], Field(description="Start time of the Entity (in UTC). This defaults to current date time when not provided. While creating/updating Date should not be in the past.")] = None, time_range_expire_time : Annotated[Optional[datetime], Field(description="Expire Time of the Entity (in UTC). This defaults to \"12/31/2222\" when not provided. While creating/updating Date should not be in the past (-- api-linter: core::0214::resource-expiry=disabled  aip.dev/not-precedent: We need to do this because we're not including TTL --).")] = None, **kwargs) -> V1ListCIDEntityResponse:  # noqa: E501
        """Retrieve Entities  # noqa: E501

        Given a Dataset name, retrieve all latest approved versions of Dataset Entities. Optionally also takes an asof date parameter or date range to provide only subset valid within that specfied period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_list_cid_entity(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, page_size, page_token, as_of_date, time_range_start_time, time_range_expire_time, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_name: Name of the Dataset. This cannot be a Category, Class or Group level Dataset. (required)
        :type dataset_name: str
        :param page_size: The number of Entities to be returned per page.
        :type page_size: int
        :param page_token: A Token, which is used to retrieve next set of Entities. next_page_token received in last page response.
        :type page_token: str
        :param as_of_date: As of date (in UTC). All records valid as of this date will be returned. This is not a mandatory parameter and all records as of T will be returned if not specified  The client should not specify the start_time and end_time parameters if as of date has been specified.
        :type as_of_date: date
        :param time_range_start_time: Start time of the Entity (in UTC). This defaults to current date time when not provided. While creating/updating Date should not be in the past.
        :type time_range_start_time: datetime
        :param time_range_expire_time: Expire Time of the Entity (in UTC). This defaults to \"12/31/2222\" when not provided. While creating/updating Date should not be in the past (-- api-linter: core::0214::resource-expiry=disabled  aip.dev/not-precedent: We need to do this because we're not including TTL --).
        :type time_range_expire_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1ListCIDEntityResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the c_id_reader_api_list_cid_entity_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.c_id_reader_api_list_cid_entity_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, page_size, page_token, as_of_date, time_range_start_time, time_range_expire_time, **kwargs)  # noqa: E501

    @validate_arguments
    def c_id_reader_api_list_cid_entity_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], dataset_name : Annotated[StrictStr, Field(..., description="Name of the Dataset. This cannot be a Category, Class or Group level Dataset.")], page_size : Annotated[Optional[StrictInt], Field(description="The number of Entities to be returned per page.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A Token, which is used to retrieve next set of Entities. next_page_token received in last page response.")] = None, as_of_date : Annotated[Optional[date], Field(description="As of date (in UTC). All records valid as of this date will be returned. This is not a mandatory parameter and all records as of T will be returned if not specified  The client should not specify the start_time and end_time parameters if as of date has been specified.")] = None, time_range_start_time : Annotated[Optional[datetime], Field(description="Start time of the Entity (in UTC). This defaults to current date time when not provided. While creating/updating Date should not be in the past.")] = None, time_range_expire_time : Annotated[Optional[datetime], Field(description="Expire Time of the Entity (in UTC). This defaults to \"12/31/2222\" when not provided. While creating/updating Date should not be in the past (-- api-linter: core::0214::resource-expiry=disabled  aip.dev/not-precedent: We need to do this because we're not including TTL --).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Entities  # noqa: E501

        Given a Dataset name, retrieve all latest approved versions of Dataset Entities. Optionally also takes an asof date parameter or date range to provide only subset valid within that specfied period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_list_cid_entity_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, dataset_name, page_size, page_token, as_of_date, time_range_start_time, time_range_expire_time, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param dataset_name: Name of the Dataset. This cannot be a Category, Class or Group level Dataset. (required)
        :type dataset_name: str
        :param page_size: The number of Entities to be returned per page.
        :type page_size: int
        :param page_token: A Token, which is used to retrieve next set of Entities. next_page_token received in last page response.
        :type page_token: str
        :param as_of_date: As of date (in UTC). All records valid as of this date will be returned. This is not a mandatory parameter and all records as of T will be returned if not specified  The client should not specify the start_time and end_time parameters if as of date has been specified.
        :type as_of_date: date
        :param time_range_start_time: Start time of the Entity (in UTC). This defaults to current date time when not provided. While creating/updating Date should not be in the past.
        :type time_range_start_time: datetime
        :param time_range_expire_time: Expire Time of the Entity (in UTC). This defaults to \"12/31/2222\" when not provided. While creating/updating Date should not be in the past (-- api-linter: core::0214::resource-expiry=disabled  aip.dev/not-precedent: We need to do this because we're not including TTL --).
        :type time_range_expire_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1ListCIDEntityResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'dataset_name',
            'page_size',
            'page_token',
            'as_of_date',
            'time_range_start_time',
            'time_range_expire_time'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_id_reader_api_list_cid_entity" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['dataset_name']:
            _path_params['datasetName'] = _params['dataset_name']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('as_of_date') is not None:  # noqa: E501
            if isinstance(_params['as_of_date'], datetime):
                _query_params.append(('asOfDate', _params['as_of_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('asOfDate', _params['as_of_date']))

        if _params.get('time_range_start_time') is not None:  # noqa: E501
            if isinstance(_params['time_range_start_time'], datetime):
                _query_params.append(('timeRange.startTime', _params['time_range_start_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('timeRange.startTime', _params['time_range_start_time']))

        if _params.get('time_range_expire_time') is not None:  # noqa: E501
            if isinstance(_params['time_range_expire_time'], datetime):
                _query_params.append(('timeRange.expireTime', _params['time_range_expire_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('timeRange.expireTime', _params['time_range_expire_time']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1ListCIDEntityResponse",
            '400': "CIDReaderAPIRemoveDatasets400Response",
            '401': "CIDReaderAPIRemoveDatasets400Response",
            '403': "CIDReaderAPIRemoveDatasets400Response",
            '404': "CIDReaderAPIRemoveDatasets400Response",
        }

        return self.api_client.call_api(
            '/datasets/{datasetName}/entities', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def c_id_reader_api_remove_datasets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RemoveDatasetsRequest, **kwargs) -> V1RemoveDatasetsResponse:  # noqa: E501
        """Remove datasets from Cache  # noqa: E501

        Remove the dataset from the Read server cache so that entities can be loaded from ADL on the next request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_remove_datasets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RemoveDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1RemoveDatasetsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the c_id_reader_api_remove_datasets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.c_id_reader_api_remove_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, **kwargs)  # noqa: E501

    @validate_arguments
    def c_id_reader_api_remove_datasets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1RemoveDatasetsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove datasets from Cache  # noqa: E501

        Remove the dataset from the Read server cache so that entities can be loaded from ADL on the next request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.c_id_reader_api_remove_datasets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1RemoveDatasetsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1RemoveDatasetsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_id_reader_api_remove_datasets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1RemoveDatasetsResponse",
            '400': "CIDReaderAPIRemoveDatasets400Response",
            '401': "CIDReaderAPIRemoveDatasets400Response",
            '403': "CIDReaderAPIRemoveDatasets400Response",
            '404': "CIDReaderAPIRemoveDatasets400Response",
        }

        return self.api_client.call_api(
            '/datasets/datasets:remove', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
