# coding: utf-8

"""
    Custom Investment Dataset Writer

    API for writing Dataset Definitions and Entities.  _CIDS does not transform the input data in any kind. The writer of the data owns it and is responsible for this data. CIDS provides a way to ingest the custom investment data into Aladdin for usage across Portfolio Management tools._  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDWriterAPI.models.v1_attribute_agg import V1AttributeAgg
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDWriterAPI.models.v1_attribute_type import V1AttributeType

class V1CIDDatasetSchemaAttribute(BaseModel):
    """
    V1CIDDatasetSchemaAttribute
    """
    schema_attribute_name: StrictStr = Field(..., alias="schemaAttributeName", description="Describes name of the attribute. Character Limit: 15.")
    attribute_type: Optional[V1AttributeType] = Field(None, alias="attributeType")
    indexed: Optional[StrictBool] = None
    meta_data: Optional[StrictStr] = Field(None, alias="metaData")
    description: Optional[StrictStr] = None
    attribute_display_name: Optional[StrictStr] = Field(None, alias="attributeDisplayName", description="Describes display name for attribute Character Limit: 75.")
    index_order: Optional[StrictStr] = Field(None, alias="indexOrder")
    attribute_precision: Optional[StrictStr] = Field(None, alias="attributePrecision")
    attribute_agg: Optional[V1AttributeAgg] = Field(None, alias="attributeAgg")
    list_mappings: Optional[Dict[str, StrictStr]] = Field(None, alias="listMappings")
    __properties = ["schemaAttributeName", "attributeType", "indexed", "metaData", "description", "attributeDisplayName", "indexOrder", "attributePrecision", "attributeAgg", "listMappings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CIDDatasetSchemaAttribute:
        """Create an instance of V1CIDDatasetSchemaAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CIDDatasetSchemaAttribute:
        """Create an instance of V1CIDDatasetSchemaAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CIDDatasetSchemaAttribute.parse_obj(obj)

        _obj = V1CIDDatasetSchemaAttribute.parse_obj({
            "schema_attribute_name": obj.get("schemaAttributeName"),
            "attribute_type": obj.get("attributeType"),
            "indexed": obj.get("indexed"),
            "meta_data": obj.get("metaData"),
            "description": obj.get("description"),
            "attribute_display_name": obj.get("attributeDisplayName"),
            "index_order": obj.get("indexOrder"),
            "attribute_precision": obj.get("attributePrecision"),
            "attribute_agg": obj.get("attributeAgg"),
            "list_mappings": obj.get("listMappings")
        })
        return _obj

