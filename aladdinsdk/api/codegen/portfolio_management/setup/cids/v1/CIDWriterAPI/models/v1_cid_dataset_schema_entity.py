# coding: utf-8

"""
    Custom Investment Dataset Writer

    API for writing Dataset Definitions and Entities.  _CIDS does not transform the input data in any kind. The writer of the data owns it and is responsible for this data. CIDS provides a way to ingest the custom investment data into Aladdin for usage across Portfolio Management tools._  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDWriterAPI.models.v1_cid_dataset_schema import V1CIDDatasetSchema
from aladdinsdk.api.codegen.portfolio_management.setup.cids.v1.CIDWriterAPI.models.v1_state import V1State

class V1CIDDatasetSchemaEntity(BaseModel):
    """
    V1CIDDatasetSchemaEntity
    """
    id: StrictStr = Field(..., description="Schema Id as Identifier. Schema name/Id of the Entity Dataset, if Dataset is of SCHEMA type. Character Limit: 25.")
    dataset_name: StrictStr = Field(..., alias="datasetName", description="Input only field. Specifies the category or classification dataset in the hierarchy to which this schema can be applied. Any leaf datasets in the specified category / classification can be linked to this schema once created. Character Limit: 15.")
    author: StrictStr = Field(..., description="Author of the Schema. Character Limit: 8.")
    revision_id: Optional[StrictStr] = Field(None, alias="revisionId", description="Current Version of the Schema.")
    create_time: Optional[datetime] = Field(None, alias="createTime")
    state: Optional[V1State] = None
    data: Optional[V1CIDDatasetSchema] = None
    __properties = ["id", "datasetName", "author", "revisionId", "createTime", "state", "data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CIDDatasetSchemaEntity:
        """Create an instance of V1CIDDatasetSchemaEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "revision_id",
                            "create_time",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CIDDatasetSchemaEntity:
        """Create an instance of V1CIDDatasetSchemaEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CIDDatasetSchemaEntity.parse_obj(obj)

        _obj = V1CIDDatasetSchemaEntity.parse_obj({
            "id": obj.get("id"),
            "dataset_name": obj.get("datasetName"),
            "author": obj.get("author"),
            "revision_id": obj.get("revisionId"),
            "create_time": obj.get("createTime"),
            "state": obj.get("state"),
            "data": V1CIDDatasetSchema.from_dict(obj.get("data")) if obj.get("data") is not None else None
        })
        return _obj

