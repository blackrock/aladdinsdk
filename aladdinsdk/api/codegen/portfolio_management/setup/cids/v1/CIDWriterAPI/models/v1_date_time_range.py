# coding: utf-8

"""
    Custom Investment Dataset Writer

    API for writing Dataset Definitions and Entities.  _CIDS does not transform the input data in any kind. The writer of the data owns it and is responsible for this data. CIDS provides a way to ingest the custom investment data into Aladdin for usage across Portfolio Management tools._  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field

class V1DateTimeRange(BaseModel):
    """
    V1DateTimeRange
    """
    start_time: Optional[datetime] = Field(None, alias="startTime")
    expire_time: Optional[datetime] = Field(None, alias="expireTime")
    __properties = ["startTime", "expireTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1DateTimeRange:
        """Create an instance of V1DateTimeRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1DateTimeRange:
        """Create an instance of V1DateTimeRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1DateTimeRange.parse_obj(obj)

        _obj = V1DateTimeRange.parse_obj({
            "start_time": obj.get("startTime"),
            "expire_time": obj.get("expireTime")
        })
        return _obj

