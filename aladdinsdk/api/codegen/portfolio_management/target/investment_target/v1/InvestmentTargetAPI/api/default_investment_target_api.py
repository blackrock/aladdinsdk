# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.rpc_status import RpcStatus
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_approve_investment_targets_request import V1ApproveInvestmentTargetsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_batch_create_investment_target_subscriptions_request import V1BatchCreateInvestmentTargetSubscriptionsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_batch_create_investment_targets_request import V1BatchCreateInvestmentTargetsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_batch_update_investment_target_subscriptions_request import V1BatchUpdateInvestmentTargetSubscriptionsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_batch_update_investment_targets_request import V1BatchUpdateInvestmentTargetsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_batch_validate_investment_target_subscriptions_request import V1BatchValidateInvestmentTargetSubscriptionsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_batch_validate_investment_targets_request import V1BatchValidateInvestmentTargetsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_batch_validate_response import V1BatchValidateResponse
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_cancel_investment_targets_version_request import V1CancelInvestmentTargetsVersionRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_investment_target_subscriptions_request import V1FilterInvestmentTargetSubscriptionsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_investment_target_versions_request import V1FilterInvestmentTargetVersionsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_investment_targets_by_portfolios_and_aggregate_request import V1FilterInvestmentTargetsByPortfoliosAndAggregateRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_investment_targets_by_portfolios_and_aggregate_response import V1FilterInvestmentTargetsByPortfoliosAndAggregateResponse
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_investment_targets_by_portfolios_request import V1FilterInvestmentTargetsByPortfoliosRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_investment_targets_metadata_summary_responses import V1FilterInvestmentTargetsMetadataSummaryResponses
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_investment_targets_request import V1FilterInvestmentTargetsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_investment_targets_summary_responses import V1FilterInvestmentTargetsSummaryResponses
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_target_subscriptions_summary_responses import V1FilterTargetSubscriptionsSummaryResponses
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_investment_target_status_change_summary_response import V1InvestmentTargetStatusChangeSummaryResponse
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_investment_targets_summary_response import V1InvestmentTargetsSummaryResponse
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_search_investment_target_response import V1SearchInvestmentTargetResponse
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_subscriptions_summary_response import V1TargetSubscriptionsSummaryResponse
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_terminate_investment_target_subscriptions_request import V1TerminateInvestmentTargetSubscriptionsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_terminate_investment_targets_request import V1TerminateInvestmentTargetsRequest
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_terminate_target_subscription_summary_response import V1TerminateTargetSubscriptionSummaryResponse

from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.api_client import ApiClient
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.api_response import ApiResponse
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultInvestmentTargetAPI(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def investment_target_api_approve_investment_targets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ApproveInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1InvestmentTargetStatusChangeSummaryResponse:  # noqa: E501
        """Approve Investment Targets  # noqa: E501

        Approves multiple Investment Targets (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because patch is appropriate for our use-case --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_approve_investment_targets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ApproveInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1InvestmentTargetStatusChangeSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_approve_investment_targets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_approve_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_approve_investment_targets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1ApproveInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Approve Investment Targets  # noqa: E501

        Approves multiple Investment Targets (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because patch is appropriate for our use-case --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_approve_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1ApproveInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1InvestmentTargetStatusChangeSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_approve_investment_targets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1InvestmentTargetStatusChangeSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:approve', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_batch_create_investment_target_subscriptions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1TargetSubscriptionsSummaryResponse:  # noqa: E501
        """Batch Create Investment Target Subscriptions  # noqa: E501

        Creates multiple Investment Target Subscriptions (-- api-linter: core::0233::response-message-name=disabled  aip.dev/not-precedent: We need to do this because we need the response as specified --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_create_investment_target_subscriptions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1TargetSubscriptionsSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_batch_create_investment_target_subscriptions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_batch_create_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_batch_create_investment_target_subscriptions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Create Investment Target Subscriptions  # noqa: E501

        Creates multiple Investment Target Subscriptions (-- api-linter: core::0233::response-message-name=disabled  aip.dev/not-precedent: We need to do this because we need the response as specified --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_create_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1TargetSubscriptionsSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_batch_create_investment_target_subscriptions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1TargetSubscriptionsSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargetSubscriptions:batchCreate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_batch_create_investment_targets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1InvestmentTargetsSummaryResponse:  # noqa: E501
        """Batch Create Investment Targets  # noqa: E501

        Creates multiple Investment Targets (-- api-linter: core::0233::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is being reused by other APIs too --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_create_investment_targets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1InvestmentTargetsSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_batch_create_investment_targets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_batch_create_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_batch_create_investment_targets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchCreateInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Create Investment Targets  # noqa: E501

        Creates multiple Investment Targets (-- api-linter: core::0233::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is being reused by other APIs too --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_create_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchCreateInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1InvestmentTargetsSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_batch_create_investment_targets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1InvestmentTargetsSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:batchCreate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_batch_update_investment_target_subscriptions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1TargetSubscriptionsSummaryResponse:  # noqa: E501
        """Batch Update Investment Target Subscriptions  # noqa: E501

        Updates multiple Investment Target Subscriptions (-- api-linter: core::0234::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is reused by other APIs too --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_update_investment_target_subscriptions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1TargetSubscriptionsSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_batch_update_investment_target_subscriptions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_batch_update_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_batch_update_investment_target_subscriptions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Update Investment Target Subscriptions  # noqa: E501

        Updates multiple Investment Target Subscriptions (-- api-linter: core::0234::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is reused by other APIs too --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_update_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1TargetSubscriptionsSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_batch_update_investment_target_subscriptions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1TargetSubscriptionsSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargetSubscriptions:batchUpdate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_batch_update_investment_targets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1InvestmentTargetsSummaryResponse:  # noqa: E501
        """Batch Update Investment Targets  # noqa: E501

        Updates multiple Investment Targets (-- api-linter: core::0234::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is reused by other APIs as well --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_update_investment_targets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1InvestmentTargetsSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_batch_update_investment_targets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_batch_update_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_batch_update_investment_targets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchUpdateInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Update Investment Targets  # noqa: E501

        Updates multiple Investment Targets (-- api-linter: core::0234::response-message-name=disabled  aip.dev/not-precedent: We need to do this because this response is reused by other APIs as well --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_update_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchUpdateInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1InvestmentTargetsSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_batch_update_investment_targets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1InvestmentTargetsSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:batchUpdate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_batch_validate_investment_target_subscriptions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchValidateInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1BatchValidateResponse:  # noqa: E501
        """Batch Validate Investment Target Subscriptions  # noqa: E501

        Validates multiple Investment Target Subscriptions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_validate_investment_target_subscriptions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchValidateInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchValidateResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_batch_validate_investment_target_subscriptions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_batch_validate_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_batch_validate_investment_target_subscriptions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchValidateInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Validate Investment Target Subscriptions  # noqa: E501

        Validates multiple Investment Target Subscriptions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_validate_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchValidateInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchValidateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_batch_validate_investment_target_subscriptions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchValidateResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargetSubscriptions:batchValidate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_batch_validate_investment_targets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchValidateInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1BatchValidateResponse:  # noqa: E501
        """Batch Validate Investment Targets  # noqa: E501

        Validates multiple Investment Targets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_validate_investment_targets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchValidateInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1BatchValidateResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_batch_validate_investment_targets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_batch_validate_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_batch_validate_investment_targets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1BatchValidateInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Batch Validate Investment Targets  # noqa: E501

        Validates multiple Investment Targets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_batch_validate_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1BatchValidateInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1BatchValidateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_batch_validate_investment_targets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1BatchValidateResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:batchValidate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_cancel_investment_targets_version(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelInvestmentTargetsVersionRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1InvestmentTargetStatusChangeSummaryResponse:  # noqa: E501
        """Cancel Investment Targets Version  # noqa: E501

        Cancels specific version of Investment Targets (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because patch is appropriate for our use-case --) (-- api-linter: core::0136::http-uri-suffix=disabled  aip.dev/not-precedent: We need to do this because we need the method verb as specified here --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_cancel_investment_targets_version(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelInvestmentTargetsVersionRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1InvestmentTargetStatusChangeSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_cancel_investment_targets_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_cancel_investment_targets_version_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_cancel_investment_targets_version_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1CancelInvestmentTargetsVersionRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Cancel Investment Targets Version  # noqa: E501

        Cancels specific version of Investment Targets (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because patch is appropriate for our use-case --) (-- api-linter: core::0136::http-uri-suffix=disabled  aip.dev/not-precedent: We need to do this because we need the method verb as specified here --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_cancel_investment_targets_version_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1CancelInvestmentTargetsVersionRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1InvestmentTargetStatusChangeSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_cancel_investment_targets_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1InvestmentTargetStatusChangeSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:cancel', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_check_target_exists(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], target_name : Annotated[StrictStr, Field(..., description="Specify the target name to check.")], vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> bool:  # noqa: E501
        """Check Investment Target Exists  # noqa: E501

        Checks if an investment target exists, given target name (-- api-linter: aladdin::9002::wordslist-custom-method-rpc=disabled  aip.dev/not-precedent: We need to do this because we need the HTTP method verb as specified --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_check_target_exists(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param target_name: Specify the target name to check. (required)
        :type target_name: str
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bool
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_check_target_exists_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_check_target_exists_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_check_target_exists_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], target_name : Annotated[StrictStr, Field(..., description="Specify the target name to check.")], vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Check Investment Target Exists  # noqa: E501

        Checks if an investment target exists, given target name (-- api-linter: aladdin::9002::wordslist-custom-method-rpc=disabled  aip.dev/not-precedent: We need to do this because we need the HTTP method verb as specified --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_check_target_exists_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param target_name: Specify the target name to check. (required)
        :type target_name: str
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bool, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'target_name',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_check_target_exists" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('target_name') is not None:  # noqa: E501
            _query_params.append(('targetName', _params['target_name']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "bool",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:checkTargetExists', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_delete_investment_target(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], target_name : Annotated[StrictStr, Field(..., description="target name")], vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> RpcStatus:  # noqa: E501
        """Delete Investment Target  # noqa: E501

        Permanently (hard) deletes an Investment Target (-- api-linter: core::0135::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because we need target_name in the uri --) (-- api-linter: core::0135::response-message-name=disabled  aip.dev/not-precedent: We need to do this because we need the response as specified --) (-- api-linter: core::0122::contains-asterix-uri=disabled  aip.dev/not-precedent: We need to do this because we need the specified parameter in url --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_delete_investment_target(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param target_name: target name (required)
        :type target_name: str
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RpcStatus
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_delete_investment_target_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_delete_investment_target_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_delete_investment_target_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], target_name : Annotated[StrictStr, Field(..., description="target name")], vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Investment Target  # noqa: E501

        Permanently (hard) deletes an Investment Target (-- api-linter: core::0135::http-uri-id=disabled  aip.dev/not-precedent: We need to do this because we need target_name in the uri --) (-- api-linter: core::0135::response-message-name=disabled  aip.dev/not-precedent: We need to do this because we need the response as specified --) (-- api-linter: core::0122::contains-asterix-uri=disabled  aip.dev/not-precedent: We need to do this because we need the specified parameter in url --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_delete_investment_target_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param target_name: target name (required)
        :type target_name: str
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RpcStatus, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'target_name',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_delete_investment_target" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['target_name']:
            _path_params['targetName'] = _params['target_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "RpcStatus",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets/{targetName}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_filter_investment_target_subscriptions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1FilterTargetSubscriptionsSummaryResponses:  # noqa: E501
        """Filter Investment Target Subscriptions  # noqa: E501

        Gets Investment Target Subscriptions by target names, ids or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_target_subscriptions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterTargetSubscriptionsSummaryResponses
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_filter_investment_target_subscriptions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_filter_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_filter_investment_target_subscriptions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Investment Target Subscriptions  # noqa: E501

        Gets Investment Target Subscriptions by target names, ids or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterTargetSubscriptionsSummaryResponses, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_filter_investment_target_subscriptions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterTargetSubscriptionsSummaryResponses",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargetSubscriptions:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_filter_investment_target_versions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetVersionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1InvestmentTargetsSummaryResponse:  # noqa: E501
        """Filter Investment Target Versions  # noqa: E501

        Gets Investment Target versions by target name (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because this is a custom method. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_target_versions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetVersionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1InvestmentTargetsSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_filter_investment_target_versions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_filter_investment_target_versions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_filter_investment_target_versions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetVersionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Investment Target Versions  # noqa: E501

        Gets Investment Target versions by target name (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because this is a custom method. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_target_versions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetVersionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1InvestmentTargetsSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_filter_investment_target_versions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1InvestmentTargetsSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:filterInvestmentTargetVersions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_filter_investment_targets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1FilterInvestmentTargetsSummaryResponses:  # noqa: E501
        """Filter Investment Targets  # noqa: E501

        Gets Investment Targets by names, ids or group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_targets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterInvestmentTargetsSummaryResponses
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_filter_investment_targets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_filter_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_filter_investment_targets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Investment Targets  # noqa: E501

        Gets Investment Targets by names, ids or group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterInvestmentTargetsSummaryResponses, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_filter_investment_targets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterInvestmentTargetsSummaryResponses",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:filter', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_filter_investment_targets_by_portfolios(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetsByPortfoliosRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1FilterInvestmentTargetsSummaryResponses:  # noqa: E501
        """Filter Investment Targets By portfolios  # noqa: E501

        Gets Investment Targets by portfolios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_targets_by_portfolios(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetsByPortfoliosRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterInvestmentTargetsSummaryResponses
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_filter_investment_targets_by_portfolios_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_filter_investment_targets_by_portfolios_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_filter_investment_targets_by_portfolios_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetsByPortfoliosRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Investment Targets By portfolios  # noqa: E501

        Gets Investment Targets by portfolios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_targets_by_portfolios_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetsByPortfoliosRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterInvestmentTargetsSummaryResponses, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_filter_investment_targets_by_portfolios" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterInvestmentTargetsSummaryResponses",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:filterByPortfolios', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_filter_investment_targets_by_portfolios_and_aggregate(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetsByPortfoliosAndAggregateRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1FilterInvestmentTargetsByPortfoliosAndAggregateResponse:  # noqa: E501
        """Filter Investment Targets By portfolios  # noqa: E501

        Gets Investment Targets by portfolios and aggregate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_targets_by_portfolios_and_aggregate(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetsByPortfoliosAndAggregateRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterInvestmentTargetsByPortfoliosAndAggregateResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_filter_investment_targets_by_portfolios_and_aggregate_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_filter_investment_targets_by_portfolios_and_aggregate_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_filter_investment_targets_by_portfolios_and_aggregate_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetsByPortfoliosAndAggregateRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Investment Targets By portfolios  # noqa: E501

        Gets Investment Targets by portfolios and aggregate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_targets_by_portfolios_and_aggregate_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetsByPortfoliosAndAggregateRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterInvestmentTargetsByPortfoliosAndAggregateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_filter_investment_targets_by_portfolios_and_aggregate" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterInvestmentTargetsByPortfoliosAndAggregateResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:filterByPortfoliosAndAggregate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_filter_investment_targets_metadata(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1FilterInvestmentTargetsMetadataSummaryResponses:  # noqa: E501
        """Filter Investment Targets Metadata  # noqa: E501

        Gets Investment Targets Metadata by names, ids and groups (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because this is a custom method. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_targets_metadata(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1FilterInvestmentTargetsMetadataSummaryResponses
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_filter_investment_targets_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_filter_investment_targets_metadata_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_filter_investment_targets_metadata_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1FilterInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Filter Investment Targets Metadata  # noqa: E501

        Gets Investment Targets Metadata by names, ids and groups (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because this is a custom method. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_filter_investment_targets_metadata_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1FilterInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1FilterInvestmentTargetsMetadataSummaryResponses, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_filter_investment_targets_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1FilterInvestmentTargetsMetadataSummaryResponses",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:filterInvestmentTargetsMetadata', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_search_investment_target(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], target_name_substring : Annotated[StrictStr, Field(..., description="Specify the Target name search string.")], vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, page_token : Annotated[Optional[StrictStr], Field(description="The starting point of a query result.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of target metadata to be returned per page of results.")] = None, **kwargs) -> V1SearchInvestmentTargetResponse:  # noqa: E501
        """Search Investment Target  # noqa: E501

        Search (type forward search) Investment Targets using target name (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because this is a custom method. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_search_investment_target(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name_substring, vnd_com_blackrock_channel, page_token, page_size, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param target_name_substring: Specify the Target name search string. (required)
        :type target_name_substring: str
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param page_token: The starting point of a query result.
        :type page_token: str
        :param page_size: The maximum number of target metadata to be returned per page of results.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1SearchInvestmentTargetResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_search_investment_target_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_search_investment_target_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name_substring, vnd_com_blackrock_channel, page_token, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_search_investment_target_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], target_name_substring : Annotated[StrictStr, Field(..., description="Specify the Target name search string.")], vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, page_token : Annotated[Optional[StrictStr], Field(description="The starting point of a query result.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of target metadata to be returned per page of results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search Investment Target  # noqa: E501

        Search (type forward search) Investment Targets using target name (-- api-linter: aladdin::9016::query-custom-method-http=disabled aip.dev/not-precedent: We need to do this because this is a custom method. --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_search_investment_target_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, target_name_substring, vnd_com_blackrock_channel, page_token, page_size, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param target_name_substring: Specify the Target name search string. (required)
        :type target_name_substring: str
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param page_token: The starting point of a query result.
        :type page_token: str
        :param page_size: The maximum number of target metadata to be returned per page of results.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1SearchInvestmentTargetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'target_name_substring',
            'vnd_com_blackrock_channel',
            'page_token',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_search_investment_target" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('target_name_substring') is not None:  # noqa: E501
            _query_params.append(('targetNameSubstring', _params['target_name_substring']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1SearchInvestmentTargetResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:searchInvestmentTarget', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_terminate_investment_target_subscriptions(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1TerminateInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1TerminateTargetSubscriptionSummaryResponse:  # noqa: E501
        """Terminate Investment Target Subscriptions  # noqa: E501

        Terminates Investment Target Subscriptions (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because patch is appropriate for our use-case --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_terminate_investment_target_subscriptions(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1TerminateInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1TerminateTargetSubscriptionSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_terminate_investment_target_subscriptions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_terminate_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_terminate_investment_target_subscriptions_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1TerminateInvestmentTargetSubscriptionsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Terminate Investment Target Subscriptions  # noqa: E501

        Terminates Investment Target Subscriptions (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because patch is appropriate for our use-case --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_terminate_investment_target_subscriptions_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1TerminateInvestmentTargetSubscriptionsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1TerminateTargetSubscriptionSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_terminate_investment_target_subscriptions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1TerminateTargetSubscriptionSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargetSubscriptions:terminate', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def investment_target_api_terminate_investment_targets(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1TerminateInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> V1InvestmentTargetStatusChangeSummaryResponse:  # noqa: E501
        """Terminate Investment Targets  # noqa: E501

        Terminates Investment Targets (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because patch is appropriate for our use-case --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_terminate_investment_targets(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1TerminateInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V1InvestmentTargetStatusChangeSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the investment_target_api_terminate_investment_targets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.investment_target_api_terminate_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, **kwargs)  # noqa: E501

    @validate_arguments
    def investment_target_api_terminate_investment_targets_with_http_info(self, vnd_com_blackrock_request_id : Annotated[StrictStr, Field(..., description="A unique identifier for this request.")], vnd_com_blackrock_origin_timestamp : Annotated[datetime, Field(..., description="Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.")], body : V1TerminateInvestmentTargetsRequest, vnd_com_blackrock_channel : Annotated[Optional[StrictStr], Field(description="The channel to send the request to")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Terminate Investment Targets  # noqa: E501

        Terminates Investment Targets (-- api-linter: core::0136::http-method=disabled  aip.dev/not-precedent: We need to do this because patch is appropriate for our use-case --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investment_target_api_terminate_investment_targets_with_http_info(vnd_com_blackrock_request_id, vnd_com_blackrock_origin_timestamp, body, vnd_com_blackrock_channel, async_req=True)
        >>> result = thread.get()

        :param vnd_com_blackrock_request_id: A unique identifier for this request. (required)
        :type vnd_com_blackrock_request_id: str
        :param vnd_com_blackrock_origin_timestamp: Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231. (required)
        :type vnd_com_blackrock_origin_timestamp: datetime
        :param body: (required)
        :type body: V1TerminateInvestmentTargetsRequest
        :param vnd_com_blackrock_channel: The channel to send the request to
        :type vnd_com_blackrock_channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V1InvestmentTargetStatusChangeSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vnd_com_blackrock_request_id',
            'vnd_com_blackrock_origin_timestamp',
            'body',
            'vnd_com_blackrock_channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method investment_target_api_terminate_investment_targets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['vnd_com_blackrock_request_id']:
            _header_params['VND.com.blackrock.Request-ID'] = _params['vnd_com_blackrock_request_id']

        if _params['vnd_com_blackrock_origin_timestamp']:
            _header_params['VND.com.blackrock.Origin-Timestamp'] = _params['vnd_com_blackrock_origin_timestamp']

        if _params['vnd_com_blackrock_channel']:
            _header_params['VND.com.blackrock.Channel'] = _params['vnd_com_blackrock_channel']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['APIKeyHeader', 'OAuth2ClientCredentials', 'basicAuth', 'OAuth2AccessCode', 'ClientKeyHeader']  # noqa: E501

        _response_types_map = {
            '200': "V1InvestmentTargetStatusChangeSummaryResponse",
            '400': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '401': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '403': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
            '404': "InvestmentTargetAPIBatchCreateInvestmentTargetSubscriptions400Response",
        }

        return self.api_client.call_api(
            '/investmentTargets:terminate', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
