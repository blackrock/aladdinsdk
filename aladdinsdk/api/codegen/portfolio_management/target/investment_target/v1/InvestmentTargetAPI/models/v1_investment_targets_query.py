# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_request_type import V1TargetRequestType
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_state import V1TargetState

class V1InvestmentTargetsQuery(BaseModel):
    """
    V1InvestmentTargetsQuery
    """
    request_entities: conlist(StrictStr) = Field(..., alias="requestEntities")
    filter_target_request_type: Optional[V1TargetRequestType] = Field(None, alias="filterTargetRequestType")
    effective_date_time: Optional[datetime] = Field(None, alias="effectiveDateTime")
    target_statuses: Optional[conlist(V1TargetState)] = Field(None, alias="targetStatuses")
    include_child_target: Optional[StrictBool] = Field(None, alias="includeChildTarget")
    __properties = ["requestEntities", "filterTargetRequestType", "effectiveDateTime", "targetStatuses", "includeChildTarget"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1InvestmentTargetsQuery:
        """Create an instance of V1InvestmentTargetsQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1InvestmentTargetsQuery:
        """Create an instance of V1InvestmentTargetsQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1InvestmentTargetsQuery.parse_obj(obj)

        _obj = V1InvestmentTargetsQuery.parse_obj({
            "request_entities": obj.get("requestEntities"),
            "filter_target_request_type": obj.get("filterTargetRequestType"),
            "effective_date_time": obj.get("effectiveDateTime"),
            "target_statuses": obj.get("targetStatuses"),
            "include_child_target": obj.get("includeChildTarget")
        })
        return _obj

