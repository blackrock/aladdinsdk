# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class V1SecurityIds(BaseModel):
    """
    V1SecurityIds
    """
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    sedol: Optional[StrictStr] = None
    isin: Optional[StrictStr] = None
    snp_cusip: Optional[StrictStr] = Field(None, alias="snpCusip")
    new_issue: Optional[StrictBool] = Field(None, alias="newIssue", description="\"New Issue indicator - true indicates a new issue. Defaults to false\".")
    __properties = ["assetId", "sedol", "isin", "snpCusip", "newIssue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SecurityIds:
        """Create an instance of V1SecurityIds from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SecurityIds:
        """Create an instance of V1SecurityIds from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SecurityIds.parse_obj(obj)

        _obj = V1SecurityIds.parse_obj({
            "asset_id": obj.get("assetId"),
            "sedol": obj.get("sedol"),
            "isin": obj.get("isin"),
            "snp_cusip": obj.get("snpCusip"),
            "new_issue": obj.get("newIssue")
        })
        return _obj

