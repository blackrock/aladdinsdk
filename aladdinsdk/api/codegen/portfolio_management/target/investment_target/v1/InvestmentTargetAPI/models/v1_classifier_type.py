# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.types_country import TypesCountry
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.types_currency import TypesCurrency
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.types_issuer import TypesIssuer
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.types_sector import TypesSector
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.types_security_group import TypesSecurityGroup
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.types_strategy import TypesStrategy
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_allocation_group import V1AllocationGroup
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_authorized_asset import V1AuthorizedAsset
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_custom_sector_breakdown import V1CustomSectorBreakdown
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_security_ids import V1SecurityIds
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_breakdown import V1TargetBreakdown
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_cash_buffer import V1TargetCashBuffer
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_cds import V1TargetCDS
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_cdx import V1TargetCDX
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_custom_group import V1TargetCustomGroup
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_equity_options import V1TargetEquityOptions
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_factor import V1TargetFactor
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_financial_futures import V1TargetFinancialFutures
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_futures_options import V1TargetFuturesOptions
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_fx import V1TargetFX
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_fx_options import V1TargetFXOptions
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_fxndf import V1TargetFXNDF
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_index_futures import V1TargetIndexFutures
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_reference import V1TargetReference
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_swap import V1TargetSwap
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_swaptions import V1TargetSwaptions

class V1ClassifierType(BaseModel):
    """
    V1ClassifierType
    """
    target_security_classifier: Optional[V1SecurityIds] = Field(None, alias="targetSecurityClassifier")
    target_country_classifier: Optional[TypesCountry] = Field(None, alias="targetCountryClassifier")
    target_strategy_classifier: Optional[TypesStrategy] = Field(None, alias="targetStrategyClassifier")
    target_authorized_asset_classifier: Optional[V1AuthorizedAsset] = Field(None, alias="targetAuthorizedAssetClassifier")
    target_sector_classifier: Optional[TypesSector] = Field(None, alias="targetSectorClassifier")
    target_allocation_group_classifier: Optional[V1AllocationGroup] = Field(None, alias="targetAllocationGroupClassifier")
    target_security_group_classifier: Optional[TypesSecurityGroup] = Field(None, alias="targetSecurityGroupClassifier")
    target_reference_classifier: Optional[V1TargetReference] = Field(None, alias="targetReferenceClassifier")
    target_factor_classifier: Optional[V1TargetFactor] = Field(None, alias="targetFactorClassifier")
    target_custom_group_classifier: Optional[V1TargetCustomGroup] = Field(None, alias="targetCustomGroupClassifier")
    target_currency_classifier: Optional[TypesCurrency] = Field(None, alias="targetCurrencyClassifier")
    target_cdx_classifier: Optional[V1TargetCDX] = Field(None, alias="targetCdxClassifier")
    target_cds_classifier: Optional[V1TargetCDS] = Field(None, alias="targetCdsClassifier")
    target_swap_classifier: Optional[V1TargetSwap] = Field(None, alias="targetSwapClassifier")
    target_futures_options_classifier: Optional[V1TargetFuturesOptions] = Field(None, alias="targetFuturesOptionsClassifier")
    target_fxoptions_classifier: Optional[V1TargetFXOptions] = Field(None, alias="targetFxoptionsClassifier")
    target_index_futures_classifier: Optional[V1TargetIndexFutures] = Field(None, alias="targetIndexFuturesClassifier")
    target_financial_futures_classifier: Optional[V1TargetFinancialFutures] = Field(None, alias="targetFinancialFuturesClassifier")
    target_fx_classifier: Optional[V1TargetFX] = Field(None, alias="targetFxClassifier")
    target_fxndf_classifier: Optional[V1TargetFXNDF] = Field(None, alias="targetFxndfClassifier")
    target_swaptions_classifier: Optional[V1TargetSwaptions] = Field(None, alias="targetSwaptionsClassifier")
    target_equity_options_classifier: Optional[V1TargetEquityOptions] = Field(None, alias="targetEquityOptionsClassifier")
    custom_sector_breakdown_classifier: Optional[V1CustomSectorBreakdown] = Field(None, alias="customSectorBreakdownClassifier")
    target_cash_buffer_classifier: Optional[V1TargetCashBuffer] = Field(None, alias="targetCashBufferClassifier")
    target_breakdown_classifier: Optional[V1TargetBreakdown] = Field(None, alias="targetBreakdownClassifier")
    target_issuer_classifier: Optional[TypesIssuer] = Field(None, alias="targetIssuerClassifier")
    __properties = ["targetSecurityClassifier", "targetCountryClassifier", "targetStrategyClassifier", "targetAuthorizedAssetClassifier", "targetSectorClassifier", "targetAllocationGroupClassifier", "targetSecurityGroupClassifier", "targetReferenceClassifier", "targetFactorClassifier", "targetCustomGroupClassifier", "targetCurrencyClassifier", "targetCdxClassifier", "targetCdsClassifier", "targetSwapClassifier", "targetFuturesOptionsClassifier", "targetFxoptionsClassifier", "targetIndexFuturesClassifier", "targetFinancialFuturesClassifier", "targetFxClassifier", "targetFxndfClassifier", "targetSwaptionsClassifier", "targetEquityOptionsClassifier", "customSectorBreakdownClassifier", "targetCashBufferClassifier", "targetBreakdownClassifier", "targetIssuerClassifier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ClassifierType:
        """Create an instance of V1ClassifierType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of target_security_classifier
        if self.target_security_classifier:
            _dict['targetSecurityClassifier'] = self.target_security_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_country_classifier
        if self.target_country_classifier:
            _dict['targetCountryClassifier'] = self.target_country_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_strategy_classifier
        if self.target_strategy_classifier:
            _dict['targetStrategyClassifier'] = self.target_strategy_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_authorized_asset_classifier
        if self.target_authorized_asset_classifier:
            _dict['targetAuthorizedAssetClassifier'] = self.target_authorized_asset_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_sector_classifier
        if self.target_sector_classifier:
            _dict['targetSectorClassifier'] = self.target_sector_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_allocation_group_classifier
        if self.target_allocation_group_classifier:
            _dict['targetAllocationGroupClassifier'] = self.target_allocation_group_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_security_group_classifier
        if self.target_security_group_classifier:
            _dict['targetSecurityGroupClassifier'] = self.target_security_group_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_reference_classifier
        if self.target_reference_classifier:
            _dict['targetReferenceClassifier'] = self.target_reference_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_factor_classifier
        if self.target_factor_classifier:
            _dict['targetFactorClassifier'] = self.target_factor_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_custom_group_classifier
        if self.target_custom_group_classifier:
            _dict['targetCustomGroupClassifier'] = self.target_custom_group_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_currency_classifier
        if self.target_currency_classifier:
            _dict['targetCurrencyClassifier'] = self.target_currency_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_cdx_classifier
        if self.target_cdx_classifier:
            _dict['targetCdxClassifier'] = self.target_cdx_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_cds_classifier
        if self.target_cds_classifier:
            _dict['targetCdsClassifier'] = self.target_cds_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_swap_classifier
        if self.target_swap_classifier:
            _dict['targetSwapClassifier'] = self.target_swap_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_futures_options_classifier
        if self.target_futures_options_classifier:
            _dict['targetFuturesOptionsClassifier'] = self.target_futures_options_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_fxoptions_classifier
        if self.target_fxoptions_classifier:
            _dict['targetFxoptionsClassifier'] = self.target_fxoptions_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_index_futures_classifier
        if self.target_index_futures_classifier:
            _dict['targetIndexFuturesClassifier'] = self.target_index_futures_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_financial_futures_classifier
        if self.target_financial_futures_classifier:
            _dict['targetFinancialFuturesClassifier'] = self.target_financial_futures_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_fx_classifier
        if self.target_fx_classifier:
            _dict['targetFxClassifier'] = self.target_fx_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_fxndf_classifier
        if self.target_fxndf_classifier:
            _dict['targetFxndfClassifier'] = self.target_fxndf_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_swaptions_classifier
        if self.target_swaptions_classifier:
            _dict['targetSwaptionsClassifier'] = self.target_swaptions_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_equity_options_classifier
        if self.target_equity_options_classifier:
            _dict['targetEquityOptionsClassifier'] = self.target_equity_options_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_sector_breakdown_classifier
        if self.custom_sector_breakdown_classifier:
            _dict['customSectorBreakdownClassifier'] = self.custom_sector_breakdown_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_cash_buffer_classifier
        if self.target_cash_buffer_classifier:
            _dict['targetCashBufferClassifier'] = self.target_cash_buffer_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_breakdown_classifier
        if self.target_breakdown_classifier:
            _dict['targetBreakdownClassifier'] = self.target_breakdown_classifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_issuer_classifier
        if self.target_issuer_classifier:
            _dict['targetIssuerClassifier'] = self.target_issuer_classifier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ClassifierType:
        """Create an instance of V1ClassifierType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ClassifierType.parse_obj(obj)

        _obj = V1ClassifierType.parse_obj({
            "target_security_classifier": V1SecurityIds.from_dict(obj.get("targetSecurityClassifier")) if obj.get("targetSecurityClassifier") is not None else None,
            "target_country_classifier": TypesCountry.from_dict(obj.get("targetCountryClassifier")) if obj.get("targetCountryClassifier") is not None else None,
            "target_strategy_classifier": TypesStrategy.from_dict(obj.get("targetStrategyClassifier")) if obj.get("targetStrategyClassifier") is not None else None,
            "target_authorized_asset_classifier": V1AuthorizedAsset.from_dict(obj.get("targetAuthorizedAssetClassifier")) if obj.get("targetAuthorizedAssetClassifier") is not None else None,
            "target_sector_classifier": TypesSector.from_dict(obj.get("targetSectorClassifier")) if obj.get("targetSectorClassifier") is not None else None,
            "target_allocation_group_classifier": V1AllocationGroup.from_dict(obj.get("targetAllocationGroupClassifier")) if obj.get("targetAllocationGroupClassifier") is not None else None,
            "target_security_group_classifier": TypesSecurityGroup.from_dict(obj.get("targetSecurityGroupClassifier")) if obj.get("targetSecurityGroupClassifier") is not None else None,
            "target_reference_classifier": V1TargetReference.from_dict(obj.get("targetReferenceClassifier")) if obj.get("targetReferenceClassifier") is not None else None,
            "target_factor_classifier": V1TargetFactor.from_dict(obj.get("targetFactorClassifier")) if obj.get("targetFactorClassifier") is not None else None,
            "target_custom_group_classifier": V1TargetCustomGroup.from_dict(obj.get("targetCustomGroupClassifier")) if obj.get("targetCustomGroupClassifier") is not None else None,
            "target_currency_classifier": TypesCurrency.from_dict(obj.get("targetCurrencyClassifier")) if obj.get("targetCurrencyClassifier") is not None else None,
            "target_cdx_classifier": V1TargetCDX.from_dict(obj.get("targetCdxClassifier")) if obj.get("targetCdxClassifier") is not None else None,
            "target_cds_classifier": V1TargetCDS.from_dict(obj.get("targetCdsClassifier")) if obj.get("targetCdsClassifier") is not None else None,
            "target_swap_classifier": V1TargetSwap.from_dict(obj.get("targetSwapClassifier")) if obj.get("targetSwapClassifier") is not None else None,
            "target_futures_options_classifier": V1TargetFuturesOptions.from_dict(obj.get("targetFuturesOptionsClassifier")) if obj.get("targetFuturesOptionsClassifier") is not None else None,
            "target_fxoptions_classifier": V1TargetFXOptions.from_dict(obj.get("targetFxoptionsClassifier")) if obj.get("targetFxoptionsClassifier") is not None else None,
            "target_index_futures_classifier": V1TargetIndexFutures.from_dict(obj.get("targetIndexFuturesClassifier")) if obj.get("targetIndexFuturesClassifier") is not None else None,
            "target_financial_futures_classifier": V1TargetFinancialFutures.from_dict(obj.get("targetFinancialFuturesClassifier")) if obj.get("targetFinancialFuturesClassifier") is not None else None,
            "target_fx_classifier": V1TargetFX.from_dict(obj.get("targetFxClassifier")) if obj.get("targetFxClassifier") is not None else None,
            "target_fxndf_classifier": V1TargetFXNDF.from_dict(obj.get("targetFxndfClassifier")) if obj.get("targetFxndfClassifier") is not None else None,
            "target_swaptions_classifier": V1TargetSwaptions.from_dict(obj.get("targetSwaptionsClassifier")) if obj.get("targetSwaptionsClassifier") is not None else None,
            "target_equity_options_classifier": V1TargetEquityOptions.from_dict(obj.get("targetEquityOptionsClassifier")) if obj.get("targetEquityOptionsClassifier") is not None else None,
            "custom_sector_breakdown_classifier": V1CustomSectorBreakdown.from_dict(obj.get("customSectorBreakdownClassifier")) if obj.get("customSectorBreakdownClassifier") is not None else None,
            "target_cash_buffer_classifier": V1TargetCashBuffer.from_dict(obj.get("targetCashBufferClassifier")) if obj.get("targetCashBufferClassifier") is not None else None,
            "target_breakdown_classifier": V1TargetBreakdown.from_dict(obj.get("targetBreakdownClassifier")) if obj.get("targetBreakdownClassifier") is not None else None,
            "target_issuer_classifier": TypesIssuer.from_dict(obj.get("targetIssuerClassifier")) if obj.get("targetIssuerClassifier") is not None else None
        })
        return _obj

