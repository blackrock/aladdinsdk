# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.rpc_status import RpcStatus
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_filter_target_subscriptions_summary_response import V1FilterTargetSubscriptionsSummaryResponse

class V1FilterTargetSubscriptionsSummaryResponses(BaseModel):
    """
    V1FilterTargetSubscriptionsSummaryResponses
    """
    filter_target_subscriptions_summary_responses: Dict[str, V1FilterTargetSubscriptionsSummaryResponse] = Field(..., alias="filterTargetSubscriptionsSummaryResponses")
    final_response_status: Optional[RpcStatus] = Field(None, alias="finalResponseStatus")
    __properties = ["filterTargetSubscriptionsSummaryResponses", "finalResponseStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterTargetSubscriptionsSummaryResponses:
        """Create an instance of V1FilterTargetSubscriptionsSummaryResponses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in filter_target_subscriptions_summary_responses (dict)
        _field_dict = {}
        if self.filter_target_subscriptions_summary_responses:
            for _key in self.filter_target_subscriptions_summary_responses:
                if self.filter_target_subscriptions_summary_responses[_key]:
                    _field_dict[_key] = self.filter_target_subscriptions_summary_responses[_key].to_dict()
            _dict['filterTargetSubscriptionsSummaryResponses'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of final_response_status
        if self.final_response_status:
            _dict['finalResponseStatus'] = self.final_response_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterTargetSubscriptionsSummaryResponses:
        """Create an instance of V1FilterTargetSubscriptionsSummaryResponses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterTargetSubscriptionsSummaryResponses.parse_obj(obj)

        _obj = V1FilterTargetSubscriptionsSummaryResponses.parse_obj({
            "filter_target_subscriptions_summary_responses": dict(
                (_k, V1FilterTargetSubscriptionsSummaryResponse.from_dict(_v))
                for _k, _v in obj.get("filterTargetSubscriptionsSummaryResponses").items()
            )
            if obj.get("filterTargetSubscriptionsSummaryResponses") is not None
            else None,
            "final_response_status": RpcStatus.from_dict(obj.get("finalResponseStatus")) if obj.get("finalResponseStatus") is not None else None
        })
        return _obj

