# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class V1ProxyTargetDetail(BaseModel):
    """
    V1ProxyTargetDetail
    """
    proxy_classifier: Optional[StrictStr] = Field(None, alias="proxyClassifier")
    proxy_classifier_type: Optional[StrictStr] = Field(None, alias="proxyClassifierType")
    proxy_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="proxyValue")
    proxy_value_type: Optional[StrictStr] = Field(None, alias="proxyValueType")
    proxy_measure: Optional[StrictStr] = Field(None, alias="proxyMeasure")
    __properties = ["proxyClassifier", "proxyClassifierType", "proxyValue", "proxyValueType", "proxyMeasure"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ProxyTargetDetail:
        """Create an instance of V1ProxyTargetDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ProxyTargetDetail:
        """Create an instance of V1ProxyTargetDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ProxyTargetDetail.parse_obj(obj)

        _obj = V1ProxyTargetDetail.parse_obj({
            "proxy_classifier": obj.get("proxyClassifier"),
            "proxy_classifier_type": obj.get("proxyClassifierType"),
            "proxy_value": obj.get("proxyValue"),
            "proxy_value_type": obj.get("proxyValueType"),
            "proxy_measure": obj.get("proxyMeasure")
        })
        return _obj

