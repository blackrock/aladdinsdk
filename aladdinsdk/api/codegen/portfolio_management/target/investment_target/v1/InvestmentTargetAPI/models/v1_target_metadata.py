# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_primary_purpose import V1PrimaryPurpose
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_category import V1TargetCategory
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_source import V1TargetSource
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_state import V1TargetState

class V1TargetMetadata(BaseModel):
    """
    V1TargetMetadata
    """
    id: Optional[StrictStr] = None
    target_name: StrictStr = Field(..., alias="targetName")
    start_date: Optional[date] = Field(None, alias="startDate")
    end_date: Optional[date] = Field(None, alias="endDate")
    target_status: Optional[V1TargetState] = Field(None, alias="targetStatus")
    effective_date_time: Optional[datetime] = Field(None, alias="effectiveDateTime", description="Effective date time  of the target. Valid formats are [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]. It's in UTC timezone.")
    effective_timezone: Optional[StrictStr] = Field(None, alias="effectiveTimezone", description="Effective Timezone of the Target as indicated by the model manager. Please refer to TGT_TIME_ZONE decode for the allowed time zones.")
    version: Optional[StrictInt] = Field(None, description="Version of the target. It's used in case of  target versioning.")
    target_category: Optional[V1TargetCategory] = Field(None, alias="targetCategory")
    reference_target_id: Optional[StrictStr] = Field(None, alias="referenceTargetId")
    parent_target_id: Optional[StrictStr] = Field(None, alias="parentTargetId")
    target_owner: Optional[StrictStr] = Field(None, alias="targetOwner", description="Business group that owns this target. It's used for target permissioning. Please refer to BUSINESS_GROUP decode for the available target owners.")
    primary_purpose: Optional[V1PrimaryPurpose] = Field(None, alias="primaryPurpose")
    target_source: Optional[V1TargetSource] = Field(None, alias="targetSource")
    target_group: Optional[StrictStr] = Field(None, alias="targetGroup", description="Group similar targets together to facilitate bulk workflows. Please refer to TARGET_GROUP decode for the available groups.")
    root_strategy: Optional[StrictStr] = Field(None, alias="rootStrategy")
    target_comment: Optional[StrictStr] = Field(None, alias="targetComment")
    modifier: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    approver: Optional[StrictStr] = None
    approve_time: Optional[datetime] = Field(None, alias="approveTime")
    pm_case_id: Optional[StrictStr] = Field(None, alias="pmCaseId")
    revision: Optional[StrictStr] = None
    reference_portfolio_ticker: Optional[StrictStr] = Field(None, alias="referencePortfolioTicker")
    __properties = ["id", "targetName", "startDate", "endDate", "targetStatus", "effectiveDateTime", "effectiveTimezone", "version", "targetCategory", "referenceTargetId", "parentTargetId", "targetOwner", "primaryPurpose", "targetSource", "targetGroup", "rootStrategy", "targetComment", "modifier", "modifyTime", "approver", "approveTime", "pmCaseId", "revision", "referencePortfolioTicker"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TargetMetadata:
        """Create an instance of V1TargetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TargetMetadata:
        """Create an instance of V1TargetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TargetMetadata.parse_obj(obj)

        _obj = V1TargetMetadata.parse_obj({
            "id": obj.get("id"),
            "target_name": obj.get("targetName"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "target_status": obj.get("targetStatus"),
            "effective_date_time": obj.get("effectiveDateTime"),
            "effective_timezone": obj.get("effectiveTimezone"),
            "version": obj.get("version"),
            "target_category": obj.get("targetCategory"),
            "reference_target_id": obj.get("referenceTargetId"),
            "parent_target_id": obj.get("parentTargetId"),
            "target_owner": obj.get("targetOwner"),
            "primary_purpose": obj.get("primaryPurpose"),
            "target_source": obj.get("targetSource"),
            "target_group": obj.get("targetGroup"),
            "root_strategy": obj.get("rootStrategy"),
            "target_comment": obj.get("targetComment"),
            "modifier": obj.get("modifier"),
            "modify_time": obj.get("modifyTime"),
            "approver": obj.get("approver"),
            "approve_time": obj.get("approveTime"),
            "pm_case_id": obj.get("pmCaseId"),
            "revision": obj.get("revision"),
            "reference_portfolio_ticker": obj.get("referencePortfolioTicker")
        })
        return _obj

