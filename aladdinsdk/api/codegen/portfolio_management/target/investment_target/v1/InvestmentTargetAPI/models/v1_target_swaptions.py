# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_options_style import V1OptionsStyle
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_rtr_rtp_type import V1RtrRtpType
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_swaption_type import V1SwaptionType

class V1TargetSwaptions(BaseModel):
    """
    TargetSwaptions describes fields that are part of Swaptions classifier.
    """
    expiry_date: date = Field(..., alias="expiryDate")
    rtr_rtp_type: Optional[V1RtrRtpType] = Field(None, alias="rtrRtpType")
    options_style: Optional[V1OptionsStyle] = Field(None, alias="optionsStyle")
    strike: Union[StrictFloat, StrictInt] = Field(...)
    currency_code: Optional[StrictStr] = Field(None, alias="currencyCode")
    swap_term: StrictStr = Field(..., alias="swapTerm")
    target_swaption_type: Optional[V1SwaptionType] = Field(None, alias="targetSwaptionType")
    underlying_ticker: Optional[StrictStr] = Field(None, alias="underlyingTicker")
    __properties = ["expiryDate", "rtrRtpType", "optionsStyle", "strike", "currencyCode", "swapTerm", "targetSwaptionType", "underlyingTicker"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TargetSwaptions:
        """Create an instance of V1TargetSwaptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TargetSwaptions:
        """Create an instance of V1TargetSwaptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TargetSwaptions.parse_obj(obj)

        _obj = V1TargetSwaptions.parse_obj({
            "expiry_date": obj.get("expiryDate"),
            "rtr_rtp_type": obj.get("rtrRtpType"),
            "options_style": obj.get("optionsStyle"),
            "strike": obj.get("strike"),
            "currency_code": obj.get("currencyCode"),
            "swap_term": obj.get("swapTerm"),
            "target_swaption_type": obj.get("targetSwaptionType"),
            "underlying_ticker": obj.get("underlyingTicker")
        })
        return _obj

