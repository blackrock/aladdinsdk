# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_state import V1TargetState

class V1InvestmentTargetVersionsRequestQuery(BaseModel):
    """
    V1InvestmentTargetVersionsRequestQuery
    """
    target_name: StrictStr = Field(..., alias="targetName")
    start_effective_date: Optional[date] = Field(None, alias="startEffectiveDate")
    end_effective_date: Optional[date] = Field(None, alias="endEffectiveDate")
    target_statuses: Optional[conlist(V1TargetState)] = Field(None, alias="targetStatuses")
    __properties = ["targetName", "startEffectiveDate", "endEffectiveDate", "targetStatuses"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1InvestmentTargetVersionsRequestQuery:
        """Create an instance of V1InvestmentTargetVersionsRequestQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1InvestmentTargetVersionsRequestQuery:
        """Create an instance of V1InvestmentTargetVersionsRequestQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1InvestmentTargetVersionsRequestQuery.parse_obj(obj)

        _obj = V1InvestmentTargetVersionsRequestQuery.parse_obj({
            "target_name": obj.get("targetName"),
            "start_effective_date": obj.get("startEffectiveDate"),
            "end_effective_date": obj.get("endEffectiveDate"),
            "target_statuses": obj.get("targetStatuses")
        })
        return _obj

