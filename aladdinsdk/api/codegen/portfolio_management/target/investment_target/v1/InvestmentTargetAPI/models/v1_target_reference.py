# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1TargetReference(BaseModel):
    """
    V1TargetReference
    """
    reference_target_id: Optional[StrictStr] = Field(None, alias="referenceTargetId")
    reference_target_name: StrictStr = Field(..., alias="referenceTargetName", description="Name of the Target used to source target definition from. Applicable when the target is set up to inherit definition from reference target.")
    __properties = ["referenceTargetId", "referenceTargetName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TargetReference:
        """Create an instance of V1TargetReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TargetReference:
        """Create an instance of V1TargetReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TargetReference.parse_obj(obj)

        _obj = V1TargetReference.parse_obj({
            "reference_target_id": obj.get("referenceTargetId"),
            "reference_target_name": obj.get("referenceTargetName")
        })
        return _obj

