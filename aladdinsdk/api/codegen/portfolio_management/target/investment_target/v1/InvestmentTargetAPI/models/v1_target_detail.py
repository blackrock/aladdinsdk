# coding: utf-8

"""
    Aladdin Investment Target

    This service provides advance capabilities to create and manage all types of Aladdin Investment Targets and their associated subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_classifier_type import V1ClassifierType
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_proxy_target_detail import V1ProxyTargetDetail
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_restriction_type import V1RestrictionType
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_measure import V1TargetMeasure
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_threshold_type import V1TargetThresholdType
from aladdinsdk.api.codegen.portfolio_management.target.investment_target.v1.InvestmentTargetAPI.models.v1_target_value_type import V1TargetValueType

class V1TargetDetail(BaseModel):
    """
    V1TargetDetail
    """
    target_detail_id: Optional[StrictStr] = Field(None, alias="targetDetailId")
    target_classifier_type: Optional[V1ClassifierType] = Field(None, alias="targetClassifierType")
    classifier_name: Optional[StrictStr] = Field(None, alias="classifierName")
    classifier: Optional[StrictStr] = None
    sub_strategy: Optional[StrictStr] = Field(None, alias="subStrategy")
    target_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="targetValue")
    target_value_type: Optional[V1TargetValueType] = Field(None, alias="targetValueType")
    target_value_source: Optional[StrictStr] = Field(None, alias="targetValueSource")
    target_value_source_subtype: Optional[StrictStr] = Field(None, alias="targetValueSourceSubtype")
    target_value_reference: Optional[StrictStr] = Field(None, alias="targetValueReference")
    target_measure: Optional[V1TargetMeasure] = Field(None, alias="targetMeasure")
    ordering: Optional[StrictInt] = None
    threshold_type: Optional[V1TargetThresholdType] = Field(None, alias="thresholdType")
    lower_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lowerThreshold")
    upper_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="upperThreshold")
    proxy_target_detail: Optional[V1ProxyTargetDetail] = Field(None, alias="proxyTargetDetail")
    parent_detail_id: Optional[StrictStr] = Field(None, alias="parentDetailId")
    restriction_type: Optional[V1RestrictionType] = Field(None, alias="restrictionType")
    target_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="targetQuantity")
    base_target_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="baseTargetValue")
    target_detail_children: Optional[conlist(V1TargetDetail)] = Field(None, alias="targetDetailChildren")
    final_target_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="finalTargetValue")
    overridden_target_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="overriddenTargetValue")
    lower_inner_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="lowerInnerThreshold")
    upper_inner_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="upperInnerThreshold")
    revision: Optional[StrictStr] = None
    __properties = ["targetDetailId", "targetClassifierType", "classifierName", "classifier", "subStrategy", "targetValue", "targetValueType", "targetValueSource", "targetValueSourceSubtype", "targetValueReference", "targetMeasure", "ordering", "thresholdType", "lowerThreshold", "upperThreshold", "proxyTargetDetail", "parentDetailId", "restrictionType", "targetQuantity", "baseTargetValue", "targetDetailChildren", "finalTargetValue", "overriddenTargetValue", "lowerInnerThreshold", "upperInnerThreshold", "revision"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TargetDetail:
        """Create an instance of V1TargetDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of target_classifier_type
        if self.target_classifier_type:
            _dict['targetClassifierType'] = self.target_classifier_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy_target_detail
        if self.proxy_target_detail:
            _dict['proxyTargetDetail'] = self.proxy_target_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in target_detail_children (list)
        _items = []
        if self.target_detail_children:
            for _item in self.target_detail_children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['targetDetailChildren'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TargetDetail:
        """Create an instance of V1TargetDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TargetDetail.parse_obj(obj)

        _obj = V1TargetDetail.parse_obj({
            "target_detail_id": obj.get("targetDetailId"),
            "target_classifier_type": V1ClassifierType.from_dict(obj.get("targetClassifierType")) if obj.get("targetClassifierType") is not None else None,
            "classifier_name": obj.get("classifierName"),
            "classifier": obj.get("classifier"),
            "sub_strategy": obj.get("subStrategy"),
            "target_value": obj.get("targetValue"),
            "target_value_type": obj.get("targetValueType"),
            "target_value_source": obj.get("targetValueSource"),
            "target_value_source_subtype": obj.get("targetValueSourceSubtype"),
            "target_value_reference": obj.get("targetValueReference"),
            "target_measure": obj.get("targetMeasure"),
            "ordering": obj.get("ordering"),
            "threshold_type": obj.get("thresholdType"),
            "lower_threshold": obj.get("lowerThreshold"),
            "upper_threshold": obj.get("upperThreshold"),
            "proxy_target_detail": V1ProxyTargetDetail.from_dict(obj.get("proxyTargetDetail")) if obj.get("proxyTargetDetail") is not None else None,
            "parent_detail_id": obj.get("parentDetailId"),
            "restriction_type": obj.get("restrictionType"),
            "target_quantity": obj.get("targetQuantity"),
            "base_target_value": obj.get("baseTargetValue"),
            "target_detail_children": [V1TargetDetail.from_dict(_item) for _item in obj.get("targetDetailChildren")] if obj.get("targetDetailChildren") is not None else None,
            "final_target_value": obj.get("finalTargetValue"),
            "overridden_target_value": obj.get("overriddenTargetValue"),
            "lower_inner_threshold": obj.get("lowerInnerThreshold"),
            "upper_inner_threshold": obj.get("upperInnerThreshold"),
            "revision": obj.get("revision")
        })
        return _obj

