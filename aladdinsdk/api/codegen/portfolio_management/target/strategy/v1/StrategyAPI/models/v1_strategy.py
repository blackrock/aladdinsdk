# coding: utf-8

"""
    Aladdin Strategy

    Contains operations for creating, updating, and retrieving trade strategies in Aladdin.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1Strategy(BaseModel):
    """
    Represents investment strategy referred to by orders and trades.
    """
    id: Optional[StrictStr] = Field(None, description="The numeric ID of the strategy. This value is system-generated and should not be included in the request.")
    strategy_name: Optional[StrictStr] = Field(None, alias="strategyName", description="The name of the strategy. If the strategy has a parent, it has to be prefixed and separated by colon. Example strategy name - US : BONDS (US is parent strategy and US : BONDS together is the strategy name).")
    strategy_description: Optional[StrictStr] = Field(None, alias="strategyDescription", description="The description of the strategy.")
    expire_date: Optional[date] = Field(None, alias="expireDate", description="The expiration date of the Strategy. If omitted this will default to 2222-12-31.")
    start_date: Optional[date] = Field(None, alias="startDate")
    __properties = ["id", "strategyName", "strategyDescription", "expireDate", "startDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Strategy:
        """Create an instance of V1Strategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Strategy:
        """Create an instance of V1Strategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Strategy.parse_obj(obj)

        _obj = V1Strategy.parse_obj({
            "id": obj.get("id"),
            "strategy_name": obj.get("strategyName"),
            "strategy_description": obj.get("strategyDescription"),
            "expire_date": obj.get("expireDate"),
            "start_date": obj.get("startDate")
        })
        return _obj

