# coding: utf-8

"""
    Portfolio Configuration Record For Accounting

    Configurations API for Aladdin Accounting allows you to access accounting configuration attributes for process types that portfolios are setup on. Data can be sourced in aggregate and filtered to improve oversight and scale of configuration monitoring. This API allows for retrieval of key data points for portfolio configurations by various parameters, including portfolio tickers, processCodes, and more.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.accounting.configuration.attribute.portfolio.records.v1.PortfolioConfigurationAPI.models.v1_value_list import V1ValueList

class V1ConfigurationFilterQuery(BaseModel):
    """
    V1ConfigurationFilterQuery
    """
    tickers: conlist(StrictStr) = Field(..., description="List of tickers in the request. It is a required field.")
    process_codes: conlist(StrictStr) = Field(..., alias="processCodes", description="List of process codes. A maximum of 5 process codes can be specified in a single request. For the list of processCodes that can be denoted, please refer to the ALPHA_FLAGFINAL decodes table and use the cde value.")
    accounting_attribute_names: Optional[conlist(StrictStr)] = Field(None, alias="accountingAttributeNames")
    accounting_attributes_value_criteria: Optional[Dict[str, V1ValueList]] = Field(None, alias="accountingAttributesValueCriteria")
    as_of_date: Optional[date] = Field(None, alias="asOfDate", description="It is an optional field. By default it takes current date.")
    include_history: Optional[StrictBool] = Field(None, alias="includeHistory", description="History flag is an optional field. By default its value is false. It is used when user needs to see the history of the attributes in the record.")
    __properties = ["tickers", "processCodes", "accountingAttributeNames", "accountingAttributesValueCriteria", "asOfDate", "includeHistory"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ConfigurationFilterQuery:
        """Create an instance of V1ConfigurationFilterQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in accounting_attributes_value_criteria (dict)
        _field_dict = {}
        if self.accounting_attributes_value_criteria:
            for _key in self.accounting_attributes_value_criteria:
                if self.accounting_attributes_value_criteria[_key]:
                    _field_dict[_key] = self.accounting_attributes_value_criteria[_key].to_dict()
            _dict['accountingAttributesValueCriteria'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ConfigurationFilterQuery:
        """Create an instance of V1ConfigurationFilterQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ConfigurationFilterQuery.parse_obj(obj)

        _obj = V1ConfigurationFilterQuery.parse_obj({
            "tickers": obj.get("tickers"),
            "process_codes": obj.get("processCodes"),
            "accounting_attribute_names": obj.get("accountingAttributeNames"),
            "accounting_attributes_value_criteria": dict(
                (_k, V1ValueList.from_dict(_v))
                for _k, _v in obj.get("accountingAttributesValueCriteria").items()
            )
            if obj.get("accountingAttributesValueCriteria") is not None
            else None,
            "as_of_date": obj.get("asOfDate"),
            "include_history": obj.get("includeHistory")
        })
        return _obj

