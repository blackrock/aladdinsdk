# coding: utf-8

"""
    Portfolio Configuration Record For Accounting

    Configurations API for Aladdin Accounting allows you to access accounting configuration attributes for process types that portfolios are setup on. Data can be sourced in aggregate and filtered to improve oversight and scale of configuration monitoring. This API allows for retrieval of key data points for portfolio configurations by various parameters, including portfolio tickers, processCodes, and more.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.accounting.configuration.attribute.portfolio.records.v1.PortfolioConfigurationAPI.models.v1_portfolio_configuration_record import V1PortfolioConfigurationRecord

class V1FilterPortfolioConfigurationRecordsResponse(BaseModel):
    """
    V1FilterPortfolioConfigurationRecordsResponse
    """
    portfolio_configuration_records: Optional[conlist(V1PortfolioConfigurationRecord)] = Field(None, alias="portfolioConfigurationRecords", description="Portfolio configuration records retrieved as per the request.")
    next_page_token: Optional[StrictStr] = Field(None, alias="nextPageToken", description="It defines the next page token to get more results.")
    __properties = ["portfolioConfigurationRecords", "nextPageToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1FilterPortfolioConfigurationRecordsResponse:
        """Create an instance of V1FilterPortfolioConfigurationRecordsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in portfolio_configuration_records (list)
        _items = []
        if self.portfolio_configuration_records:
            for _item in self.portfolio_configuration_records:
                if _item:
                    _items.append(_item.to_dict())
            _dict['portfolioConfigurationRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1FilterPortfolioConfigurationRecordsResponse:
        """Create an instance of V1FilterPortfolioConfigurationRecordsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1FilterPortfolioConfigurationRecordsResponse.parse_obj(obj)

        _obj = V1FilterPortfolioConfigurationRecordsResponse.parse_obj({
            "portfolio_configuration_records": [V1PortfolioConfigurationRecord.from_dict(_item) for _item in obj.get("portfolioConfigurationRecords")] if obj.get("portfolioConfigurationRecords") is not None else None,
            "next_page_token": obj.get("nextPageToken")
        })
        return _obj

