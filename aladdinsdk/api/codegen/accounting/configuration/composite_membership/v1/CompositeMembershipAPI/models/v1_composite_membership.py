# coding: utf-8

"""
    Composite Membership

    This service briefs about composite membership.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1CompositeMembership(BaseModel):
    """
    V1CompositeMembership
    """
    id: Optional[StrictStr] = None
    composite_name: Optional[StrictStr] = Field(None, alias="compositeName")
    portfolio_id: Optional[StrictStr] = Field(None, alias="portfolioId")
    entry_date: Optional[date] = Field(None, alias="entryDate")
    exit_date: Optional[date] = Field(None, alias="exitDate")
    entry_reason: Optional[StrictStr] = Field(None, alias="entryReason")
    exit_reason: Optional[StrictStr] = Field(None, alias="exitReason")
    latest_comment: Optional[StrictStr] = Field(None, alias="latestComment")
    author: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    old_latest_comment: Optional[StrictStr] = Field(None, alias="oldLatestComment")
    old_entry_date: Optional[date] = Field(None, alias="oldEntryDate")
    old_exit_date: Optional[date] = Field(None, alias="oldExitDate")
    old_entry_reason: Optional[StrictStr] = Field(None, alias="oldEntryReason")
    old_exit_reason: Optional[StrictStr] = Field(None, alias="oldExitReason")
    __properties = ["id", "compositeName", "portfolioId", "entryDate", "exitDate", "entryReason", "exitReason", "latestComment", "author", "modifyTime", "oldLatestComment", "oldEntryDate", "oldExitDate", "oldEntryReason", "oldExitReason"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CompositeMembership:
        """Create an instance of V1CompositeMembership from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CompositeMembership:
        """Create an instance of V1CompositeMembership from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CompositeMembership.parse_obj(obj)

        _obj = V1CompositeMembership.parse_obj({
            "id": obj.get("id"),
            "composite_name": obj.get("compositeName"),
            "portfolio_id": obj.get("portfolioId"),
            "entry_date": obj.get("entryDate"),
            "exit_date": obj.get("exitDate"),
            "entry_reason": obj.get("entryReason"),
            "exit_reason": obj.get("exitReason"),
            "latest_comment": obj.get("latestComment"),
            "author": obj.get("author"),
            "modify_time": obj.get("modifyTime"),
            "old_latest_comment": obj.get("oldLatestComment"),
            "old_entry_date": obj.get("oldEntryDate"),
            "old_exit_date": obj.get("oldExitDate"),
            "old_entry_reason": obj.get("oldEntryReason"),
            "old_exit_reason": obj.get("oldExitReason")
        })
        return _obj

