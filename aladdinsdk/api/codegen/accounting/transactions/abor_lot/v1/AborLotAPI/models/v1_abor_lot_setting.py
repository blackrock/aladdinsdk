# coding: utf-8

"""
    Abor Lot

    This service can be used to get AborLot data.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from aladdinsdk.api.codegen.accounting.transactions.abor_lot.v1.AborLotAPI.models.enums_abor_lot_setting_source import EnumsAborLotSettingSource

class V1AborLotSetting(BaseModel):
    """
    V1AborLotSetting
    """
    md_uuid: Optional[StrictStr] = Field(None, alias="mdUuid")
    setting_value: Optional[StrictStr] = Field(None, alias="settingValue")
    datatype: Optional[StrictStr] = None
    abor_lot_setting_source: Optional[EnumsAborLotSettingSource] = Field(None, alias="aborLotSettingSource")
    effective_date: Optional[date] = Field(None, alias="effectiveDate")
    key: Optional[StrictStr] = None
    __properties = ["mdUuid", "settingValue", "datatype", "aborLotSettingSource", "effectiveDate", "key"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AborLotSetting:
        """Create an instance of V1AborLotSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AborLotSetting:
        """Create an instance of V1AborLotSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AborLotSetting.parse_obj(obj)

        _obj = V1AborLotSetting.parse_obj({
            "md_uuid": obj.get("mdUuid"),
            "setting_value": obj.get("settingValue"),
            "datatype": obj.get("datatype"),
            "abor_lot_setting_source": obj.get("aborLotSettingSource"),
            "effective_date": obj.get("effectiveDate"),
            "key": obj.get("key")
        })
        return _obj

