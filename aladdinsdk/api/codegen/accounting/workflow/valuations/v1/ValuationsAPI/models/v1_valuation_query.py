# coding: utf-8

"""
    Valuations

    In an accounting workflow, valuations are generated for various processes at the portfolio/portfolio group level. This service can be used to retrieve and filter for accounting valuations data.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.accounting.workflow.valuations.v1.ValuationsAPI.models.enums_ticker_expansion_type import EnumsTickerExpansionType

class V1ValuationQuery(BaseModel):
    """
    V1ValuationQuery
    """
    valuation_ids: Optional[conlist(StrictInt)] = Field(None, alias="valuationIds")
    portfolio_tickers: Optional[conlist(StrictStr)] = Field(None, alias="portfolioTickers")
    start_date: Optional[date] = Field(None, alias="startDate")
    end_date: Optional[date] = Field(None, alias="endDate")
    process_types: Optional[conlist(StrictStr)] = Field(None, alias="processTypes", description="List of process types to filter Valuations for given portfolio. See ALPHA_FLAGFINAL decodes table for the values of process types available to be filtered by.")
    nav_statuses: Optional[conlist(StrictStr)] = Field(None, alias="navStatuses", description="List of nav statuses. See NAV_STATUS decodes table, use cde values for the nav status available to be filtered by.")
    sort_columns: Optional[conlist(StrictStr)] = Field(None, alias="sortColumns")
    max_record: Optional[StrictInt] = Field(None, alias="maxRecord", description="Maximum limit to fetch Valuations.")
    portfolio_ids: Optional[conlist(StrictStr)] = Field(None, alias="portfolioIds", description="List of portofolio codes to filter Valuations for.")
    workflow_status: Optional[StrictStr] = Field(None, alias="workflowStatus", description="Workflow status to filter the valuations by. See NAV_STATUS decodes table, use decde values for the workflow status available.")
    expansion_type: Optional[EnumsTickerExpansionType] = Field(None, alias="expansionType")
    __properties = ["valuationIds", "portfolioTickers", "startDate", "endDate", "processTypes", "navStatuses", "sortColumns", "maxRecord", "portfolioIds", "workflowStatus", "expansionType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ValuationQuery:
        """Create an instance of V1ValuationQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ValuationQuery:
        """Create an instance of V1ValuationQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ValuationQuery.parse_obj(obj)

        _obj = V1ValuationQuery.parse_obj({
            "valuation_ids": obj.get("valuationIds"),
            "portfolio_tickers": obj.get("portfolioTickers"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "process_types": obj.get("processTypes"),
            "nav_statuses": obj.get("navStatuses"),
            "sort_columns": obj.get("sortColumns"),
            "max_record": obj.get("maxRecord"),
            "portfolio_ids": obj.get("portfolioIds"),
            "workflow_status": obj.get("workflowStatus"),
            "expansion_type": obj.get("expansionType")
        })
        return _obj

