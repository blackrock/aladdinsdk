# coding: utf-8

"""
    Valuations

    In an accounting workflow, valuations are generated for various processes at the portfolio/portfolio group level. This service can be used to retrieve and filter for accounting valuations data.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class V1Valuation(BaseModel):
    """
    V1Valuation
    """
    id: Optional[StrictStr] = None
    portfolio_ticker: Optional[StrictStr] = Field(None, alias="portfolioTicker")
    worflow_status: Optional[StrictStr] = Field(None, alias="worflowStatus")
    process_type: Optional[StrictStr] = Field(None, alias="processType")
    end_date: Optional[date] = Field(None, alias="endDate")
    nav_status: Optional[StrictStr] = Field(None, alias="navStatus")
    portfolio_id: Optional[StrictStr] = Field(None, alias="portfolioId")
    start_date: Optional[date] = Field(None, alias="startDate")
    snapshot_time: Optional[datetime] = Field(None, alias="snapshotTime")
    start_snapshot_time: Optional[datetime] = Field(None, alias="startSnapshotTime")
    published_time: Optional[datetime] = Field(None, alias="publishedTime")
    creation_time: Optional[datetime] = Field(None, alias="creationTime")
    signoff_time: Optional[datetime] = Field(None, alias="signoffTime")
    benchmark_name: Optional[StrictStr] = Field(None, alias="benchmarkName")
    market_price_snap_time: Optional[datetime] = Field(None, alias="marketPriceSnapTime")
    nav_source: Optional[StrictStr] = Field(None, alias="navSource")
    valuation_nav: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="valuationNav")
    share: Optional[Union[StrictFloat, StrictInt]] = None
    nav_shr: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="navShr")
    total_return_source: Optional[StrictStr] = Field(None, alias="totalReturnSource")
    start_nav: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="startNav")
    total_flow: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalFlow")
    dietz_nav: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="dietzNav")
    total_return: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalReturn")
    total_return_mtd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalReturnMtd")
    total_return_qtd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalReturnQtd")
    total_return_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalReturnYtd")
    total_return_incept: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalReturnIncept")
    exception_count: Optional[StrictInt] = Field(None, alias="exceptionCount")
    benchmark_portfolio_id: Optional[StrictStr] = Field(None, alias="benchmarkPortfolioId")
    benchmark_total_return: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="benchmarkTotalReturn")
    benchmark_total_return_mtd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="benchmarkTotalReturnMtd")
    benchmark_total_return_qtd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="benchmarkTotalReturnQtd")
    benchmark_total_return_ytd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="benchmarkTotalReturnYtd")
    benchmark_total_return_incept: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="benchmarkTotalReturnIncept")
    admin: Optional[StrictStr] = None
    active_time: Optional[datetime] = Field(None, alias="activeTime")
    admin_approver: Optional[StrictStr] = Field(None, alias="adminApprover")
    pmg_approver: Optional[StrictStr] = Field(None, alias="pmgApprover")
    pmg_approval_time: Optional[datetime] = Field(None, alias="pmgApprovalTime")
    total_net_return_management: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalNetReturnManagement")
    nav_nugget: Optional[StrictStr] = Field(None, alias="navNugget")
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    total_net_return: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalNetReturn")
    cash_recon_count: Optional[StrictInt] = Field(None, alias="cashReconCount")
    valuation_currency_code: Optional[StrictStr] = Field(None, alias="valuationCurrencyCode")
    publisher: Optional[StrictStr] = None
    modifier: Optional[StrictStr] = None
    valuation_price_group: Optional[StrictStr] = Field(None, alias="valuationPriceGroup")
    nav_basis: Optional[StrictStr] = Field(None, alias="navBasis")
    acct_basis: Optional[StrictStr] = Field(None, alias="acctBasis")
    reason: Optional[StrictStr] = None
    process_code: Optional[StrictStr] = Field(None, alias="processCode")
    restate_comment: Optional[StrictStr] = Field(None, alias="restateComment")
    __properties = ["id", "portfolioTicker", "worflowStatus", "processType", "endDate", "navStatus", "portfolioId", "startDate", "snapshotTime", "startSnapshotTime", "publishedTime", "creationTime", "signoffTime", "benchmarkName", "marketPriceSnapTime", "navSource", "valuationNav", "share", "navShr", "totalReturnSource", "startNav", "totalFlow", "dietzNav", "totalReturn", "totalReturnMtd", "totalReturnQtd", "totalReturnYtd", "totalReturnIncept", "exceptionCount", "benchmarkPortfolioId", "benchmarkTotalReturn", "benchmarkTotalReturnMtd", "benchmarkTotalReturnQtd", "benchmarkTotalReturnYtd", "benchmarkTotalReturnIncept", "admin", "activeTime", "adminApprover", "pmgApprover", "pmgApprovalTime", "totalNetReturnManagement", "navNugget", "modifyTime", "totalNetReturn", "cashReconCount", "valuationCurrencyCode", "publisher", "modifier", "valuationPriceGroup", "navBasis", "acctBasis", "reason", "processCode", "restateComment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Valuation:
        """Create an instance of V1Valuation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Valuation:
        """Create an instance of V1Valuation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Valuation.parse_obj(obj)

        _obj = V1Valuation.parse_obj({
            "id": obj.get("id"),
            "portfolio_ticker": obj.get("portfolioTicker"),
            "worflow_status": obj.get("worflowStatus"),
            "process_type": obj.get("processType"),
            "end_date": obj.get("endDate"),
            "nav_status": obj.get("navStatus"),
            "portfolio_id": obj.get("portfolioId"),
            "start_date": obj.get("startDate"),
            "snapshot_time": obj.get("snapshotTime"),
            "start_snapshot_time": obj.get("startSnapshotTime"),
            "published_time": obj.get("publishedTime"),
            "creation_time": obj.get("creationTime"),
            "signoff_time": obj.get("signoffTime"),
            "benchmark_name": obj.get("benchmarkName"),
            "market_price_snap_time": obj.get("marketPriceSnapTime"),
            "nav_source": obj.get("navSource"),
            "valuation_nav": obj.get("valuationNav"),
            "share": obj.get("share"),
            "nav_shr": obj.get("navShr"),
            "total_return_source": obj.get("totalReturnSource"),
            "start_nav": obj.get("startNav"),
            "total_flow": obj.get("totalFlow"),
            "dietz_nav": obj.get("dietzNav"),
            "total_return": obj.get("totalReturn"),
            "total_return_mtd": obj.get("totalReturnMtd"),
            "total_return_qtd": obj.get("totalReturnQtd"),
            "total_return_ytd": obj.get("totalReturnYtd"),
            "total_return_incept": obj.get("totalReturnIncept"),
            "exception_count": obj.get("exceptionCount"),
            "benchmark_portfolio_id": obj.get("benchmarkPortfolioId"),
            "benchmark_total_return": obj.get("benchmarkTotalReturn"),
            "benchmark_total_return_mtd": obj.get("benchmarkTotalReturnMtd"),
            "benchmark_total_return_qtd": obj.get("benchmarkTotalReturnQtd"),
            "benchmark_total_return_ytd": obj.get("benchmarkTotalReturnYtd"),
            "benchmark_total_return_incept": obj.get("benchmarkTotalReturnIncept"),
            "admin": obj.get("admin"),
            "active_time": obj.get("activeTime"),
            "admin_approver": obj.get("adminApprover"),
            "pmg_approver": obj.get("pmgApprover"),
            "pmg_approval_time": obj.get("pmgApprovalTime"),
            "total_net_return_management": obj.get("totalNetReturnManagement"),
            "nav_nugget": obj.get("navNugget"),
            "modify_time": obj.get("modifyTime"),
            "total_net_return": obj.get("totalNetReturn"),
            "cash_recon_count": obj.get("cashReconCount"),
            "valuation_currency_code": obj.get("valuationCurrencyCode"),
            "publisher": obj.get("publisher"),
            "modifier": obj.get("modifier"),
            "valuation_price_group": obj.get("valuationPriceGroup"),
            "nav_basis": obj.get("navBasis"),
            "acct_basis": obj.get("acctBasis"),
            "reason": obj.get("reason"),
            "process_code": obj.get("processCode"),
            "restate_comment": obj.get("restateComment")
        })
        return _obj

