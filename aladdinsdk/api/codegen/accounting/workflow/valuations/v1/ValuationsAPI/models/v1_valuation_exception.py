# coding: utf-8

"""
    Valuations

    In an accounting workflow, valuations are generated for various processes at the portfolio/portfolio group level. This service can be used to retrieve and filter for accounting valuations data.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class V1ValuationException(BaseModel):
    """
    V1ValuationException
    """
    id: Optional[StrictStr] = None
    exception_comment: Optional[StrictStr] = Field(None, alias="exceptionComment")
    exception_comment_time: Optional[datetime] = Field(None, alias="exceptionCommentTime")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId")
    exception_description: Optional[StrictStr] = Field(None, alias="exceptionDescription")
    accounting_document_reference: Optional[StrictInt] = Field(None, alias="accountingDocumentReference")
    exception_status: Optional[StrictStr] = Field(None, alias="exceptionStatus")
    exception_sub_type: Optional[StrictStr] = Field(None, alias="exceptionSubType")
    exception_type: Optional[StrictStr] = Field(None, alias="exceptionType")
    portfolio_id: Optional[StrictStr] = Field(None, alias="portfolioId")
    latest_comment: Optional[StrictStr] = Field(None, alias="latestComment")
    lot_id: Optional[StrictStr] = Field(None, alias="lotId")
    valuation_id: Optional[StrictStr] = Field(None, alias="valuationId")
    nav_impact: Optional[StrictInt] = Field(None, alias="navImpact")
    exception_priority: Optional[StrictInt] = Field(None, alias="exceptionPriority")
    security_group: Optional[StrictStr] = Field(None, alias="securityGroup", description="Describes ways to classify a security, identifies if a security is an Equity or a Bond or a Future etc.")
    security_type: Optional[StrictStr] = Field(None, alias="securityType", description="Describes ways to classify a security, identifies if a security is GOVT or CORP etc.")
    source: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    modifier: Optional[StrictStr] = None
    status_time: Optional[datetime] = Field(None, alias="statusTime")
    valuation_date: Optional[date] = Field(None, alias="valuationDate")
    __properties = ["id", "exceptionComment", "exceptionCommentTime", "assetId", "exceptionDescription", "accountingDocumentReference", "exceptionStatus", "exceptionSubType", "exceptionType", "portfolioId", "latestComment", "lotId", "valuationId", "navImpact", "exceptionPriority", "securityGroup", "securityType", "source", "status", "modifier", "statusTime", "valuationDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ValuationException:
        """Create an instance of V1ValuationException from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ValuationException:
        """Create an instance of V1ValuationException from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ValuationException.parse_obj(obj)

        _obj = V1ValuationException.parse_obj({
            "id": obj.get("id"),
            "exception_comment": obj.get("exceptionComment"),
            "exception_comment_time": obj.get("exceptionCommentTime"),
            "asset_id": obj.get("assetId"),
            "exception_description": obj.get("exceptionDescription"),
            "accounting_document_reference": obj.get("accountingDocumentReference"),
            "exception_status": obj.get("exceptionStatus"),
            "exception_sub_type": obj.get("exceptionSubType"),
            "exception_type": obj.get("exceptionType"),
            "portfolio_id": obj.get("portfolioId"),
            "latest_comment": obj.get("latestComment"),
            "lot_id": obj.get("lotId"),
            "valuation_id": obj.get("valuationId"),
            "nav_impact": obj.get("navImpact"),
            "exception_priority": obj.get("exceptionPriority"),
            "security_group": obj.get("securityGroup"),
            "security_type": obj.get("securityType"),
            "source": obj.get("source"),
            "status": obj.get("status"),
            "modifier": obj.get("modifier"),
            "status_time": obj.get("statusTime"),
            "valuation_date": obj.get("valuationDate")
        })
        return _obj

