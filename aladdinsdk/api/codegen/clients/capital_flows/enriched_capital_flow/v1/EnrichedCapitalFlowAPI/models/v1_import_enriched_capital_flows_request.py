# coding: utf-8

"""
    Capital Flows 1.0.0

    Capital flows are the cash and asset subscriptions coming into a fund and the cash and asset redemptions going out of a fund (e.g., client contributions, withdrawals, and initial funding for a portfolio). This API permits users to validate, create, update, and receive capital flows transactions and their details. User needs standard API permissison ALADDIN_API_USER to use the Capital Flows API and standard newcash permissions to perform different actions. Please refer to the Capital Flows User Guide on the client landing page for more information on newcash permission structure.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from aladdinsdk.api.codegen.clients.capital_flows.enriched_capital_flow.v1.EnrichedCapitalFlowAPI.models.v1_enriched_capital_flow import V1EnrichedCapitalFlow

class V1ImportEnrichedCapitalFlowsRequest(BaseModel):
    """
    V1ImportEnrichedCapitalFlowsRequest
    """
    enriched_capital_flows: conlist(V1EnrichedCapitalFlow) = Field(..., alias="enrichedCapitalFlows", description="Id and primaryExternalId are not mandatory fields when creating new capital flows transactions. If neither field is included in the request, Aladdin will create a new capital flows transaction and generate and return an Id in the response. Here are a few example scenarios:  (1) If the Id field is present in the request and the value matches an existing Id, then the existing capital flows transaction is updated. If the Id value does not match an existing record in the database, then a restriction is returned in the response  (2) If the Id field is not present in the request, then a new capital flow is created and its Id is auto-generated and returned in the response  (3) If the primaryExternalId field is present in the request and the value matches an existing primaryExternalId, then the existing capital flows transaction record is updated. If the primaryExternalId value does not match an existing record in the database, then a new capital flow will be created with the given primaryExternalId value and a new Id is auto-generated and returned in the response")
    manual_state_cycle: Optional[StrictBool] = Field(None, alias="manualStateCycle", description="Represents manual state cycle. This enables the API to respect the capital flows transaction status present in the request rather than defaulting to the standard capital flow lifecycle status. This optional flag is useful for systems that need to create capital flows transactions in an authorized or confirmed status, or update transactions to cancelled status in single step. By default, this value is \"False\", which results in creating transactions in an open status. Setting this value to \"True\" allows users flexibility to create transactions in either authorized or confirmed status, with authorizerUserId or approverUserId provided respectively; or update transactions to cancelled status in single step, with cancelRequestor and cancelApprover provided.")
    __properties = ["enrichedCapitalFlows", "manualStateCycle"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ImportEnrichedCapitalFlowsRequest:
        """Create an instance of V1ImportEnrichedCapitalFlowsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in enriched_capital_flows (list)
        _items = []
        if self.enriched_capital_flows:
            for _item in self.enriched_capital_flows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['enrichedCapitalFlows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ImportEnrichedCapitalFlowsRequest:
        """Create an instance of V1ImportEnrichedCapitalFlowsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ImportEnrichedCapitalFlowsRequest.parse_obj(obj)

        _obj = V1ImportEnrichedCapitalFlowsRequest.parse_obj({
            "enriched_capital_flows": [V1EnrichedCapitalFlow.from_dict(_item) for _item in obj.get("enrichedCapitalFlows")] if obj.get("enrichedCapitalFlows") is not None else None,
            "manual_state_cycle": obj.get("manualStateCycle")
        })
        return _obj

