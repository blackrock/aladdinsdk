# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.enums_order_reservation_status import EnumsOrderReservationStatus
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.enums_order_reservation_type import EnumsOrderReservationType
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.v1_order_reservation_id import V1OrderReservationID

class V1OrderReservation(BaseModel):
    """
    V1OrderReservation
    """
    order_reservation_id: Optional[V1OrderReservationID] = Field(None, alias="orderReservationId")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    order_reservation_status: Optional[EnumsOrderReservationStatus] = Field(None, alias="orderReservationStatus")
    order_reservation_type: Optional[EnumsOrderReservationType] = Field(None, alias="orderReservationType")
    status_message: Optional[StrictStr] = Field(None, alias="statusMessage")
    approval_id: Optional[StrictStr] = Field(None, alias="approvalId")
    requestor: Optional[StrictStr] = None
    requested_time: Optional[datetime] = Field(None, alias="requestedTime")
    modifier: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    expiry_time: Optional[datetime] = Field(None, alias="expiryTime")
    trading_fcm: Optional[StrictInt] = Field(None, alias="tradingFcm")
    revision: Optional[StrictInt] = None
    order_reservation_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="orderReservationRate")
    __properties = ["orderReservationId", "quantity", "orderReservationStatus", "orderReservationType", "statusMessage", "approvalId", "requestor", "requestedTime", "modifier", "modifyTime", "expiryTime", "tradingFcm", "revision", "orderReservationRate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1OrderReservation:
        """Create an instance of V1OrderReservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "status_message",
                            "modify_time",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of order_reservation_id
        if self.order_reservation_id:
            _dict['orderReservationId'] = self.order_reservation_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1OrderReservation:
        """Create an instance of V1OrderReservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1OrderReservation.parse_obj(obj)

        _obj = V1OrderReservation.parse_obj({
            "order_reservation_id": V1OrderReservationID.from_dict(obj.get("orderReservationId")) if obj.get("orderReservationId") is not None else None,
            "quantity": obj.get("quantity"),
            "order_reservation_status": obj.get("orderReservationStatus"),
            "order_reservation_type": obj.get("orderReservationType"),
            "status_message": obj.get("statusMessage"),
            "approval_id": obj.get("approvalId"),
            "requestor": obj.get("requestor"),
            "requested_time": obj.get("requestedTime"),
            "modifier": obj.get("modifier"),
            "modify_time": obj.get("modifyTime"),
            "expiry_time": obj.get("expiryTime"),
            "trading_fcm": obj.get("tradingFcm"),
            "revision": obj.get("revision"),
            "order_reservation_rate": obj.get("orderReservationRate")
        })
        return _obj

