# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.v1_cancel_external_order_reference import V1CancelExternalOrderReference
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.v1_order_comment import V1OrderComment

class V1CancelOrderRequest(BaseModel):
    """
    V1CancelOrderRequest
    """
    order_id: Optional[StrictStr] = Field(None, alias="orderId")
    external_reference: Optional[V1CancelExternalOrderReference] = Field(None, alias="externalReference")
    order_comments: Optional[conlist(V1OrderComment)] = Field(None, alias="orderComments")
    __properties = ["orderId", "externalReference", "orderComments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CancelOrderRequest:
        """Create an instance of V1CancelOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of external_reference
        if self.external_reference:
            _dict['externalReference'] = self.external_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_comments (list)
        _items = []
        if self.order_comments:
            for _item in self.order_comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderComments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CancelOrderRequest:
        """Create an instance of V1CancelOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CancelOrderRequest.parse_obj(obj)

        _obj = V1CancelOrderRequest.parse_obj({
            "order_id": obj.get("orderId"),
            "external_reference": V1CancelExternalOrderReference.from_dict(obj.get("externalReference")) if obj.get("externalReference") is not None else None,
            "order_comments": [V1OrderComment.from_dict(_item) for _item in obj.get("orderComments")] if obj.get("orderComments") is not None else None
        })
        return _obj

