# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class V1ExternalIdsGroup(BaseModel):
    """
    Group containing a list of external system's trade identifiers and the associated Aladdin's account code/ID.
    """
    external_id1s: conlist(StrictStr) = Field(..., alias="externalId1s", description="List of external system's trade identifiers. Maps to Order.external_id1. At least one identifier must be specified. Maximum allowed is 10000.")
    account_code: StrictStr = Field(..., alias="accountCode", description="Aladdin's unique account code/ID for an organization or system (e.g. external broker / counterparty). Also known as \"org_id\" to some legacy systems.")
    __properties = ["externalId1s", "accountCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ExternalIdsGroup:
        """Create an instance of V1ExternalIdsGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ExternalIdsGroup:
        """Create an instance of V1ExternalIdsGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ExternalIdsGroup.parse_obj(obj)

        _obj = V1ExternalIdsGroup.parse_obj({
            "external_id1s": obj.get("externalId1s"),
            "account_code": obj.get("accountCode")
        })
        return _obj

