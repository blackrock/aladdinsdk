# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.enums_compliance_severity import EnumsComplianceSeverity
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.v1_violation_contribution import V1ViolationContribution

class V1Violation(BaseModel):
    """
    Violation describes the intraday and overnight violation generated at time of the compliance breach...
    """
    id: Optional[StrictStr] = Field(None, description="unique Violation Id.")
    violation_date: Optional[date] = Field(None, alias="violationDate", description="The date when this violation occurred.")
    portfolio_id: Optional[StrictStr] = Field(None, alias="portfolioId", description="Aladdin unique numeric portfolio id, e.g. -1123.")
    rule_assignment_name: Optional[StrictStr] = Field(None, alias="ruleAssignmentName", description="Name given to a mapping (assignment) between a compliance rule and a portfolio in Aladdin.")
    rule_id: Optional[StrictStr] = Field(None, alias="ruleId", description="A unique name for a rule which is violated.")
    compliance_severity: Optional[EnumsComplianceSeverity] = Field(None, alias="complianceSeverity")
    offender: Optional[StrictStr] = Field(None, description="The offender of the violation, e.g. the Issuer, Security, Country or Currency etcetera that is in violation of the rule.")
    violation_detail: Optional[StrictStr] = Field(None, alias="violationDetail", description="The detail of a violation. This will include any transactions or positions that are part of the violation.")
    violation_disposition: Optional[StrictStr] = Field(None, alias="violationDisposition", description="The current  disposition of the violation. This will be populated for closed violations and include values such as Approved, Rejected, Manual etc.")
    violation_owner: Optional[StrictStr] = Field(None, alias="violationOwner", description="The current team or group who owns the next step in resolving this violation.")
    action_status: StrictStr = Field(..., alias="actionStatus", description="The current action status of the violation. This will be populated with values such as Closed, Action Required, Action Taken.")
    resolution_comment: Optional[StrictStr] = Field(None, alias="resolutionComment", description="The current resolution comment for the violation which has been populated by a user.")
    violation_contributions: Optional[conlist(V1ViolationContribution)] = Field(None, alias="violationContributions", description="One or more allocations which contributed to the violation. Each violation is caused by one or more underlying positions.")
    creation_time: Optional[datetime] = Field(None, alias="creationTime", description="This records the latest timestamp when the item is entered or updated.")
    modifier: Optional[StrictStr] = Field(None, description="The user who last modified the violation.")
    last_modified_time: Optional[datetime] = Field(None, alias="lastModifiedTime")
    violation_description: Optional[StrictStr] = Field(None, alias="violationDescription", description="The description of the violation.")
    __properties = ["id", "violationDate", "portfolioId", "ruleAssignmentName", "ruleId", "complianceSeverity", "offender", "violationDetail", "violationDisposition", "violationOwner", "actionStatus", "resolutionComment", "violationContributions", "creationTime", "modifier", "lastModifiedTime", "violationDescription"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Violation:
        """Create an instance of V1Violation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in violation_contributions (list)
        _items = []
        if self.violation_contributions:
            for _item in self.violation_contributions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['violationContributions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Violation:
        """Create an instance of V1Violation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Violation.parse_obj(obj)

        _obj = V1Violation.parse_obj({
            "id": obj.get("id"),
            "violation_date": obj.get("violationDate"),
            "portfolio_id": obj.get("portfolioId"),
            "rule_assignment_name": obj.get("ruleAssignmentName"),
            "rule_id": obj.get("ruleId"),
            "compliance_severity": obj.get("complianceSeverity"),
            "offender": obj.get("offender"),
            "violation_detail": obj.get("violationDetail"),
            "violation_disposition": obj.get("violationDisposition"),
            "violation_owner": obj.get("violationOwner"),
            "action_status": obj.get("actionStatus"),
            "resolution_comment": obj.get("resolutionComment"),
            "violation_contributions": [V1ViolationContribution.from_dict(_item) for _item in obj.get("violationContributions")] if obj.get("violationContributions") is not None else None,
            "creation_time": obj.get("creationTime"),
            "modifier": obj.get("modifier"),
            "last_modified_time": obj.get("lastModifiedTime"),
            "violation_description": obj.get("violationDescription")
        })
        return _obj

