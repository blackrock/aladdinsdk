# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.v1_external_ids_group import V1ExternalIdsGroup

class V1ExternalIdListCriterion(BaseModel):
    """
    V1ExternalIdListCriterion
    """
    external_ids_groups: conlist(V1ExternalIdsGroup) = Field(..., alias="externalIdsGroups", description="External system's trade identifier groups. Maps to Order.external_id1. The combined maximum number of external identifiers allowed is 10000.")
    __properties = ["externalIdsGroups"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ExternalIdListCriterion:
        """Create an instance of V1ExternalIdListCriterion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in external_ids_groups (list)
        _items = []
        if self.external_ids_groups:
            for _item in self.external_ids_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['externalIdsGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ExternalIdListCriterion:
        """Create an instance of V1ExternalIdListCriterion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ExternalIdListCriterion.parse_obj(obj)

        _obj = V1ExternalIdListCriterion.parse_obj({
            "external_ids_groups": [V1ExternalIdsGroup.from_dict(_item) for _item in obj.get("externalIdsGroups")] if obj.get("externalIdsGroups") is not None else None
        })
        return _obj

