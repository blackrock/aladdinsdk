# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.v1_modified_time_range import V1ModifiedTimeRange

class V1PortfolioModifiedTimeCriterion(BaseModel):
    """
    A criterion used to filter orders by a portoflio and modified date range.
    """
    portfolio_id: StrictStr = Field(..., alias="portfolioId", description="The numerical ID associated with a portfolio. This can be retrieved using the Portfolios API.")
    modified_time_range: Optional[V1ModifiedTimeRange] = Field(None, alias="modifiedTimeRange")
    show_trader_orders: Optional[StrictBool] = Field(None, alias="showTraderOrders")
    __properties = ["portfolioId", "modifiedTimeRange", "showTraderOrders"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PortfolioModifiedTimeCriterion:
        """Create an instance of V1PortfolioModifiedTimeCriterion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of modified_time_range
        if self.modified_time_range:
            _dict['modifiedTimeRange'] = self.modified_time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PortfolioModifiedTimeCriterion:
        """Create an instance of V1PortfolioModifiedTimeCriterion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PortfolioModifiedTimeCriterion.parse_obj(obj)

        _obj = V1PortfolioModifiedTimeCriterion.parse_obj({
            "portfolio_id": obj.get("portfolioId"),
            "modified_time_range": V1ModifiedTimeRange.from_dict(obj.get("modifiedTimeRange")) if obj.get("modifiedTimeRange") is not None else None,
            "show_trader_orders": obj.get("showTraderOrders")
        })
        return _obj

