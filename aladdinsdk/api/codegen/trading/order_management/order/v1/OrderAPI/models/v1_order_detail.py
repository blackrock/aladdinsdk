# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.enums_assigned_to_status import EnumsAssignedToStatus
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.portfolio_portfolio_reference import PortfolioPortfolioReference
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.v1_order_reservation import V1OrderReservation

class V1OrderDetail(BaseModel):
    """
    V1OrderDetail
    """
    order_detail_id: Optional[StrictInt] = Field(None, alias="orderDetailId", description="Unique identifier for the portfolio allocation.")
    original_order_detail_id: Optional[StrictInt] = Field(None, alias="originalOrderDetailId", description="Original order detail ID record before mergers or splits.")
    original_order_number: Optional[StrictInt] = Field(None, alias="originalOrderNumber", description="Original order ID before mergers or splits.")
    version: Optional[StrictInt] = None
    portfolio_reference: Optional[PortfolioPortfolioReference] = Field(None, alias="portfolioReference")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    strategy_id: Optional[StrictInt] = Field(None, alias="strategyId")
    strategy_name: Optional[StrictStr] = Field(None, alias="strategyName")
    quantity_booked: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="quantityBooked")
    modifier: Optional[StrictStr] = None
    modify_time: Optional[datetime] = Field(None, alias="modifyTime")
    request_status: Optional[EnumsAssignedToStatus] = Field(None, alias="requestStatus")
    central_clearing_party: Optional[StrictInt] = Field(None, alias="centralClearingParty")
    reservations: Optional[conlist(V1OrderReservation)] = None
    reference_face: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="referenceFace")
    reference_fill_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="referenceFillAmount")
    external_portfolio_id: Optional[StrictStr] = Field(None, alias="externalPortfolioId", description="External identifier/account for the portfolio of this order detail. This may be used in place of the portfolioReference. Users must also specify the accountCode and externalEntityType in the postOrderConfig when used in order posting.")
    clearing_counterparty_id: Optional[StrictStr] = Field(None, alias="clearingCounterpartyId")
    __properties = ["orderDetailId", "originalOrderDetailId", "originalOrderNumber", "version", "portfolioReference", "quantity", "strategyId", "strategyName", "quantityBooked", "modifier", "modifyTime", "requestStatus", "centralClearingParty", "reservations", "referenceFace", "referenceFillAmount", "externalPortfolioId", "clearingCounterpartyId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1OrderDetail:
        """Create an instance of V1OrderDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "version",
                            "modify_time",
                            "clearing_counterparty_id",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of portfolio_reference
        if self.portfolio_reference:
            _dict['portfolioReference'] = self.portfolio_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reservations (list)
        _items = []
        if self.reservations:
            for _item in self.reservations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reservations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1OrderDetail:
        """Create an instance of V1OrderDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1OrderDetail.parse_obj(obj)

        _obj = V1OrderDetail.parse_obj({
            "order_detail_id": obj.get("orderDetailId"),
            "original_order_detail_id": obj.get("originalOrderDetailId"),
            "original_order_number": obj.get("originalOrderNumber"),
            "version": obj.get("version"),
            "portfolio_reference": PortfolioPortfolioReference.from_dict(obj.get("portfolioReference")) if obj.get("portfolioReference") is not None else None,
            "quantity": obj.get("quantity"),
            "strategy_id": obj.get("strategyId"),
            "strategy_name": obj.get("strategyName"),
            "quantity_booked": obj.get("quantityBooked"),
            "modifier": obj.get("modifier"),
            "modify_time": obj.get("modifyTime"),
            "request_status": obj.get("requestStatus"),
            "central_clearing_party": obj.get("centralClearingParty"),
            "reservations": [V1OrderReservation.from_dict(_item) for _item in obj.get("reservations")] if obj.get("reservations") is not None else None,
            "reference_face": obj.get("referenceFace"),
            "reference_fill_amount": obj.get("referenceFillAmount"),
            "external_portfolio_id": obj.get("externalPortfolioId"),
            "clearing_counterparty_id": obj.get("clearingCounterpartyId")
        })
        return _obj

