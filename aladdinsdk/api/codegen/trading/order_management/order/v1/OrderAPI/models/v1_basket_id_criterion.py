# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from aladdinsdk.api.codegen.trading.order_management.order.v1.OrderAPI.models.v1_portfolio_and_order_status_filter_option import V1PortfolioAndOrderStatusFilterOption

class V1BasketIdCriterion(BaseModel):
    """
    A criterion to filter orders by basket IDs. Users must input at least one Basket ID, along with either an order date or the portfolio/status option, but not both. Users should be aware that an order basket can spread across multiple portfolios, only the orders for the specified portfolio IDs will be returned when using the portfolio ID parameter.
    """
    basket_ids: conlist(StrictStr) = Field(..., alias="basketIds", description="Basket IDs associated with the orders. This is a required field and at least one non-empty basket ID should be specified.")
    show_trader_orders: Optional[StrictBool] = Field(None, alias="showTraderOrders")
    port_status_option: Optional[V1PortfolioAndOrderStatusFilterOption] = Field(None, alias="portStatusOption")
    order_date: Optional[date] = Field(None, alias="orderDate")
    __properties = ["basketIds", "showTraderOrders", "portStatusOption", "orderDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BasketIdCriterion:
        """Create an instance of V1BasketIdCriterion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of port_status_option
        if self.port_status_option:
            _dict['portStatusOption'] = self.port_status_option.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BasketIdCriterion:
        """Create an instance of V1BasketIdCriterion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BasketIdCriterion.parse_obj(obj)

        _obj = V1BasketIdCriterion.parse_obj({
            "basket_ids": obj.get("basketIds"),
            "show_trader_orders": obj.get("showTraderOrders"),
            "port_status_option": V1PortfolioAndOrderStatusFilterOption.from_dict(obj.get("portStatusOption")) if obj.get("portStatusOption") is not None else None,
            "order_date": obj.get("orderDate")
        })
        return _obj

