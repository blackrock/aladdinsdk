# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class V1PortfolioAndOrderStatusFilterOption(BaseModel):
    """
    Option to filter order by specifying the portfolio and order status.
    """
    portfolio_ids: conlist(StrictStr) = Field(..., alias="portfolioIds", description="The numerical ID associated with a portfolio. This can be retrieved using the Portfolios API. At least one portfolio must be specified. The maximum allowed is 20.")
    order_statuses: Optional[conlist(StrictStr)] = Field(None, alias="orderStatuses", description="Specify a list of Aladdin order statuses to filter orders by. Note only live order statuses are currently supported: “Open”, “Compl Pending”, “Authorized”, and “Active”. If no status is specified, all live orders will be included in the response. Both CDE and DECDE values are accepted as well. Please reference the Aladdin Decode table ‘ORDER_STATUS’ for the list of all order statuses (live and completed) in Aladdin.")
    __properties = ["portfolioIds", "orderStatuses"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PortfolioAndOrderStatusFilterOption:
        """Create an instance of V1PortfolioAndOrderStatusFilterOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PortfolioAndOrderStatusFilterOption:
        """Create an instance of V1PortfolioAndOrderStatusFilterOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PortfolioAndOrderStatusFilterOption.parse_obj(obj)

        _obj = V1PortfolioAndOrderStatusFilterOption.parse_obj({
            "portfolio_ids": obj.get("portfolioIds"),
            "order_statuses": obj.get("orderStatuses")
        })
        return _obj

