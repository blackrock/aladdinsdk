# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class V1TimeRangeParameter(BaseModel):
    """
    A date, hour, and minute used as a query parameter when filtering orders by modified time.  The timezone used will be the default aladdin timezone on the server.
    """
    filter_date: date = Field(..., alias="filterDate", description="The date to filter by.")
    hour: Optional[StrictInt] = Field(None, description="The hour to filter by, 0 - 23 inclusive.  When omitted, the default value is 0.")
    minute: Optional[StrictInt] = Field(None, description="The minute to filter by, 0 - 59 inclusive.  When omitted, the default value is 0.")
    __properties = ["filterDate", "hour", "minute"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TimeRangeParameter:
        """Create an instance of V1TimeRangeParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TimeRangeParameter:
        """Create an instance of V1TimeRangeParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TimeRangeParameter.parse_obj(obj)

        _obj = V1TimeRangeParameter.parse_obj({
            "filter_date": obj.get("filterDate"),
            "hour": obj.get("hour"),
            "minute": obj.get("minute")
        })
        return _obj

