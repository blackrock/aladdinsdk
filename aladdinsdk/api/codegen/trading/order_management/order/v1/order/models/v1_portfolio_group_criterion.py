# coding: utf-8

"""
    Order

    Filter, post or cancel orders. An order is a directive from a portfolio manager to the trading desk to execute a particular investment decision.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class V1PortfolioGroupCriterion(BaseModel):
    """
    A criterion to filter live orders by portfolio / portfolio groups, and optionally by order statuses and asset IDs Please note that orders not in a live status or older than 365 days, will not be returned.
    """
    portfolio_group_ticker: StrictStr = Field(..., alias="portfolioGroupTicker", description="The portfolio (fund) or portfolio group ticker to filter by. If a portfolio group is specified, the maximum number of expanded portfolios allowed is 5000. An error will be returned if this limit is exceeded. This is a required field.")
    order_statuses: Optional[conlist(StrictStr)] = Field(None, alias="orderStatuses", description="Specify a list of Aladdin order statuses to filter orders by. Note only live order statuses are currently supported: \"Open\", \"Compl Pending\", \"Authorized\", and \"Active\". If no status is specified, all live orders will be included in the response. Both CDE and DECDE values are accepted as well. Please reference the Aladdin Decode table 'ORDER_STATUS' for the list of all order statuses (live and completed) in Aladdin.")
    asset_ids: Optional[conlist(StrictStr)] = Field(None, alias="assetIds", description="List of asset IDs to query orders for. If not specified, this query will search for all orders raised for any assets matching the portfolios and statuses in this criterion. Empty strings or spaces are ignored.")
    show_trader_orders: Optional[StrictBool] = Field(None, alias="showTraderOrders")
    __properties = ["portfolioGroupTicker", "orderStatuses", "assetIds", "showTraderOrders"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PortfolioGroupCriterion:
        """Create an instance of V1PortfolioGroupCriterion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PortfolioGroupCriterion:
        """Create an instance of V1PortfolioGroupCriterion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PortfolioGroupCriterion.parse_obj(obj)

        _obj = V1PortfolioGroupCriterion.parse_obj({
            "portfolio_group_ticker": obj.get("portfolioGroupTicker"),
            "order_statuses": obj.get("orderStatuses"),
            "asset_ids": obj.get("assetIds"),
            "show_trader_orders": obj.get("showTraderOrders")
        })
        return _obj

