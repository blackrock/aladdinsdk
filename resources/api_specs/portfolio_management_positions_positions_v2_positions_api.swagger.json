{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API to retrieve and monitor managed positions for Start of Day Positions. Managed positions are positions enriched with additional context such as restrictions and substitutions.",
        "title": "Positions",
        "version": "2.0.0",
        "x-aladdin-api-id": "agraph.portfolio_management.positions.positions.PositionsAPI",
        "x-aladdin-api-stability": "alpha",
        "x-aladdin-spec-id": "agraph.portfolio_management.positions.positions.v2.PositionsAPI"
    },
    "basePath": "/api/portfolio-management/positions/positions/v2/",
    "paths": {
        "/positions:filter": {
            "post": {
                "security": [
                    {
                        "APIKeyHeader": [],
                        "OAuth2AccessCode": [
                            "portfolio_management.positions.positions.v2.Positions:read"
                        ]
                    },
                    {
                        "APIKeyHeader": [],
                        "OAuth2ClientCredentials": [
                            "portfolio_management.positions.positions.v2.Positions:read"
                        ]
                    },
                    {
                        "APIKeyHeader": [],
                        "ClientKeyHeader": []
                    },
                    {
                        "APIKeyHeader": [],
                        "basicAuth": []
                    }
                ],
                "description": "Gets positions using a PM Case",
                "summary": "Gets positions",
                "operationId": "PositionsAPI_FilterPositions",
                "parameters": [
                    {
                        "type": "string",
                        "format": "UUID",
                        "description": "A unique identifier for this request.",
                        "name": "VND.com.blackrock.Request-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp assigned to this request at origin, in \"HTTP-date\" format as defined by RFC 7231.",
                        "name": "VND.com.blackrock.Origin-Timestamp",
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2FilterPositionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v2FilterPositionsResponse"
                        }
                    },
                    "400": {
                        "description": "Aladdin® will not process the request due to an apparent client error.",
                        "schema": {
                            "description": "Defines an error that occurred.",
                            "type": "object",
                            "required": [
                                "code",
                                "message"
                            ],
                            "properties": {
                                "code": {
                                    "description": "A short mnemonic reference code for the error.",
                                    "type": "string",
                                    "maxLength": 40
                                },
                                "message": {
                                    "description": "A human readable description of the error.",
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "VND.com.blackrock.Request-ID": {
                                "type": "string",
                                "format": "UUID",
                                "description": "The unique identifier assigned by the client to the request that originated this response."
                            },
                            "VND.com.blackrock.Response-ID": {
                                "type": "string",
                                "format": "UUID",
                                "description": "A Unique Identifier for this response."
                            },
                            "VND.com.blackrock.Response-Timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp assigned to this response, in \"HTTP-date\" format as defined by RFC 7231."
                            }
                        }
                    },
                    "401": {
                        "description": "Aladdin® will not process the request as the necessary credentials were not provided or were invalid.",
                        "schema": {
                            "description": "Defines an error that occurred.",
                            "type": "object",
                            "required": [
                                "code",
                                "message"
                            ],
                            "properties": {
                                "code": {
                                    "description": "A short mnemonic reference code for the error.",
                                    "type": "string",
                                    "maxLength": 40
                                },
                                "message": {
                                    "description": "A human readable description of the error.",
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "VND.com.blackrock.Request-ID": {
                                "type": "string",
                                "format": "UUID",
                                "description": "The unique identifier assigned by the client to the request that originated this response."
                            },
                            "VND.com.blackrock.Response-ID": {
                                "type": "string",
                                "format": "UUID",
                                "description": "A Unique Identifier for this response."
                            },
                            "VND.com.blackrock.Response-Timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp assigned to this response, in \"HTTP-date\" format as defined by RFC 7231."
                            }
                        }
                    },
                    "403": {
                        "description": "Aladdin® understood the request but is refusing to authorize it.",
                        "schema": {
                            "description": "Defines an error that occurred.",
                            "type": "object",
                            "required": [
                                "code",
                                "message"
                            ],
                            "properties": {
                                "code": {
                                    "description": "A short mnemonic reference code for the error.",
                                    "type": "string",
                                    "maxLength": 40
                                },
                                "message": {
                                    "description": "A human readable description of the error.",
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "VND.com.blackrock.Request-ID": {
                                "type": "string",
                                "format": "UUID",
                                "description": "The unique identifier assigned by the client to the request that originated this response."
                            },
                            "VND.com.blackrock.Response-ID": {
                                "type": "string",
                                "format": "UUID",
                                "description": "A Unique Identifier for this response."
                            },
                            "VND.com.blackrock.Response-Timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp assigned to this response, in \"HTTP-date\" format as defined by RFC 7231."
                            }
                        }
                    },
                    "404": {
                        "description": "Aladdin® did not find the resource requested or is unwilling to disclose if it exists. Could indicate a defect in the client program or data which is no longer accessible.",
                        "schema": {
                            "description": "Defines an error that occurred.",
                            "type": "object",
                            "required": [
                                "code",
                                "message"
                            ],
                            "properties": {
                                "code": {
                                    "description": "A short mnemonic reference code for the error.",
                                    "type": "string",
                                    "maxLength": 40
                                },
                                "message": {
                                    "description": "A human readable description of the error.",
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "VND.com.blackrock.Request-ID": {
                                "type": "string",
                                "format": "UUID",
                                "description": "The unique identifier assigned by the client to the request that originated this response."
                            },
                            "VND.com.blackrock.Response-ID": {
                                "type": "string",
                                "format": "UUID",
                                "description": "A Unique Identifier for this response."
                            },
                            "VND.com.blackrock.Response-Timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp assigned to this response, in \"HTTP-date\" format as defined by RFC 7231."
                            }
                        }
                    }
                },
                "x-access-type": "READ",
                "x-quota-limit": 200
            }
        }
    },
    "definitions": {
        "Any": {
            "description": "`Any` contains an arbitrary serialized message along with a\nURL that describes the type of the serialized message",
            "type": "object",
            "properties": {
                "@type": {
                    "description": "A URL/resource name that uniquely identifies the type of the serialized message.",
                    "type": "string"
                }
            }
        },
        "rpcStatus": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Any"
                    }
                }
            }
        },
        "tablev1NullValue": {
            "description": "- NULL_VALUE: (-- api-linter: core::0126::unspecified=disabled\naip.dev/not-precedent: We need to do this because not necessary --)\nSet if value described is null",
            "type": "string",
            "title": "NullValue is a singleton enumeration to represent the null value",
            "default": "NULL_VALUE",
            "enum": [
                "NULL_VALUE"
            ]
        },
        "typeMoney": {
            "description": "Represents an amount of money with its currency type.",
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The three-letter currency code defined in ISO 4217.",
                    "type": "string"
                },
                "units": {
                    "description": "The whole units of the amount.\nFor example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
                    "type": "string",
                    "format": "int64"
                },
                "nanos": {
                    "description": "Number of nano (10^-9) units of the amount.\nThe value must be between -999,999,999 and +999,999,999 inclusive.\nIf `units` is positive, `nanos` must be positive or zero.\nIf `units` is zero, `nanos` can be positive, zero, or negative.\nIf `units` is negative, `nanos` must be negative or zero.\nFor example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "typesPortfolioAsOfStats": {
            "description": "Portfolio stats for the positions api, for now only contains timestamp info.",
            "type": "object",
            "properties": {
                "portfolioName": {
                    "type": "string",
                    "title": "The portfolio name associated with the stats"
                },
                "portfolioDiscoveryTime": {
                    "description": "The latest as of time of the portfolio.",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "v1AggregateMeasure": {
            "type": "object",
            "title": "Aggregate measure",
            "required": [
                "aggregateAttributeId"
            ],
            "properties": {
                "aggregateType": {
                    "title": "Aggregation type",
                    "$ref": "#/definitions/v1AggregateType"
                },
                "aggregateAttributeId": {
                    "type": "string",
                    "title": "Aggregate attribute",
                    "required": [
                        "aggregate_attribute_id"
                    ]
                }
            }
        },
        "v1AggregateType": {
            "description": "- AGGREGATE_TYPE_UNSPECIFIED: Aggregation type not specified\n - AGGREGATE_TYPE_SUM: Aggregation type sum\n - AGGREGATE_TYPE_COUNT: Aggregation type count\n - AGGREGATE_TYPE_MIN: Aggregation type min\n - AGGREGATE_TYPE_MAX: Aggregation type max\n - AGGREGATE_TYPE_AVG: Aggregation type avg\n - AGGREGATE_TYPE_MEAN: Aggregation type mean\n - AGGREGATE_TYPE_STD_DEV: Aggregation type standard deviation\n - AGGREGATE_TYPE_PERCENTILE_90: Aggregation type percentile",
            "type": "string",
            "title": "Aggregation types",
            "default": "AGGREGATE_TYPE_UNSPECIFIED",
            "enum": [
                "AGGREGATE_TYPE_UNSPECIFIED",
                "AGGREGATE_TYPE_SUM",
                "AGGREGATE_TYPE_COUNT",
                "AGGREGATE_TYPE_MIN",
                "AGGREGATE_TYPE_MAX",
                "AGGREGATE_TYPE_AVG",
                "AGGREGATE_TYPE_MEAN",
                "AGGREGATE_TYPE_STD_DEV",
                "AGGREGATE_TYPE_PERCENTILE_90"
            ]
        },
        "v1AggregationDefinition": {
            "type": "object",
            "title": "Aggregation definition\n(-- api-linter: core::0123::resource-annotation=disabled\n aip.dev/not-precedent: We need to do this because it is not resource --)",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "title": "Aggregation definition id",
                    "required": [
                        "id"
                    ]
                },
                "aggregateMeasures": {
                    "type": "array",
                    "title": "Aggregation measure",
                    "items": {
                        "$ref": "#/definitions/v1AggregateMeasure"
                    }
                },
                "groupByAttributeIds": {
                    "type": "array",
                    "title": "Group by attributes\n(-- api-linter: core::0140::prepositions=disabled\n aip.dev/not-precedent: We need to do this because it is more specific --)",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1AssertOperator": {
            "description": "- ASSERT_OPERATOR_UNSPECIFIED: Operator not specified\n - ASSERT_OPERATOR_EQ: Operator equals\n - ASSERT_OPERATOR_NEQ: Operator not equals\n - ASSERT_OPERATOR_GT: Operator greater than\n - ASSERT_OPERATOR_GTEQ: Operator greater than or equals\n - ASSERT_OPERATOR_LT: Operator less than\n - ASSERT_OPERATOR_LTEQ: Operator less than or equals\n - ASSERT_OPERATOR_IN_RANGE: Operator in range\n - ASSERT_OPERATOR_CONTAINS: Operator contains\n - ASSERT_OPERATOR_NOT_CONTAINS: Operator not contains\n - ASSERT_OPERATOR_STARTS_WITH: Operator starts with\n - ASSERT_OPERATOR_ENDS_WITH: Operator ends with\n - ASSERT_OPERATOR_IN: Operator in",
            "type": "string",
            "title": "Assert operators",
            "default": "ASSERT_OPERATOR_UNSPECIFIED",
            "enum": [
                "ASSERT_OPERATOR_UNSPECIFIED",
                "ASSERT_OPERATOR_EQ",
                "ASSERT_OPERATOR_NEQ",
                "ASSERT_OPERATOR_GT",
                "ASSERT_OPERATOR_GTEQ",
                "ASSERT_OPERATOR_LT",
                "ASSERT_OPERATOR_LTEQ",
                "ASSERT_OPERATOR_IN_RANGE",
                "ASSERT_OPERATOR_CONTAINS",
                "ASSERT_OPERATOR_NOT_CONTAINS",
                "ASSERT_OPERATOR_STARTS_WITH",
                "ASSERT_OPERATOR_ENDS_WITH",
                "ASSERT_OPERATOR_IN"
            ]
        },
        "v1BooleanOperator": {
            "description": "- BOOLEAN_OPERATOR_UNSPECIFIED: Operator not specified\n - BOOLEAN_OPERATOR_NOT: Operator not\n - BOOLEAN_OPERATOR_AND: Operator and\n - BOOLEAN_OPERATOR_OR: Operator or",
            "type": "string",
            "title": "Boolean operators",
            "default": "BOOLEAN_OPERATOR_UNSPECIFIED",
            "enum": [
                "BOOLEAN_OPERATOR_UNSPECIFIED",
                "BOOLEAN_OPERATOR_NOT",
                "BOOLEAN_OPERATOR_AND",
                "BOOLEAN_OPERATOR_OR"
            ]
        },
        "v1ColumnHeader": {
            "type": "object",
            "title": "ColumnHeader contains metadata for each column in the table",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "Column name"
                },
                "dataType": {
                    "title": "Column data type\n(-- api-linter: aladdin::0901::dictionary-message-field=disabled\n aip.dev/not-precedent: We need to do this because data_type is needed to specify column data type --)",
                    "$ref": "#/definitions/v1DataType"
                }
            }
        },
        "v1DataFilter": {
            "type": "object",
            "title": "DataFilter type (single / tree)",
            "properties": {
                "singleDataFilter": {
                    "title": "Single data filter",
                    "$ref": "#/definitions/v1SingleDataFilter"
                },
                "dataFilterTree": {
                    "title": "data filter tree",
                    "$ref": "#/definitions/v1DataFilterTree"
                }
            }
        },
        "v1DataFilterTree": {
            "type": "object",
            "title": "A filter to constrain the data in a ViewDefinition; either an assertion (simple), or boolean (tree, for compound filters)",
            "properties": {
                "booleanOperator": {
                    "title": "Boolean operator (AND, OR)",
                    "$ref": "#/definitions/v1BooleanOperator"
                },
                "dataFilters": {
                    "type": "array",
                    "title": "Data filter with filed and operator",
                    "items": {
                        "$ref": "#/definitions/v1DataFilter"
                    }
                }
            }
        },
        "v1DataRow": {
            "type": "object",
            "title": "DataRow represents a row of data",
            "properties": {
                "dataValues": {
                    "type": "array",
                    "title": "The repeated collection of data point values",
                    "items": {
                        "$ref": "#/definitions/v1DataValue"
                    }
                }
            }
        },
        "v1DataTable": {
            "type": "object",
            "title": "Represents record set containing data ids, data types and data values",
            "required": [
                "dataRows"
            ],
            "properties": {
                "columnHeaders": {
                    "type": "array",
                    "title": "Optional field containing column names",
                    "items": {
                        "$ref": "#/definitions/v1ColumnHeader"
                    }
                },
                "dataRows": {
                    "type": "array",
                    "title": "Data values corresponding to data_ids",
                    "required": [
                        "data_rows"
                    ],
                    "items": {
                        "$ref": "#/definitions/v1DataRow"
                    }
                }
            }
        },
        "v1DataType": {
            "description": "- DATA_TYPE_UNSPECIFIED: data type not specified\n - DATA_TYPE_NUMERIC: data type numeric\n - DATA_TYPE_STRING: data type string\n - DATA_TYPE_DATE: data type date\n - DATA_TYPE_DECIMAL: data type decimal\n - DATA_TYPE_TIMESTAMP: data type timestamp\n - DATA_TYPE_BOOLEAN: data type boolean\n - DATA_TYPE_DECIMAL64: data type decimal64\n - DATA_TYPE_MONEY: data type money",
            "type": "string",
            "title": "DataType specifying the column data types",
            "default": "DATA_TYPE_UNSPECIFIED",
            "enum": [
                "DATA_TYPE_UNSPECIFIED",
                "DATA_TYPE_NUMERIC",
                "DATA_TYPE_STRING",
                "DATA_TYPE_DATE",
                "DATA_TYPE_DECIMAL",
                "DATA_TYPE_TIMESTAMP",
                "DATA_TYPE_BOOLEAN",
                "DATA_TYPE_DECIMAL64",
                "DATA_TYPE_MONEY"
            ]
        },
        "v1DataValue": {
            "type": "object",
            "title": "AnalyticsDeliveryDataValue represents a dynamically typed value\n(-- api-linter: aladdin::0901::prefix-required-field=disabled\n aip.dev/not-precedent: We need to do this because these are just generic types --)",
            "properties": {
                "nullValue": {
                    "title": "For use when the value is null",
                    "$ref": "#/definitions/tablev1NullValue"
                },
                "numericValue": {
                    "type": "string",
                    "format": "int64",
                    "title": "For use when the value is numeric"
                },
                "stringValue": {
                    "type": "string",
                    "title": "For use when the value is a string"
                },
                "dateValue": {
                    "type": "string",
                    "format": "date",
                    "title": "For use when the value is a date\n(-- api-linter: core::0142::time-field-names=disabled\n aip.dev/not-precedent: We need to do this because the field represents a typed value --)"
                },
                "decimalValue": {
                    "type": "number",
                    "format": "double",
                    "title": "For use when the value is a decimal"
                },
                "timeValue": {
                    "type": "string",
                    "format": "date-time",
                    "title": "For use when the value is a datetime\n(-- api-linter: core::0142::time-field-names=disabled\n aip.dev/not-precedent: We need to do this because the field represents a typed value --)"
                },
                "booleanValue": {
                    "type": "boolean",
                    "title": "For use when the value is a boolean"
                },
                "decimal64Value": {
                    "title": "For use when the value is a big decimal",
                    "$ref": "#/definitions/v1Decimal64"
                },
                "moneyValue": {
                    "title": "For use when the value is money",
                    "$ref": "#/definitions/typeMoney"
                }
            }
        },
        "v1DateMode": {
            "description": "- DATE_MODE_UNSPECIFIED: Date mode not specified",
            "type": "string",
            "title": "Date mode\n(-- aip.dev/beta-blocker: Convert well-known parameters into explicit fields before the Beta launch. --)",
            "default": "DATE_MODE_UNSPECIFIED",
            "enum": [
                "DATE_MODE_UNSPECIFIED"
            ]
        },
        "v1DateSettings": {
            "type": "object",
            "title": "Date settings",
            "properties": {
                "calendarDate": {
                    "type": "string",
                    "format": "date",
                    "title": "Calendar Date An ISO date field where the User can specify a today’s date (T) in their time zone to determine EOD/SOD date\nDate with timestamp"
                },
                "positionDate": {
                    "title": "Position date\n(-- api-linter: core::0142::time-field-type=disabled\n aip.dev/not-precedent: We need to do this because it is relative date from some day --)\nPosition Date The as-of date when the positions were held. This is start of day by default",
                    "$ref": "#/definitions/v1RelativeDate"
                },
                "tradeDate": {
                    "title": "Trade date\n(-- api-linter: core::0142::time-field-type=disabled\n aip.dev/not-precedent: We need to do this because it is relative date from some day --)",
                    "$ref": "#/definitions/v1RelativeDate"
                },
                "holidayCalendar": {
                    "type": "string",
                    "title": "Holiday calendar\nThe Aladdin calendar to override the standard Empty calendar. Valid calendar names can be retrieved by making a Decodes API request to the MKT_CALENDARS"
                },
                "dateMode": {
                    "title": "Date mode\n(-- api-linter: aladdin::0901::prefix-required-field=disabled\n aip.dev/not-precedent: We need to do this because it is the kind of date --)",
                    "$ref": "#/definitions/v1DateMode"
                },
                "settleDate": {
                    "title": "Settle date\n(-- api-linter: core::0142::time-field-type=disabled\n aip.dev/not-precedent: We need to do this because it is relative date from some day --)\n(-- api-linter: aladdin::9027::dictionary-conflicting-types-existing=disabled\n aip.dev/not-precedent: We need to do this because settle_date represents the default date from a specific day like \"+1, -1\" --)",
                    "$ref": "#/definitions/v1RelativeDate"
                }
            }
        },
        "v1Decimal64": {
            "type": "object",
            "title": "Decimal64 represents a decimal value",
            "properties": {
                "mantissa": {
                    "type": "string",
                    "format": "int64",
                    "title": "mantissa field for the decimal (the significant digits)"
                },
                "exponent": {
                    "type": "integer",
                    "format": "int32",
                    "title": "exponent field for the decimal"
                }
            }
        },
        "v1Range": {
            "type": "object",
            "title": "Range of values",
            "properties": {
                "startValue": {
                    "title": "start value in the range",
                    "$ref": "#/definitions/v1DataValue"
                },
                "endValue": {
                    "title": "end value in the range",
                    "$ref": "#/definitions/v1DataValue"
                }
            }
        },
        "v1RelativeDate": {
            "type": "object",
            "title": "Define RelativeDate structure\n(-- aip.dev/beta-blocker: Convert well-known parameters into explicit fields before the Beta launch. --)",
            "properties": {
                "calendarDate": {
                    "type": "string",
                    "format": "date",
                    "title": "From Date"
                },
                "relativeDays": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Relative days to from date\n(-- api-linter: core::0144::message-field-plural=disabled\n aip.dev/not-precedent: We need to do this because it is the number of days from relative date --)"
                }
            }
        },
        "v1SingleDataFilter": {
            "type": "object",
            "title": "Single data filter",
            "required": [
                "attributeId"
            ],
            "properties": {
                "assertOperator": {
                    "title": "Assert operator (\u003c, \u003e, =,...)",
                    "$ref": "#/definitions/v1AssertOperator"
                },
                "attributeId": {
                    "type": "string",
                    "title": "Filter by filed",
                    "required": [
                        "attribute_id"
                    ]
                },
                "dataValue": {
                    "title": "compare the field against value",
                    "$ref": "#/definitions/v1DataValue"
                },
                "dataValueRange": {
                    "title": "Range of values",
                    "$ref": "#/definitions/v1Range"
                }
            }
        },
        "v1Sort": {
            "type": "object",
            "title": "Sort expression",
            "required": [
                "attributeId"
            ],
            "properties": {
                "sortOrder": {
                    "title": "Sort order",
                    "$ref": "#/definitions/v1SortOrder"
                },
                "attributeId": {
                    "type": "string",
                    "title": "Sort by field",
                    "required": [
                        "attribute_id"
                    ]
                }
            }
        },
        "v1SortOrder": {
            "description": "- SORT_ORDER_UNSPECIFIED: Sort order not specified\n - SORT_ORDER_DESC: Sort order desc\n - SORT_ORDER_ASC: Sort order asc",
            "type": "string",
            "title": "Sort order",
            "default": "SORT_ORDER_UNSPECIFIED",
            "enum": [
                "SORT_ORDER_UNSPECIFIED",
                "SORT_ORDER_DESC",
                "SORT_ORDER_ASC"
            ]
        },
        "v1ViewFilter": {
            "type": "object",
            "title": "A filter to constrain the view in a ViewDefinition;",
            "properties": {
                "topN": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Filter by column"
                },
                "bottomN": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Filter by column"
                },
                "sorts": {
                    "type": "array",
                    "title": "Filter by sort expressions",
                    "items": {
                        "$ref": "#/definitions/v1Sort"
                    }
                }
            }
        },
        "v2BenchmarkType": {
            "description": "- BENCHMARK_TYPE_UNSPECIFIED: not specified benchmark\n - BENCHMARK_TYPE_PRIMARY: default type primary benchmark\n - BENCHMARK_TYPE_SECONDARY: secondary benchmark\n - BENCHMARK_TYPE_NONE: benchmark type none",
            "type": "string",
            "title": "Benchmark Type",
            "default": "BENCHMARK_TYPE_UNSPECIFIED",
            "enum": [
                "BENCHMARK_TYPE_UNSPECIFIED",
                "BENCHMARK_TYPE_PRIMARY",
                "BENCHMARK_TYPE_SECONDARY",
                "BENCHMARK_TYPE_NONE"
            ]
        },
        "v2CreditType": {
            "description": "- CREDIT_TYPE_UNSPECIFIED: not specified issuer type - default\n - CREDIT_TYPE_GUARANTOR: credit type guarantor\n - CREDIT_TYPE_UNDERLIER: credit type underlier\n - CREDIT_TYPE_ENHANCER: credit type enhancer",
            "type": "string",
            "title": "Credit type for search",
            "default": "CREDIT_TYPE_UNSPECIFIED",
            "enum": [
                "CREDIT_TYPE_UNSPECIFIED",
                "CREDIT_TYPE_GUARANTOR",
                "CREDIT_TYPE_UNDERLIER",
                "CREDIT_TYPE_ENHANCER"
            ]
        },
        "v2CreditViewSetting": {
            "description": "Credit enhancement data view settings.\nThis is to apply specialized logic for issuer filter for which data filter cannot be used.",
            "type": "object",
            "properties": {
                "creditType": {
                    "title": "provider type",
                    "$ref": "#/definitions/v2CreditType"
                },
                "issuerAttribute": {
                    "title": "issuer field type",
                    "$ref": "#/definitions/v2IssuerAttribute"
                },
                "issuerValues": {
                    "type": "array",
                    "title": "list issuer values for search",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v2DesiredCurrencyType": {
            "description": "- DESIRED_CURRENCY_TYPE_UNSPECIFIED: not specified desired currency type\n - DESIRED_CURRENCY_TYPE_BASE: desired currency base\n - DESIRED_CURRENCY_TYPE_OPERATING: desired currency operating\n - DESIRED_CURRENCY_TYPE_ENTERPRISE: desired currency enterprise",
            "type": "string",
            "title": "Desired Currency type",
            "default": "DESIRED_CURRENCY_TYPE_UNSPECIFIED",
            "enum": [
                "DESIRED_CURRENCY_TYPE_UNSPECIFIED",
                "DESIRED_CURRENCY_TYPE_BASE",
                "DESIRED_CURRENCY_TYPE_OPERATING",
                "DESIRED_CURRENCY_TYPE_ENTERPRISE"
            ]
        },
        "v2FilterPositionsRequest": {
            "description": "The request message for PositionsAPI.FilterPositions.",
            "type": "object",
            "properties": {
                "query": {
                    "title": "The query used to filter against Positions",
                    "$ref": "#/definitions/v2PositionsQuery"
                },
                "pageSize": {
                    "description": "NOTE: NOT AVAILABLE\nThe maximum value is 50,000. If unspecified, the default value is 1,000.",
                    "type": "integer",
                    "format": "int32"
                },
                "pageToken": {
                    "description": "NOTE: NOT AVAILABLE\nA page token, received from a previous 'FilterPositionsRequest' call. Provide this to retrieve the subsequent page.\nProvide this to retrieve the subsequent page.",
                    "type": "string"
                }
            }
        },
        "v2FilterPositionsResponse": {
            "type": "object",
            "title": "FilterPositionsResponse describes a tabular response from the PositionsAPI service\n(-- api-linter: aladdin::9016::response-message=disabled\n aip.dev/not-precedent: We need to do this because the response returns a list of DataRows\n which are included in the data table --)\n(-- api-linter: aladdin::9016::response-message-name=disabled\n aip.dev/not-precedent: We need to do this because the response does not return a \n message specific to the api, a DataTable --)",
            "required": [
                "dataTables"
            ],
            "properties": {
                "dataTables": {
                    "type": "array",
                    "title": "(-- api-linter: aladdin::0901::forbidden-message-field=disabled\n aip.dev/not-precedent: We need to do this because it is data named after underlying data structure --)\nData table list with the positions data for each view request",
                    "required": [
                        "data_tables"
                    ],
                    "items": {
                        "$ref": "#/definitions/v1DataTable"
                    }
                },
                "positionWarnings": {
                    "type": "object",
                    "title": "Optional warnings consolidated across all the view requests from position filter",
                    "additionalProperties": {
                        "$ref": "#/definitions/v2PortfolioPositionWarnings"
                    }
                },
                "nextPageToken": {
                    "type": "string",
                    "title": "Next page token for pagination"
                },
                "portfolioStats": {
                    "type": "object",
                    "title": "Optional map field for portfolio and its stats. key: portfolio name, value: portfolio stats info",
                    "additionalProperties": {
                        "$ref": "#/definitions/typesPortfolioAsOfStats"
                    }
                }
            }
        },
        "v2FundNavType": {
            "description": "- FUND_NAV_TYPE_UNSPECIFIED: not specified fund nav type\n - FUND_NAV_TYPE_GP_NAV: GP nav\n - FUND_NAV_TYPE_GP_NAV_WITH_NEWCASH: GP nav with new cash\n - FUND_NAV_TYPE_TOTAL_MV_AS_NAV: default value total mv as nav",
            "type": "string",
            "title": "Fund Nav Type",
            "default": "FUND_NAV_TYPE_UNSPECIFIED",
            "enum": [
                "FUND_NAV_TYPE_UNSPECIFIED",
                "FUND_NAV_TYPE_GP_NAV",
                "FUND_NAV_TYPE_GP_NAV_WITH_NEWCASH",
                "FUND_NAV_TYPE_TOTAL_MV_AS_NAV"
            ]
        },
        "v2IssuerAttribute": {
            "description": "- ISSUER_ATTRIBUTE_UNSPECIFIED: not specified issuer by - default\n - ISSUER_ATTRIBUTE_CODE: For search on Issuer code. default behavior.\n - ISSUER_ATTRIBUTE_NAME: For search on Issuer name\n - ISSUER_ATTRIBUTE_TICKER: For search on Issuer ticker",
            "type": "string",
            "title": "Issuer Attribute",
            "default": "ISSUER_ATTRIBUTE_UNSPECIFIED",
            "enum": [
                "ISSUER_ATTRIBUTE_UNSPECIFIED",
                "ISSUER_ATTRIBUTE_CODE",
                "ISSUER_ATTRIBUTE_NAME",
                "ISSUER_ATTRIBUTE_TICKER"
            ]
        },
        "v2NewCashType": {
            "description": "- NEW_CASH_TYPE_UNSPECIFIED: not specified new cash type\n - NEW_CASH_TYPE_CONFIRMED: confirmed\n - NEW_CASH_TYPE_CONFIRMED_AUTHORIZED: confirmed and authorized\n - NEW_CASH_TYPE_CONFIRMED_AUTHORIZED_OPEN: confirmed, authorized and open",
            "type": "string",
            "title": "New Cash Type",
            "default": "NEW_CASH_TYPE_UNSPECIFIED",
            "enum": [
                "NEW_CASH_TYPE_UNSPECIFIED",
                "NEW_CASH_TYPE_CONFIRMED",
                "NEW_CASH_TYPE_CONFIRMED_AUTHORIZED",
                "NEW_CASH_TYPE_CONFIRMED_AUTHORIZED_OPEN"
            ]
        },
        "v2PortfolioPositionWarnings": {
            "type": "object",
            "title": "Portfolio positions contains all warnings per portfolio for the positions api",
            "properties": {
                "portfolioName": {
                    "type": "string",
                    "title": "The portfolio name associated with the warnings"
                },
                "positionsWarnings": {
                    "type": "array",
                    "title": "A list of warnings for the positions",
                    "items": {
                        "$ref": "#/definitions/v2PositionWarning"
                    }
                }
            }
        },
        "v2PositionWarning": {
            "type": "object",
            "title": "Position warning is a specific warning for the positions api",
            "properties": {
                "warningCode": {
                    "type": "string",
                    "title": "The warning code associated with the warning"
                },
                "warningMessage": {
                    "type": "string",
                    "title": "The warning message associated with the warning"
                }
            }
        },
        "v2PositionsQuery": {
            "description": "The query required to perform a Positions API call.",
            "type": "object",
            "required": [
                "portfolioTickers"
            ],
            "properties": {
                "portfolioTickers": {
                    "type": "array",
                    "title": "Portfolios to load positions from",
                    "required": [
                        "portfolio_tickers"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "pmCaseId": {
                    "type": "string",
                    "title": "Name of the pm case id"
                },
                "dateSettings": {
                    "title": "Date settings\n(-- api-linter: aladdin::0901::prefix-required-field=disabled\n aip.dev/not-precedent: We need to do this because it is date related configuration --)\n(-- api-linter: core::0144::message-field-plural=disabled\n aip.dev/not-precedent: We need to do this because it represents the configuration --)\nHoliday Calendar The Aladdin calendar to override the standard Empty calendar. Valid calendar names can be retrieved by making a Decodes API request to the MKT_CALENDARS\nPosition Date The as-of date when the positions were held. This is start of day by default\nCalendar Date An ISO date field where the User can specify a today’s date (T) in their time zone to determine EOD/SOD date",
                    "$ref": "#/definitions/v1DateSettings"
                },
                "fundNavType": {
                    "title": "fund nav type",
                    "$ref": "#/definitions/v2FundNavType"
                },
                "benchType": {
                    "title": "benchmark type",
                    "$ref": "#/definitions/v2BenchmarkType"
                },
                "newCashType": {
                    "title": "New cash type",
                    "$ref": "#/definitions/v2NewCashType"
                },
                "displayCurrency": {
                    "type": "string",
                    "title": "Currency for display"
                },
                "desiredCurrencyType": {
                    "title": "Desired Currency",
                    "$ref": "#/definitions/v2DesiredCurrencyType"
                },
                "positionsViewRequests": {
                    "description": "multi view request to get data for a given entity or combination of entities.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2PositionsViewRequest"
                    }
                },
                "userScopedSession": {
                    "type": "boolean",
                    "title": "Indicator for whether the proposed orders and proposed cash should get filtered out based on the username"
                }
            }
        },
        "v2PositionsViewRequest": {
            "description": "A request to fetch data for a given list of entities like positions, targets, ect.",
            "type": "object",
            "properties": {
                "attributeIds": {
                    "type": "array",
                    "title": "The columns to be included in the response. These are composite columns, meaning they are being drawn from multiple views. \nAs such, you much distinguish which view each column comes from by separating the view name and the column name with a \"#\" in the form \u003cview name\u003e#\u003ccolumn name\u003e. \nFor example, if you wanted the benchmark ticker from the portfolio view, you would include \"portfolio#benchmark_ticker\", or if you wanted the security type from the position view you would include \"position#sec_type\". \nPlease use the data dictionary located at the bottom of the Position API release note to find a comprehensive list of valid attribute Ids.\nValid attributeIds include (but are not limited) to the following:\n\"position#quantity_port_sod\"\n\"position#price_port\"\n\"portfolio#sod_nav_port\"\n\"position#market_val_port_sod\"\n\"position#exposure_port_sod\"\n\"position#pct_exposure_port_sod\"\n\"position#pct_market_val_port_sod\"",
                    "items": {
                        "type": "string"
                    }
                },
                "filter": {
                    "title": "The data filter tree to be applied to the response",
                    "$ref": "#/definitions/v1DataFilterTree"
                },
                "viewFilter": {
                    "title": "The view filter (with sorting, top_n, bottom_n) to be applied to the result set\nNOTE: Not available",
                    "$ref": "#/definitions/v1ViewFilter"
                },
                "aggregation": {
                    "title": "The aggregation definition for the filter positions request\nNOTE: Not available",
                    "$ref": "#/definitions/v1AggregationDefinition"
                },
                "unmappedPositionType": {
                    "title": "Unmapped position type",
                    "$ref": "#/definitions/v2UnmappedPositionType"
                },
                "retainMatchedRecordsOnly": {
                    "description": "Indicator to show only matched records between entities.",
                    "type": "boolean"
                },
                "creditViewSetting": {
                    "title": "settings for credit view",
                    "$ref": "#/definitions/v2CreditViewSetting"
                },
                "fetchEntitySettleDate": {
                    "title": "used to send the settle date to fetch records\n(-- api-linter: core::0142::time-field-type=disabled\n    aip.dev/not-precedent: We need to do this because settle date needs to be returned as a relative date.\n    We need both calendar date and relative dates for this field--)",
                    "$ref": "#/definitions/v1RelativeDate"
                }
            }
        },
        "v2UnmappedPositionType": {
            "description": "- UNMAPPED_POSITION_TYPE_UNSPECIFIED: default behavior where only mapped position should be returned\n - UNMAPPED_POSITION_TYPE_STRATEGY_ID: unmapped positions which has matching strategy id\n - UNMAPPED_POSITION_TYPE_TARGET_DEFINITION: unmapped positions which has matching target definition",
            "type": "string",
            "title": "Mapped Position Type",
            "default": "UNMAPPED_POSITION_TYPE_UNSPECIFIED",
            "enum": [
                "UNMAPPED_POSITION_TYPE_UNSPECIFIED",
                "UNMAPPED_POSITION_TYPE_STRATEGY_ID",
                "UNMAPPED_POSITION_TYPE_TARGET_DEFINITION"
            ]
        }
    },
    "securityDefinitions": {
        "APIKeyHeader": {
            "type": "apiKey",
            "name": "VND.com.blackrock.API-Key",
            "in": "header"
        },
        "ClientKeyHeader": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "OAuth2AccessCode": {
            "description": "This API uses OAuth 2.0 with the access code flow.",
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://client.blackrock.com/api/oauth2/default/v1/authorize",
            "tokenUrl": "https://client.blackrock.com/api/oauth2/default/v1/token",
            "scopes": {
                "offline_access": "This keeps you signed in to the app, even when you are not using it.",
                "portfolio_management.positions.positions.v2.Positions:read": "non-sensitive read"
            }
        },
        "OAuth2ClientCredentials": {
            "description": "This API uses OAuth 2.0 with the client credentials flow.",
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://client.blackrock.com/api/oauth2/default/v1/token",
            "scopes": {
                "offline_access": "This keeps you signed in to the app, even when you are not using it.",
                "portfolio_management.positions.positions.v2.Positions:read": "non-sensitive read"
            }
        },
        "basicAuth": {
            "type": "basic"
        }
    },
    "security": [
        {
            "APIKeyHeader": [],
            "OAuth2AccessCode": [
                "offline_access",
                "portfolio_management.positions.positions.v2.Positions:read"
            ]
        },
        {
            "APIKeyHeader": [],
            "OAuth2ClientCredentials": [
                "offline_access",
                "portfolio_management.positions.positions.v2.Positions:read"
            ]
        },
        {
            "APIKeyHeader": [],
            "ClientKeyHeader": []
        },
        {
            "APIKeyHeader": [],
            "basicAuth": []
        }
    ],
    "tags": [
        {
            "name": "Access.Internal"
        }
    ],
    "x-access-level": "Public"
}