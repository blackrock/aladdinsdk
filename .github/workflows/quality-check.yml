# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: AladdinSDK QC

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 setuptools build
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82  --extend-exclude=aladdinsdk/api/codegen/ --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count  --extend-exclude=aladdinsdk/api/codegen/ --exit-zero --max-complexity=10 --max-line-length=150 --statistics
    - name: Test with pytest
      run: |
        pip install pytest pytest-cov coverage
        pytest test/ --cov=aladdinsdk --cov-report= --junitxml=junit/test-results.xml && coverage report -m
    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results
        path: junit/test-results.xml
      if: ${{ always() }}
    - name: Build package
      run: |
        python -m pip install build setuptools
        python devutils/asdk_agraph_api_codegen.py -osd resources/api_specs
        python -m build
    - name: (TEMP) Upload build results
      uses: actions/upload-artifact@v3
      with:
        name: aladdinsdk-build
        path: dist/*
      if: ${{ always() }}
    # - name: Publish package
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: ${{ secrets.SIMPYL_TOKEN_PYPI }}
